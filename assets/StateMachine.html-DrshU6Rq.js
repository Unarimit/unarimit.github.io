import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as o,a as n,b as s,d as t,e as i}from"./app-BX3Xhc_b.js";const l={},u=n("h1",{id:"有限状态机",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#有限状态机"},[n("span",null,"有限状态机")])],-1),r=n("p",null,"对于接触unity的人来说，状态机应该不是一个陌生的概念，比如Unity自带的Animator。状态机也可以用来实现游戏AI，从最基础的控制角色的三个动作，又或是掌握一场RTS游戏的决策，状态机仿佛无所不能。但由于状态机的状态转移比较混乱，使用状态机来编写AI往往不是最佳选择。",-1),k=n("h2",{id:"状态机设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#状态机设计"},[n("span",null,"状态机设计")])],-1),d={href:"https://www.bilibili.com/video/BV1zf4y1r7FJ",target:"_blank",rel:"noopener noreferrer"},v=i(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">PersonController</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>StateType<span class="token punctuation">,</span> IAgentState<span class="token punctuation">&gt;</span></span> states <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>StateType<span class="token punctuation">,</span> IAgentState<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">IAgentState</span> currentState<span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _instantiatePosition <span class="token operator">=</span> transform<span class="token punctuation">.</span>position<span class="token punctuation">;</span>

        states<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>StateType<span class="token punctuation">.</span>Idle<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IdleState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        states<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>StateType<span class="token punctuation">.</span>React<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ReactState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 在状态转移时执行 OnExit() 和 OnEnter()</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TranslateState</span><span class="token punctuation">(</span><span class="token class-name">StateType</span> state<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            currentState<span class="token punctuation">.</span><span class="token function">OnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        currentState <span class="token operator">=</span> states<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">;</span>
        currentState<span class="token punctuation">.</span><span class="token function">OnEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        currentState<span class="token punctuation">.</span><span class="token function">OnUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 每个state都是一个cs脚本，继承这个接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAgentState</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过简单几行代码，就有状态机的雏形了。且各状态代码管理起来方便直观。</p><p>但这样AI的代码只能通过程序实现，有图形化状态机的插件更好。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,4),m={href:"https://www.bilibili.com/video/BV1zf4y1r7FJ",target:"_blank",rel:"noopener noreferrer"};function b(y,h){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,r,k,n("p",null,[s("设计完全参考 "),n("a",d,[s("在Unity中使用状态机制作一个敌人AI - Bilibili"),t(a)]),s(" 中所描述的（视频中也有详细的例子），使用以下代码作为Agent脚本：")]),v,n("ul",null,[n("li",null,[n("a",m,[s("在Unity中使用状态机制作一个敌人AI - Bilibili"),t(a)])])])])}const _=e(l,[["render",b],["__file","StateMachine.html.vue"]]),S=JSON.parse('{"path":"/AI/StateMachine.html","title":"有限状态机","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"状态机设计","slug":"状态机设计","link":"#状态机设计","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1707819000000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":1}]},"readingTime":{"minutes":1.13,"words":340},"filePathRelative":"AI/StateMachine.md","localizedDate":"February 13, 2024"}');export{_ as comp,S as data};

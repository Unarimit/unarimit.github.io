import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as r,c as h,a as i,b as e,d as n,e as l}from"./app-BX3Xhc_b.js";const o="/assets/shading-1-vAVH6Rmz.png",p="/assets/shading-2-B4CjToc-.png",c="/assets/shading-3-Cn3FBZfr.png",d="/assets/shading-4-C2Mv-sRI.png",u="/assets/shading-5-CUgb9YtN.png",g="/assets/shading-6-B13ELi2A.png",m="/assets/shading-8-D0hJn3eh.png",_="/assets/shading-7-DKmy3eTj.png",v={},b=l('<h1 id="着色-shading" tabindex="-1"><a class="header-anchor" href="#着色-shading"><span>着色 Shading</span></a></h1><blockquote><p>The process of <strong>applying a material</strong> to an object</p></blockquote><p>本文介绍简单的着色过程需要考虑什么：</p><ul><li>着色模型</li><li>着色频率</li><li>贴图(uv)采样</li></ul><h2 id="着色模型" tabindex="-1"><a class="header-anchor" href="#着色模型"><span>着色模型</span></a></h2><p>一个简单的着色模型需要考虑以下特征</p><blockquote><p>下面介绍 Blinn-Phong Reflectance Model，是一种经验模型（不满足真实的物理情况）</p></blockquote><ul><li>漫反射</li><li>镜面高光</li><li>环境光</li></ul><p>图：着色需要考虑的几个特征（不包括间接光照等复杂的特征）</p><img width="400" src="'+o+'"><h3 id="漫反射的计算" tabindex="-1"><a class="header-anchor" href="#漫反射的计算"><span>漫反射的计算</span></a></h3><p>需要考虑：</p><ul><li>接受光线的数量（背光和正对着光的亮度肯定是不同的）</li><li>光线随距离的衰减</li></ul><img width="400" src="'+p+'"><h3 id="镜面高光的计算" tabindex="-1"><a class="header-anchor" href="#镜面高光的计算"><span>镜面高光的计算</span></a></h3><p>需要考虑：</p><ul><li>接受反射光线的数量 <ul><li>这里没有直接比较反射光线和观察方向的相似度，而是比较了半程向量和法线的相似度，是一种优化方式</li></ul></li><li>不同数量光线的衰减函数</li></ul><img width="400" src="'+c+'"><h3 id="环境光的计算" tabindex="-1"><a class="header-anchor" href="#环境光的计算"><span>环境光的计算</span></a></h3><p>假设任何地方的环境光强度都是相同的</p><ul><li>很激进的假设，保证没有地方完全是黑的</li></ul><img width="400" src="'+d+'"><h3 id="总结-涉及的向量运算" tabindex="-1"><a class="header-anchor" href="#总结-涉及的向量运算"><span>总结-涉及的向量运算</span></a></h3><div class="hint-container tip"><p class="hint-container-title">通过点乘判断向量是否接近</p><p>a·b = sinθ|a||b| // 注：sin(0) = 1</p></div><h3 id="总结-可视化" tabindex="-1"><a class="header-anchor" href="#总结-可视化"><span>总结-可视化</span></a></h3><img width="400" src="'+u+'"><h2 id="着色频率" tabindex="-1"><a class="header-anchor" href="#着色频率"><span>着色频率</span></a></h2><p>有三种着色频率：</p><blockquote><p>当面数很多时，前两种也能达到较好的效果。还有一些风格化着色也可以考虑使用前两种（如低多边形）。</p></blockquote><ul><li>Flat shading，频率是每个三角面，效果如下图第一个所示。</li><li>Gouraud Shading，频率是每个三角面的顶点，三角面内像素做颜色插值，效果如下图第二个所示。</li><li>Phong Shading，频率是每个三角面的顶点，三角面内像素做<strong>法线</strong>插值，效果如下图第三个所示。</li></ul><p>图：三种着色频率在一个球体上的效果</p><img width="400" src="'+g+'"><h3 id="总结-涉及的向量运算-1" tabindex="-1"><a class="header-anchor" href="#总结-涉及的向量运算-1"><span>总结-涉及的向量运算</span></a></h3><div class="hint-container tip"><p class="hint-container-title">如何计算顶点的法线</p><p>对周围面的法线做加权（面积）平均</p></div><div class="hint-container tip"><p class="hint-container-title">如何插值每个像素的法线</p><p>引入中心坐标（Barycentric interpolation）</p></div><h2 id="uv采样" tabindex="-1"><a class="header-anchor" href="#uv采样"><span>uv采样</span></a></h2><p>通过uv（贴图转化的坐标系的两个轴，常常通过其进行指代）获取顶点或像素的颜色。</p><p>uv、uv采样（中心坐标和深度）、uv的抗锯齿采样（如双线性插值）、uv过大时的处理（mipmap，产生1/3的额外存储空间）</p><blockquote><p>在过大的uv上进行采样，除非使用超大的超采样，否则会产生摩尔纹和锯齿</p></blockquote><p>mipmap进行连续范围查找的关键：又是插值</p><img width="500" src="'+m+'">',41),f={href:"https://en.wikipedia.org/wiki/Anisotropic_filtering",target:"_blank",rel:"noopener noreferrer"},k=i("strong",null,"三倍（随着2x,4x,8x的提高，收敛到三倍）",-1),x=l('<ul><li>没能解决其他角度的拉伸问题（如对角线方向拉伸），也有其他办法，但有更多的额外开销。。</li></ul><h2 id="未分类" tabindex="-1"><a class="header-anchor" href="#未分类"><span>未分类</span></a></h2><p>图：渲染发生在渲染管线的哪个step和可编程渲染管线（Shader）</p><img width="500" src="'+_+'"><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',5),w={href:"https://www.bilibili.com/video/BV1X7411F744/?p=7",target:"_blank",rel:"noopener noreferrer"};function S(q,B){const a=t("ExternalLinkIcon");return r(),h("div",null,[b,i("p",null,[e("解决mipmap产生的over-blur，引入各向"),i("a",f,[e("异性过滤（Anisotropic Filtering）"),n(a)]),e("，解决垂直和水平拉伸的产生的采样问题，但存储开销变为原来的"),k,e("（主要依赖显存，运算开销不高）。")]),x,i("ul",null,[i("li",null,[i("a",w,[e("GAMES101-闫令琪-Shading Bilibili"),n(a)])])])])}const N=s(v,[["render",S],["__file","Shading.html.vue"]]),V=JSON.parse('{"path":"/ComputerGraphics/Shading.html","title":"着色 Shading","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"着色模型","slug":"着色模型","link":"#着色模型","children":[{"level":3,"title":"漫反射的计算","slug":"漫反射的计算","link":"#漫反射的计算","children":[]},{"level":3,"title":"镜面高光的计算","slug":"镜面高光的计算","link":"#镜面高光的计算","children":[]},{"level":3,"title":"环境光的计算","slug":"环境光的计算","link":"#环境光的计算","children":[]},{"level":3,"title":"总结-涉及的向量运算","slug":"总结-涉及的向量运算","link":"#总结-涉及的向量运算","children":[]},{"level":3,"title":"总结-可视化","slug":"总结-可视化","link":"#总结-可视化","children":[]}]},{"level":2,"title":"着色频率","slug":"着色频率","link":"#着色频率","children":[{"level":3,"title":"总结-涉及的向量运算","slug":"总结-涉及的向量运算-1","link":"#总结-涉及的向量运算-1","children":[]}]},{"level":2,"title":"uv采样","slug":"uv采样","link":"#uv采样","children":[]},{"level":2,"title":"未分类","slug":"未分类","link":"#未分类","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1708104141000,"updatedTime":1714296793000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":3}]},"readingTime":{"minutes":2.83,"words":848},"filePathRelative":"ComputerGraphics/Shading.md","localizedDate":"February 16, 2024"}');export{N as comp,V as data};

import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as d,c,a as e,b as s,d as t,w as i,e as n}from"./app-BX3Xhc_b.js";const u="/assets/Resources-2-C9RBrZjC.png",h="/assets/Resources-1-DWIMlk59.png",p="/assets/Resources-3-BDhLhiQs.png",_={},b=n('<h1 id="资源管理" tabindex="-1"><a class="header-anchor" href="#资源管理"><span>资源管理</span></a></h1><p>Unity提供<code>Resources</code>、<code>AssetsBundle</code>(俗称ab包)和<code>Addressable</code>API用于管理资源。</p><blockquote><p>Unity2018之前关于自行构建使用<code>AssetsBundle</code>的资源管理的方案已被标记为&quot;out of date&quot;，被<code>Addressable</code>替代。</p></blockquote><p>以下是这些API的区别：</p>',4),m=e("li",null,[s("*在编辑器中直接引用-"),e("code",null,"AssetDatabase"),s("：简单易用😁，unity会按场景和共用资源提供一定的管理🤔，包体过大问题😡，不支持热更新😡")],-1),A=e("code",null,"Resources",-1),f={href:"https://learn.unity.com/tutorial/assets-resources-and-assetbundles#5c7f8528edbc2a002053b5a6",target:"_blank",rel:"noopener noreferrer"},B={href:"https://docs.unity3d.com/cn/current/Manual/BestPracticeUnderstandingPerformanceInUnity6.html",target:"_blank",rel:"noopener noreferrer"},g=e("li",null,[e("code",null,"AssetsBundle"),s(": 根据需要装载和卸载资源😁，依赖问题和装载卸载控制使管理较为困难😡")],-1),k=e("li",null,[e("code",null,"Addressable"),s("(一套"),e("code",null,"AssetsBundle"),s("的管理方案): 分组管理😁，异步加载😁，有一定学习成本😅")],-1),y=e("p",null,"对于较小的项目或不需要频繁更新资源的情况下，可以使用简单的 Resource 管理方式。而对于大型项目或需要动态加载和更新资源的情况下，更推荐使用灵活的 Addressable 方式来管理资源。",-1),R=e("blockquote",null,[e("p",null,[s("也有一些工作室会写一套逻辑管理"),e("code",null,"AssetsBundle")])],-1),U=e("h2",{id:"resources",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#resources"},[e("span",null,"Resources")])],-1),q=e("div",{class:"hint-container warning"},[e("p",{class:"hint-container-title"},"Warning"),e("p",null,"Resources 文件夹是 Unity 项目中许多常见问题的来源。Resources 文件夹的使用不当会使项目构建出现膨胀，导致内存消耗过高，并显著增加应用程序启动时间。")],-1),x=e("p",null,"用于动态的载入prefab，贴图等素材(不需要在inspector中拖动)。相对于放在其他地方的资源，Resource下的必定会被打包发布，其他资源只有在打包的场景使用到的时候才会被打包发布。",-1),w=e("br",null,null,-1),v=e("img",{width:"600",src:u},null,-1),I=e("br",null,null,-1),D=n('<p>Resources的工作流程分为两个个步骤：</p><ol><li>准备资源：把资源放在<code>[项目名]\\Assets\\...\\Resources\\</code>下 ( <code>...</code>可以包含多个目录，也可以为空)</li><li>使用资源：通过<code>Resources.Load</code>载入资源。如：<code>Resources.Load&lt;GameObject&gt;(&quot;shpere&quot;);</code>，这里通过泛型限定了载入类型为prefab</li></ol><h3 id="资源映射表" tabindex="-1"><a class="header-anchor" href="#资源映射表"><span>资源映射表</span></a></h3><p>为了防止<code>Resources</code>文件夹下文件结构变动对检索资源造成影响，可以通过写editor脚本，配置资源映射表的方式解决这一问题。</p><p>其中，资源映射表应写入<code>SteamingAssests</code>文件夹下，便于读取</p><h2 id="assetsbundle" tabindex="-1"><a class="header-anchor" href="#assetsbundle"><span>AssetsBundle</span></a></h2><p>AssetsBundle可以解决包体过大和启动时的加载时间过长问题。</p><p>但就如开头所描述的那样，AssetsBundle的管理比较困难，但如果只是想初步体验他的流程，则十分简单，下面会介绍一个简单的使用样例，包括资源的打包和加载逻辑。</p>',8),L={href:"https://docs.unity3d.com/cn/current/Manual/AssetBundles-Workflow.html",target:"_blank",rel:"noopener noreferrer"},C=n('<ol><li>为 AssetBundle 分配资源 <ul><li>在Asset对象的 Inspector 底部</li></ul></li></ol><img src="'+h+'"><ol start="2"><li>构建 AssetBundle <ul><li>需要写一个简单的Editor脚本，主要通过 <code>BuildPipeline.BuildAssetBundles</code> 方法</li></ul></li><li>加载 AssetBundle 和资源(Asset) <ul><li>通过文件加载AssetBundle：主要通过 <code>AssetBundles.LoadFromFile</code> 方法</li><li>通过网络加载AssetBundle：主要通过 <code>UnityEngine.Networking.UnityWebRequestAssetBundle.GetAssetBundle</code> 方法</li><li>使用资源：通过<code>bundle.LoadAsset</code>方法获取AssetBundle中的资源，如<code>bundle.LoadAsset&lt;GameObject&gt;(&quot;Cube&quot;);</code></li></ul></li></ol>',3),P={href:"https://docs.unity3d.com/cn/current/Manual/AssetBundles-Workflow.html",target:"_blank",rel:"noopener noreferrer"},M=n('<h3 id="assetsbundle的管理问题" tabindex="-1"><a class="header-anchor" href="#assetsbundle的管理问题"><span>AssetsBundle的管理问题</span></a></h3><blockquote><p>以下将AssetsBundle统称为ab包</p></blockquote><p>上述用例并没有考虑打包和解包的各种问题：</p><ul><li>打包时： <ul><li>资源和包没有建立对应关系的问题（程序员需要知道哪个资源在哪个包中，先加载后使用，不是很方便）</li><li>资源的依赖和循环引用问题</li><li>可能因为引用多次打包同一个资源的问题</li></ul></li><li>解包时： <ul><li>ab包在何时加载卸载</li><li>异步加载</li></ul></li></ul><p>根据上述问题，我们在打包时就要配置资源url到ab包的映射（通过目录或专门的映射表），并且对于依赖资源也要有加载策略（设置ab包之间的层级，避免环和重复加载），如果出现问题需要报错提示。最后应该生成资源描述表，描述ab包中的资源和依赖关系，方便按需解包</p><blockquote><p>查找资源的依赖使用 <code>AssetDatabase.GetDependencies</code> 方法</p></blockquote><p>在解包时，则要维护ab包和其中资源的使用情况（可以使用引用计数），在不被使用时卸载。也要提供异步加载的策略，防止加载时“暂停”主线程影响加载UI的更新或游戏逻辑的正常运行。</p><p>一定要注意ab包的管理问题，设计好方案也要多次测试。如果没有合格的管理，就能看到熟悉的粉红色物体啦~</p><img width="300" src="'+p+'"><h2 id="addressable" tabindex="-1"><a class="header-anchor" href="#addressable"><span>Addressable</span></a></h2><p>https://www.youtube.com/watch?v=XIHINtB2e1U 有一些图，挺好的，有空抄一下 WIP</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',12),N={href:"https://zhuanlan.zhihu.com/p/635796583",target:"_blank",rel:"noopener noreferrer"},W={href:"https://zhuanlan.zhihu.com/p/541893117",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.unity3d.com/cn/current/Manual/AssetDatabase.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://docs.unity3d.com/cn/current/Manual/AssetBundlesIntro.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://docs.unity3d.com/Packages/com.unity.addressables@1.20/manual/index.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://learn.unity.com/tutorial/assets-resources-and-assetbundles#5c7f8528edbc2a002053b5a6",target:"_blank",rel:"noopener noreferrer"};function G(S,V){const l=o("ExternalLinkIcon"),r=o("center");return d(),c("div",null,[b,e("ul",null,[m,e("li",null,[A,s(": 简单易用😁，文件过多时会导致"),e("a",f,[s("各种问题"),t(l)]),s("😡，"),e("a",B,[s("灾难性的内存管理"),t(l)]),s("😡，文件夹下资源全部发布😡，不支持热更新😡")]),g,k]),y,R,U,q,x,t(r,null,{default:i(()=>[w,v,I,s("相比于在editor中直接引用资源的按需打包，resource文件夹下的资源则会通通打包为一个文件 ")]),_:1}),D,e("p",null,[s("如"),e("a",L,[s("Unity文档中"),t(l)]),s("描述的那样，AssetsBundle的工作流程分为三个步骤：")]),C,e("p",null,[s("其中涉及C#脚本的内容"),e("a",P,[s("Unity文档中"),t(l)]),s("都给出了简单的样例。")]),M,e("ul",null,[e("li",null,[e("a",N,[s("Unity资源管理方案 Addressable详解 - changyun的文章 - 知乎"),t(l)])]),e("li",null,[e("a",W,[s("Unity资源管理系列：Unity Addressable资源管理实战 - 鲨鱼辣椒的文章 - 知乎"),t(l)])]),e("li",null,[e("a",z,[s("AssetDatabase - Unity Doc"),t(l)])]),e("li",null,[e("a",E,[s("AssetBundle - Unity Doc"),t(l)])]),e("li",null,[e("a",T,[s("Addressables Manual - Unity Doc"),t(l)])]),e("li",null,[e("a",F,[s("Assets, Resources and AssetBundles #The Resource Folder - Untiy Learn"),t(l)])])])])}const H=a(_,[["render",G],["__file","Resource.html.vue"]]),J=JSON.parse('{"path":"/UnityComponent/Resource.html","title":"资源管理","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Resources","slug":"resources","link":"#resources","children":[{"level":3,"title":"资源映射表","slug":"资源映射表","link":"#资源映射表","children":[]}]},{"level":2,"title":"AssetsBundle","slug":"assetsbundle","link":"#assetsbundle","children":[{"level":3,"title":"AssetsBundle的管理问题","slug":"assetsbundle的管理问题","link":"#assetsbundle的管理问题","children":[]}]},{"level":2,"title":"Addressable","slug":"addressable","link":"#addressable","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1708786377000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":4}]},"readingTime":{"minutes":4.41,"words":1324},"filePathRelative":"UnityComponent/Resource.md","localizedDate":"February 13, 2024"}');export{H as comp,J as data};

import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-BX3Xhc_b.js";const i="/assets/customEditor-1--bYoUPs8.png",u={},r=e(`<h1 id="自定义editor" tabindex="-1"><a class="header-anchor" href="#自定义editor"><span>自定义Editor</span></a></h1><p>自定义Editor用于方便测试，或者给其他从业者（如美术、策划）编辑关卡使用的。</p><h2 id="customeditor" tabindex="-1"><a class="header-anchor" href="#customeditor"><span>CustomEditor</span></a></h2><p>用于拓展<code>MonoBehaviour</code>的Inspector，可以通过定义UI控件，配置<code>MonoBehaviour</code>或执行某些方法。还可以配合<code>[ExecuteInEditMode]</code>的<code>MonoBehaviour</code>在Editor中改造“世界”。</p><p>如：<code>UGUI Map</code>插件使用它来配置地图，Terrain、ProBuilder等Unity内置工具提供了丰富的世界编辑器功能。</p><p>当看到一个类继承了Editor并有<code>CustomEditor</code>特性时，他就是一个用于拓展某个<code>MonoBehaviour</code>的<code>CustomEditor</code>了</p><p>如下图所示：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomEditor</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LookAtPoint</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// !</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CanEditMultipleObjects</span></span><span class="token punctuation">]</span> <span class="token comment">// tells Unity that you can select multiple objects with this editor and change them all at the same time.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LookAtPointEditor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Editor</span></span> <span class="token comment">// !</span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="例子-用反射-reflect-和特性-attribute-来测试" tabindex="-1"><a class="header-anchor" href="#例子-用反射-reflect-和特性-attribute-来测试"><span>例子：用反射(Reflect)和特性(Attribute)来测试</span></a></h3>`,9),k={href:"https://assetstore.unity.com/packages/tools/utilities/naughtyattributes-129996",target:"_blank",rel:"noopener noreferrer"},d=e('<p>实现效果，给想要拿来测试的方法添加特性，会在测试控制器上显示一个按钮，点击执行：</p><img src="'+i+`"><p>代码如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 负责显示和执行的CustomEditor</span>
<span class="token punctuation">[</span><span class="token function">CustomEditor</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyTestController</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyTestControllerEditor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Editor</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnInspectorGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> controller <span class="token operator">=</span> <span class="token punctuation">(</span>MyTestController<span class="token punctuation">)</span>target<span class="token punctuation">;</span>

        GUILayout<span class="token punctuation">.</span><span class="token function">Label</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">controller<span class="token punctuation">.</span>MyTestInvokeInfos<span class="token punctuation">.</span>Count</span><span class="token punctuation">}</span></span><span class="token string"> method find, only runtime clearly&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token keyword">in</span> controller<span class="token punctuation">.</span>MyTestInvokeInfos<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>GUILayout<span class="token punctuation">.</span><span class="token function">Button</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">x<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">::</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">x<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                x<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Instance<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnInspectorGUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 负责反射获取信息的controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTestController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTestInvokeInfo</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">MonoBehaviour</span> Instance<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">MethodInfo</span> Method<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>MyTestInvokeInfo<span class="token punctuation">&gt;</span></span> MyTestInvokeInfos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>MyTestInvokeInfo<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> allMono <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FindObjectsOfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MonoBehaviour<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> blackList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> mono <span class="token keyword">in</span> allMono<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>blackList<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>mono<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> methods <span class="token operator">=</span> mono<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyTestAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> m <span class="token keyword">in</span> methods<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                MyTestInvokeInfos<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyTestInvokeInfo</span> <span class="token punctuation">{</span> Method <span class="token operator">=</span> m<span class="token punctuation">,</span> Instance <span class="token operator">=</span> mono <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>methods<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> blackList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>mono<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 自定义特性</span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">MyTestAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MyTestAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="windowseditor" tabindex="-1"><a class="header-anchor" href="#windowseditor"><span>WindowsEditor</span></a></h2><p>会用到Unity的另一套UI组件</p><p>暂时接触不到吧，WIP</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,10),m={href:"https://docs.unity3d.com/Manual/editor-CustomEditors.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://stackoverflow.com/questions/3467765/find-methods-that-have-custom-attribute-using-reflection",target:"_blank",rel:"noopener noreferrer"};function b(h,y){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("之前看到一个Assets Store上的一个免费的测试插件叫"),n("a",k,[s("NaughtyAttributes"),t(a)]),s("，可以通过给方法添加特性来方便Debug（点链接进去看更具体哦），但我尝试Import的时候，发现他有好多功能，太复杂了些，不如自己写一个。")]),d,n("ul",null,[n("li",null,[n("a",m,[s("Custom Editors"),t(a)])]),n("li",null,[n("a",v,[s("Find methods that have custom attribute using reflection - StackOverflow"),t(a)])])])])}const g=p(u,[["render",b],["__file","CustomEditor.html.vue"]]),I=JSON.parse('{"path":"/UnityComponent/CustomEditor.html","title":"自定义Editor","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"CustomEditor","slug":"customeditor","link":"#customeditor","children":[{"level":3,"title":"例子：用反射(Reflect)和特性(Attribute)来测试","slug":"例子-用反射-reflect-和特性-attribute-来测试","link":"#例子-用反射-reflect-和特性-attribute-来测试","children":[]}]},{"level":2,"title":"WindowsEditor","slug":"windowseditor","link":"#windowseditor","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1707819000000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":1}]},"readingTime":{"minutes":1.66,"words":499},"filePathRelative":"UnityComponent/CustomEditor.md","localizedDate":"February 13, 2024"}');export{g as comp,I as data};

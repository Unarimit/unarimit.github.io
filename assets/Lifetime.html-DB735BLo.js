import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as i,c as l,d as e,w as d,a as n,b as a,e as o}from"./app-BX3Xhc_b.js";const u="/assets/monobehaviour_flowchart-0040N2Zi.svg",r="/assets/lifetime-1-C0Q2Dlyp.png",k={},m=o('<h1 id="生命周期-monobehavior" tabindex="-1"><a class="header-anchor" href="#生命周期-monobehavior"><span>生命周期(MonoBehavior)</span></a></h1><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>笔面试中，特别喜欢考<code>Awake</code>,<code>OnEnable</code>,<code>Start</code>,<code>FixedUpdate</code>,<code>Update</code>的执行顺序。除此之外，还需要掌握一些针对特殊需求的实现方法。例如<code>Update</code>里适合写什么逻辑等、<code>FixedUpdate</code>里适合写什么逻辑等。</p></div><h2 id="按照执行顺序介绍" tabindex="-1"><a class="header-anchor" href="#按照执行顺序介绍"><span>按照执行顺序介绍</span></a></h2><ul><li><code>Awake</code>：始终在任何<code>Start</code>函数之前并在实例化预制件之后调用此函数。（如果游戏对象在启动期间处于非活动状态，则在激活之后才会调用<code>Awake</code>）</li><li><code>OnEnable</code>：（仅在对象处于激活状态时调用）在启用对象后立即调用此函数。在创建 MonoBehaviour 实例时（例如加载关卡或实例化具有脚本组件的游戏对象时）会执行此调用。</li><li><code>Start</code>：仅当启用脚本实例后，才会在<strong>第一次帧更新之前</strong>调用<code>Start</code>。 <ul><li>若运行中加载<code>Monobehaviour</code>，<strong>可能会</strong>导致更新先于<code>Start</code>执行。</li></ul></li><li><code>FixedUpdate</code>：<code>Time.deltaTime</code>固定的<code>Update</code>。（默认一秒50次）</li><li><code>Update</code>：每帧调用一次.</li><li><code>LateUpdate</code>: 每帧调用一次, <code>LateUpdate</code>开始时，在<code>Update</code>中执行的所有计算便已完成。</li></ul>',4),v=n("img",{src:u},null,-1),h=n("h2",{id:"同一函数的更新顺序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#同一函数的更新顺序"},[n("span",null,"同一函数的更新顺序")])],-1),b=n("p",null,[a("如要改变不同脚本Awake函数的执行顺序，可以在"),n("code",null,"Project Settings -> Script Execution Order"),a("中排序脚本执行顺序。")],-1),g={href:"https://docs.unity3d.com/cn/current/Manual/class-MonoManager.html",target:"_blank",rel:"noopener noreferrer"},_=o(`<h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h2><h3 id="时间停止-时间加速" tabindex="-1"><a class="header-anchor" href="#时间停止-时间加速"><span>时间停止 &amp; 时间加速</span></a></h3><p>在一些rts中（如群星）玩家需要暂停时间进行一系列复杂的操作；又或是手游中的二倍速、三倍速战斗，所以如何实现暂停时间和加速时间的逻辑呢（除了UI之外的游戏逻辑都必须停止）</p><p>暂停时间 - 实现方法：</p><ul><li>设置<code>Time.timeScale = 0</code></li><li>如果要恢复时间，在<code>Update</code>或协程中执行判断逻辑恢复<code>Time.timeScale = 1</code><ul><li><code>Time.timeScale = 0</code>时<code>FixedUpdate</code>不会执行，所以UI逻辑应该放到<code>OnGUI</code>或<code>Update</code>中</li></ul></li></ul><p>加速时间 - 实现方法：</p><ul><li>设置<code>Time.timeScale = k</code>, k &gt; 1, k为2就是加速两倍</li></ul><p>在下面的代码中，可以观察到一次<code>fixedUpdate</code>和随时间不断增加的<code>update</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 这是一个挂载了的 MonoBehavior</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Time<span class="token punctuation">.</span>timeScale <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FixedUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;fixedUpdate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>一个gpt回答错误的例子</summary><p>当<code>Time.timeScale</code>的值为0时，<code>Update</code>和<code>FixedUpdate</code>函数将不会被调用。</p><ul><li><p><code>Update</code>函数是在每一帧绘制之前被调用的，通常用于处理与时间相关的逻辑和更新游戏对象的位置、动画等操作。当<code>Time.timeScale</code>为0时，即时间停止，<code>Update</code>函数将不再被调用，因为游戏逻辑因为时间停止而暂停。</p></li><li><p><code>FixedUpdate</code>函数用于处理物理模拟，它在固定的时间间隔内被调用（默认为每秒调用50次，可以在Project Settings中修改）。与<code>Update</code>函数不同，<code>FixedUpdate</code>函数受到<code>Time.timeScale</code>的影响，在时间停止时仍然会被调用，但是由于时间缩放为0，物理模拟的计算也会暂停。</p></li></ul><p>因此，当<code>Time.timeScale</code>为0时，<code>Update</code>和<code>FixedUpdate</code>函数都将停止执行。如果你想在时间停止时执行特定的逻辑，可以考虑使用协程（Coroutine）或其他方式来模拟所需的行为。</p></details><h3 id="start和awake" tabindex="-1"><a class="header-anchor" href="#start和awake"><span>Start和Awake</span></a></h3><p>在一次项目开发中，我发现我在某个<code>Start</code>中初始化的一个变量居然找不到引用。仔细一看是因为我初始化prefab之后就立刻调用了这个MonoBehavior的一个函数，导致<code>Start</code>中的逻辑还没有进行。然后把变量初始化放到<code>Awake</code>里面，解决了这一空引用问题。</p><p>在下方的代码中，可以观察到这些函数的优先级。</p><p>初始化prefab代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;Init begin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Instantiate</span><span class="token punctuation">(</span>prefab<span class="token punctuation">)</span><span class="token punctuation">;</span>
Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;Init end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>prefab中挂载的脚本代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// A MonoBehavior</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; Start!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; OnEnable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; Awake&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Console的输出</p><img src="`+r+'">',19),f=n("code",null,"Awake",-1),U=n("code",null,"OnEnable",-1),x=n("code",null,"Awake",-1),w={href:"https://docs.unity3d.com/cn/current/Manual/ExecutionOrder.html",target:"_blank",rel:"noopener noreferrer"},y=n("blockquote",null,[n("p",null,"请注意，对于添加到场景中的对象，在为任何对象调用 Start 和 Update 等函数之前，会为_所有_ 脚本调用 Awake 和 OnEnable 函数。当然，在游戏运行过程中实例化对象时，不能强制执行此调用。")],-1),S=n("p",null,"存在差异，有待进一步确定。",-1),q=n("h2",{id:"参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考"},[n("span",null,"参考")])],-1),O={href:"https://docs.unity3d.com/Manual/ExecutionOrder.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://docs.unity3d.com/cn/current/Manual/class-MonoManager.html",target:"_blank",rel:"noopener noreferrer"};function L(M,A){const c=t("center"),s=t("ExternalLinkIcon");return i(),l("div",null,[m,e(c,null,{default:d(()=>[a("来张官方的图")]),_:1}),v,h,b,n("p",null,[a("参考:"),n("a",g,[a("Script Execution Order 设置 - Unity doc"),e(s)])]),_,n("p",null,[a("根据对上方代码和输出的观察，初始化后的对象，会立刻调用"),f,a("和"),U,a("函数（在一个"),x,a("函数中初始化对象也同样）。这个现象和"),n("a",w,[a("unity doc"),e(s)]),a("中的:")]),y,S,q,n("ul",null,[n("li",null,[n("a",O,[a("Order of execution for event functions - Unity Documentation"),e(s)])]),n("li",null,[n("a",T,[a("Script Execution Order 设置 - Unity doc"),e(s)])])])])}const F=p(k,[["render",L],["__file","Lifetime.html.vue"]]),B=JSON.parse('{"path":"/UnityComponent/Lifetime.html","title":"生命周期(MonoBehavior)","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"按照执行顺序介绍","slug":"按照执行顺序介绍","link":"#按照执行顺序介绍","children":[]},{"level":2,"title":"同一函数的更新顺序","slug":"同一函数的更新顺序","link":"#同一函数的更新顺序","children":[]},{"level":2,"title":"例子","slug":"例子","link":"#例子","children":[{"level":3,"title":"时间停止 & 时间加速","slug":"时间停止-时间加速","link":"#时间停止-时间加速","children":[]},{"level":3,"title":"Start和Awake","slug":"start和awake","link":"#start和awake","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1707819000000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":1}]},"readingTime":{"minutes":3.83,"words":1149},"filePathRelative":"UnityComponent/Lifetime.md","localizedDate":"February 13, 2024"}');export{F as comp,B as data};

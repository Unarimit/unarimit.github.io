import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as a,c as l,a as e,b as o,d,e as t}from"./app-BX3Xhc_b.js";const p="/assets/minimap-DBOo2NZI.png",s={},r=t('<h1 id="小地图组件使用感想" tabindex="-1"><a class="header-anchor" href="#小地图组件使用感想"><span>小地图组件使用感想</span></a></h1><img src="'+p+'"><p>最近使用<code>UGUI Minimap</code>插件实现游戏中的<code>小地图</code>和<code>战略地图</code>功能，记录下使用他的感想。</p><ul><li><code>小地图</code>: 展示玩家操控角色附近的物体和地形。</li><li><code>战略地图</code>: 展示场景范围的物体和地形。玩家可以和地图中的角色图标互动，实现切换操作目标的功能。</li></ul><h2 id="简单介绍优缺点" tabindex="-1"><a class="header-anchor" href="#简单介绍优缺点"><span>简单介绍优缺点</span></a></h2><p><code>UGUI Minimap</code>确实是一个使用起来非常简单的插件，并且指导也丰富，体现在：</p><ul><li>在editor菜单栏中提供帮助文档。</li><li>配备的实例场景描述了控制方法。</li><li>可以通过帮助菜单的按键，一键配置小地图需要的渲染层。 <blockquote><p>(虽然配置这个并不复杂，可能找到它的相机和配置选项在哪里比较费事)</p></blockquote></li><li>提供两种各有特点的渲染方式： <ul><li>配置<code>Layer</code>通过相机剔除实现地图纹理的渲染，并可以<code>Bake</code>成贴图，减少渲染运算开销</li><li>通过<code>MonoBehaviour</code>将坐标的位置映射到地图上，渲染指定<code>Icon</code>，并提供了一些常用设计（如会放大图标代表它在目前的地图框外、FadeIn动画效果等）。</li></ul></li></ul><p>下面是缺点：</p><ul><li>使用旧的输入方式（提供按键映射配置）。若项目使用InputSystem，得自行配置，或设置unity输入模式为<code>Both</code>（即同时支持新旧输入系统）。</li><li><code>player</code>的<code>Icon</code>和其他<code>Icon</code>逻辑独立，目前我不知道有什么好处，但这样做影响到了切换地图时的动画表现（<code>player</code>的<code>Icon</code>和其他<code>Icon</code>表现不一致）。</li><li>没有明显的对外公开方法的标致，如控制<code>Icon</code>的显隐，能在外部通过好几个<code>public</code>的方法实现，如果在<code>Icon</code>未初始化完成的时候调用，还会出一个<code>Log</code>提示，需要自行在调用方法前做状态判断。</li><li>*时有时无的namespace，是因为后面补了一些功能不影响之前的代码，还是另有深意？</li></ul><h2 id="谈谈代码设计" tabindex="-1"><a class="header-anchor" href="#谈谈代码设计"><span>谈谈代码设计</span></a></h2><p><code>UGUI Minimap</code>作为一个优秀的小地图插件，其类型的设计方式值得参考。</p><p><code>UGUI Minimap</code>有两个核心类，<code>bl_MiniMap</code>和<code>bl_MiniMapEntity</code>。</p><ul><li><code>bl_MiniMap</code>：控制整体地图的表现，控制地图里<code>Icon</code>的渲染和空中相机的位置。</li><li><code>bl_MiniMapEntity</code>: 用于把这个脚本挂给具体的游戏角色，使其在地图上显示<code>Icon</code>。</li></ul><p>还存在一些类辅助实现，如<code>MiniMapIcon</code>是显示在地图上的<code>Icon</code>附带的脚本。这些辅助实现还拥有基类，使功能可以被拓展。例如<code>bl_MiniMapInputBase</code>是输入控制的基类（好像少了Drag方法），体现了他的<strong>拓展性</strong>，可以通过继承该类实现功能拓展。</p><p>还将从下列角度考察</p><ul><li>访问控制</li><li>外部控制（操控和构造关键属性，和组件交互是否方便）</li><li>WIP</li></ul><p><strong>访问控制:</strong> 存在大量没有注释的<code>public</code>方法，让人很迷惑。</p><p><strong>外部控制:</strong> 对于一些控制地图数据的操作，存在公共方法，例如<code>bl_MiniMap::SetAsActiveMiniMap()</code>通过把<code>Icon</code>绘制数据全转移到新的<code>bl_MiniMap</code>对象实现地图风格的替换，这个方法在示例场景也有体现。</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p><code>UGUI Minimap</code>除主要功能之外的实现也是很有参考价值的：菜单帮助功能，<code>bl_MiniMap</code>重写<code>Inspector</code>中的配置UI等。</p></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',20),m={href:"https://assetstore.unity.com/packages/tools/gui/ugui-minimap-32874",target:"_blank",rel:"noopener noreferrer"};function h(u,M){const c=n("ExternalLinkIcon");return a(),l("div",null,[r,e("ul",null,[e("li",null,[o("小地图插件："),e("a",m,[o("UGUI Minimap - Assets Store"),d(c)])])])])}const b=i(s,[["render",h],["__file","MinimapRamble.html.vue"]]),g=JSON.parse('{"path":"/CodingRamble/MinimapRamble.html","title":"小地图组件使用感想","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"简单介绍优缺点","slug":"简单介绍优缺点","link":"#简单介绍优缺点","children":[]},{"level":2,"title":"谈谈代码设计","slug":"谈谈代码设计","link":"#谈谈代码设计","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1708011239000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":2}]},"readingTime":{"minutes":2.96,"words":887},"filePathRelative":"CodingRamble/MinimapRamble.md","localizedDate":"February 13, 2024"}');export{b as comp,g as data};

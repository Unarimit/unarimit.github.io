import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as l,c as i,a as s,b as n,d as a,w as u,e as p}from"./app-BX3Xhc_b.js";const r={},d=p(`<h1 id="资源系统和服务" tabindex="-1"><a class="header-anchor" href="#资源系统和服务"><span>资源系统和服务</span></a></h1><h2 id="资源系统" tabindex="-1"><a class="header-anchor" href="#资源系统"><span>资源系统</span></a></h2><p>unity中，存在<code>Resources</code>和<code>AudioSource</code>等资源加载静态类。</p><p>其中<code>Resources</code>加载的资源，可能根据不同的平台和加载位置（<code>Resources</code>、<code>AssetStream</code>或是<code>Asset Bundle</code>）不同，产生不同的资源字符串。所以对<code>Resources</code>有封装需求。</p><p>而<code>AudioSource</code>或类似功能（如子弹发射），则可能因为频繁的创建和销毁产生内存碎片，并且不利于统一管理（如音量调节）。所以对<code>AudioSource</code>及其类似功能有封装需求。</p><h3 id="以resources-api的封装为例" tabindex="-1"><a class="header-anchor" href="#以resources-api的封装为例"><span>以Resources Api的封装为例</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ResourceManager</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Load</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> resName<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Object</span></span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> res <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Load</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>resName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;ResourceManager can not find </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">resName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这样的封装下，找不到资源会告诉你资源的名称，是不是比仅仅抛一个空引用异常要好呢？</p><h2 id="服务和服务定位器" tabindex="-1"><a class="header-anchor" href="#服务和服务定位器"><span>服务和服务定位器</span></a></h2><p>除了对unity固有api的封装外，我们有时还需要让这些资源加载类改变一下工作行为。对于音频输入，在其他模块的开发中需要它输出一些log而非播放嘈杂的音频特效；对于数据管理器，在测试阶段需要它每次都读取固定的数据而非可以在游戏内变更的存储系统。这时，就需要服务这一概念了（有点像是后端开发中的面向接口编程）。</p><blockquote><p>在多人开发中，这样做可以对正在并行开发的服务置空而不影响开发流程</p></blockquote>`,11),k=p(`<h3 id="以testdatabase为例" tabindex="-1"><a class="header-anchor" href="#以testdatabase为例"><span>以TestDatabase为例</span></a></h3><p>在我的游戏的开发过程中，存档系统的优先级比较靠后，所以先用静态类实现。为了方便之后丝滑的在两者之间切换，有了以下设计：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 服务定位器</span>
<span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyServices</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IGameDatabase</span> Database <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token function">MyServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 测试使用</span>
        Database <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 服务接口</span>
<span class="token keyword">internal</span> <span class="token keyword">interface</span> <span class="token class-name">IGameDatabase</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> 玩家拥有的Op <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Operator<span class="token punctuation">&gt;</span></span> Operators <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> 玩家拥有的机甲 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>MechaBase<span class="token punctuation">&gt;</span></span> Mechas <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> 所有关卡规则 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>LevelRule<span class="token punctuation">&gt;</span></span> LevelRules <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 服务提供者</span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">TestDatabase</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGameDatabase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Operator<span class="token punctuation">&gt;</span></span> Operators <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>MechaBase<span class="token punctuation">&gt;</span></span> Mechas <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>LevelRule<span class="token punctuation">&gt;</span></span> LevelRules <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">TestDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        LevelRules <span class="token operator">=</span> <span class="token function">generateTestLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Operators <span class="token operator">=</span> <span class="token function">generateTestOperators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Mechas <span class="token operator">=</span> <span class="token function">generateTestMechas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">registerDatabind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样在以后实现存档系统后，让实现存档系统的类继承<code>IGameDatabase</code>的接口，并在读取存档时配置<code>MyServices</code>，就可以实现无缝切换了。</p>`,6),m={href:"https://github.com/Unarimit/my-topdown-shooting-game/blob/0154b461cfff4dbdddf2188972c68159486be56e/Assets/Scripts/MyServices.cs",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/Unarimit/my-topdown-shooting-game/tree/0154b461cfff4dbdddf2188972c68159486be56e/Assets/Scripts/Services",target:"_blank",rel:"noopener noreferrer"},b=s("h2",{id:"参考",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参考"},[s("span",null,"参考")])],-1),g={href:"https://www.bilibili.com/video/BV1WJ411T7YQ",target:"_blank",rel:"noopener noreferrer"},h={href:"https://gameprogrammingpatterns.com/",target:"_blank",rel:"noopener noreferrer"};function y(w,f){const c=t("RouteLink"),e=t("ExternalLinkIcon");return l(),i("div",null,[d,s("p",null,[n("关于服务和服务定位器的概念，可以查看"),a(c,{to:"/GameCodeDesign/DesignPattern.html#%E6%9C%8D%E5%8A%A1%E5%AE%9A%E4%BD%8D%E5%99%A8"},{default:u(()=>[n("“设计模式-服务定位器”章节")]),_:1}),n("。")]),k,s("p",null,[n("具体的代码可以在"),s("a",m,[n("MyTDS-MyServices.cs"),a(e)]),n("和"),s("a",v,[n("MyTDS-Services"),a(e)]),n("找到。")]),b,s("ul",null,[s("li",null,[n("视频的4p:"),s("a",g,[n("第三部分:Unity技能系统"),a(e)])]),s("li",null,[s("a",h,[n("《Game Programming Patterns》"),a(e)])])])])}const S=o(r,[["render",y],["__file","ResourceSystem.html.vue"]]),R=JSON.parse('{"path":"/GameCodeDesign/ResourceSystem.html","title":"资源系统和服务","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"资源系统","slug":"资源系统","link":"#资源系统","children":[{"level":3,"title":"以Resources Api的封装为例","slug":"以resources-api的封装为例","link":"#以resources-api的封装为例","children":[]}]},{"level":2,"title":"服务和服务定位器","slug":"服务和服务定位器","link":"#服务和服务定位器","children":[{"level":3,"title":"以TestDatabase为例","slug":"以testdatabase为例","link":"#以testdatabase为例","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1707819000000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":1}]},"readingTime":{"minutes":2.31,"words":694},"filePathRelative":"GameCodeDesign/ResourceSystem.md","localizedDate":"February 13, 2024"}');export{S as comp,R as data};

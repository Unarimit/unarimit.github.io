import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as u,a as n,b as a,d as s,w as i,e}from"./app-BX3Xhc_b.js";const r={},d=n("h1",{id:"使用xlua",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用xlua"},[n("span",null,"使用XLua")])],-1),k=n("blockquote",null,[n("p",null,"XLua为Unity、.Net、Mono等C#环境增加Lua脚本编程的能力，借助xLua，这些Lua代码可以方便的和C#相互调用。")],-1),m=n("p",null,"为了了解XLua的使用方式，首先要看XLua仓库下的的Demos，里面详细的介绍了在unity中常见的调用方式和热补丁等特性的配置方式。",-1),h={href:"https://github.com/Tencent/xLua/blob/master/Assets/XLua/Examples/04_LuaObjectOrented/InvokeLua.cs",target:"_blank",rel:"noopener noreferrer"},v=e(`<h2 id="本地lua逻辑" tabindex="-1"><a class="header-anchor" href="#本地lua逻辑"><span>本地Lua逻辑</span></a></h2><blockquote><p>相对热更新而言的，直接在本地载入txt写的lua文件<code>TextAsset</code>。</p></blockquote><p>通过<code>TestAsset</code>表示Lua脚本，<code>luaEnv.DoString</code>方法执行lua脚本。</p><p>以下是一个通过lua脚本配置游戏数据的例子</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">luaLogicInject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name"><span class="token keyword">var</span></span> luaEnv <span class="token operator">=</span> MyServices<span class="token punctuation">.</span>LuaEnv<span class="token punctuation">;</span> <span class="token comment">// 获取全局的lua环境，充分利用空间</span>
	<span class="token comment">// 为每个脚本设置一个独立的环境，可一定程度上防止脚本间全局变量、函数冲突</span>
	<span class="token class-name"><span class="token keyword">var</span></span> scriptEnv <span class="token operator">=</span> luaEnv<span class="token punctuation">.</span><span class="token function">NewTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">LuaTable</span> meta <span class="token operator">=</span> luaEnv<span class="token punctuation">.</span><span class="token function">NewTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	meta<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;__index&quot;</span><span class="token punctuation">,</span> luaEnv<span class="token punctuation">.</span>Global<span class="token punctuation">)</span><span class="token punctuation">;</span>
	scriptEnv<span class="token punctuation">.</span><span class="token function">SetMetaTable</span><span class="token punctuation">(</span>meta<span class="token punctuation">)</span><span class="token punctuation">;</span>
	meta<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// add injections</span>
	scriptEnv<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;self&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	scriptEnv<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;_database&quot;</span><span class="token punctuation">,</span> MyServices<span class="token punctuation">.</span>Database<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// do Lua logic</span>
	luaEnv<span class="token punctuation">.</span><span class="token function">DoString</span><span class="token punctuation">(</span>luaScript<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&quot;StartupLua&quot;</span><span class="token punctuation">,</span> scriptEnv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="热更新lua逻辑" tabindex="-1"><a class="header-anchor" href="#热更新lua逻辑"><span>热更新Lua逻辑</span></a></h2><p>需要利用AssetBundle和相应策略，暂时搁置一下。</p><p>WIP</p><h2 id="配置-luacallcsharp-、-csharpcalllua-等特性" tabindex="-1"><a class="header-anchor" href="#配置-luacallcsharp-、-csharpcalllua-等特性"><span>配置<code>[LuaCallCSharp]</code>、<code>[CSharpCallLua]</code>等特性</span></a></h2><ul><li><code>[LuaCallCSharp]</code>特性用于加速lua调用C#（不然就使用反射）</li><li><code>[CSharpCallLua]</code>特性用于适配委托（delegate，Action，Func，event）或把一个lua table适配到一个C# interface。 <ul><li>有时也不一定需要配置，“如果不确定，可以等报错的时候再加入配置”。</li></ul></li></ul>`,10),b={href:"https://github.com/Tencent/xLua/blob/master/Assets/XLua/Doc/configure.md",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/Tencent/xLua/blob/master/Assets/XLua/Examples/ExampleGenConfig.cs",target:"_blank",rel:"noopener noreferrer"},E=e(`<h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><h3 id="注意lua编译c-泛型容器的方式" tabindex="-1"><a class="header-anchor" href="#注意lua编译c-泛型容器的方式"><span>注意Lua编译C#泛型容器的方式</span></a></h3><p>对于数组，不能使用<code>ipair</code>，因为lua默认数组是从1开始计数的，会出问题。只能使用for i的方式，如下所示：</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span>Count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span> <span class="token comment">-- list是C#的List类型</span>
    <span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">..</span> list<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而对于字典，则可以使用<code>pair</code>遍历，但随机访问却无法按照常理进行，需要使用<code>get_Item</code>和<code>set_Item</code>的方式：</p>`,5),_={href:"https://github.com/Tencent/xLua/blob/master/Assets/XLua/Doc/faq.md#thisstring-field%E6%88%96%E8%80%85thisobject-field%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8lua%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E6%AF%94%E5%A6%82dictionarystring-xxx-dictionaryobject-xxx%E5%9C%A8lua%E4%B8%AD%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87dicabc%E6%88%96%E8%80%85dicabc%E6%A3%80%E7%B4%A2%E5%80%BC",target:"_blank",rel:"noopener noreferrer"},L=n("h3",{id:"注意cs下的类型名称",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#注意cs下的类型名称"},[n("span",null,"注意CS下的类型名称")])],-1),g={href:"https://github.com/Tencent/xLua/tree/master/Assets/XLua/Examples/03_UIEvent",target:"_blank",rel:"noopener noreferrer"},x=e(`<div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;lua start...&quot;</span><span class="token punctuation">)</span>

	self<span class="token punctuation">:</span><span class="token function">GetComponent</span><span class="token punctuation">(</span><span class="token string">&quot;Button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onClick<span class="token punctuation">:</span><span class="token function">AddListener</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;clicked, you input is &#39;&quot;</span> <span class="token operator">..</span>input<span class="token punctuation">:</span><span class="token function">GetComponent</span><span class="token punctuation">(</span><span class="token string">&quot;InputField&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text <span class="token operator">..</span><span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它通过<code>input:GetComponent(&quot;InputField&quot;).text</code>获取了输入框文本，这里如果写错<code>&quot;InputField&quot;</code>或<code>text</code>(相对来说容易写错的地方)，如果不到执行的时候将得不到任何提示。除此之外也要明确的区分<code>:</code>和<code>.</code>。</p><blockquote><p>了解这一点之后，应该避免在lua中写过于复杂的逻辑，每次写功能也要全面测试，覆盖所有的代码块。</p></blockquote><blockquote><p>有一些辅助工具（如<code>EmmyLua</code>和它的子组件<code>EmmyLuaUnity</code>）可以通过注释提供Unity API的代码补全，具有一定的提示作用，但其作用仍是有限的。</p></blockquote><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,5),C={href:"https://github.com/Tencent/xLua",target:"_blank",rel:"noopener noreferrer"},A={href:"https://blog.csdn.net/ak47007tiger/article/details/127940571",target:"_blank",rel:"noopener noreferrer"},q={href:"https://marketplace.visualstudio.com/items?itemName=CppCXY.emmylua-unity",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.cnblogs.com/iwiniwin/p/15307368.html",target:"_blank",rel:"noopener noreferrer"};function B(w,S){const l=o("RouteLink"),t=o("ExternalLinkIcon");return p(),u("div",null,[d,k,n("p",null,[a("安装方式见"),s(l,{to:"/Lua/#%E4%BD%BF%E7%94%A8lua%E5%81%9A%E7%83%AD%E6%9B%B4%E6%96%B0%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C"},{default:i(()=>[a("索引页")]),_:1})]),m,n("blockquote",null,[n("p",null,[a("实际应用中发现lua中的基于表的继承之类的并不重要，反正也不能继承C#的类（但可以"),n("a",h,[a("实现接口"),s(t)]),a("），为什么要写那么复杂的对象关系呢？")])]),v,n("p",null,[a("还有其他特性去看文档吧："),n("a",b,[a("(必看)XLua的配置：介绍如何配置xLua。- Github Official"),s(t)])]),n("p",null,[a("一种推荐的配置方式示例："),n("a",f,[a("XLua ExampleGenConfig.cs - Github Official"),s(t)])]),E,n("p",null,[a("详见"),n("a",_,[a("XLua FAQ - Dictionary访问问题 - Github Official"),s(t)])]),L,n("p",null,[a("在"),n("a",g,[a("demo3"),s(t)]),a("中，通过lua控制button的点击逻辑，代码如下：")]),x,n("ul",null,[n("li",null,[n("a",C,[a("XLua - Github Official"),s(t)])]),n("li",null,[n("a",A,[a("给XLua生成Unity Api的EmmyLua代码提示 - CSDN"),s(t)])]),n("li",null,[n("a",q,[a("EmmyLuaUnity - visualstudio market"),s(t)])]),n("li",null,[n("a",y,[a("深入xLua实现原理之Lua如何调用C#"),s(t)])])])])}const T=c(r,[["render",B],["__file","UseXLua.html.vue"]]),I=JSON.parse('{"path":"/Lua/UseXLua.html","title":"使用XLua","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"本地Lua逻辑","slug":"本地lua逻辑","link":"#本地lua逻辑","children":[]},{"level":2,"title":"热更新Lua逻辑","slug":"热更新lua逻辑","link":"#热更新lua逻辑","children":[]},{"level":2,"title":"配置[LuaCallCSharp]、[CSharpCallLua]等特性","slug":"配置-luacallcsharp-、-csharpcalllua-等特性","link":"#配置-luacallcsharp-、-csharpcalllua-等特性","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[{"level":3,"title":"注意Lua编译C#泛型容器的方式","slug":"注意lua编译c-泛型容器的方式","link":"#注意lua编译c-泛型容器的方式","children":[]},{"level":3,"title":"注意CS下的类型名称","slug":"注意cs下的类型名称","link":"#注意cs下的类型名称","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1710220521000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":3}]},"readingTime":{"minutes":3.12,"words":936},"filePathRelative":"Lua/UseXLua.md","localizedDate":"February 13, 2024"}');export{T as comp,I as data};

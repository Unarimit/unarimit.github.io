import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as t,c as p,a as n,b as c,d as o,e as l}from"./app-BX3Xhc_b.js";const i={},u=l(`<h1 id="lua中的面向对象" tabindex="-1"><a class="header-anchor" href="#lua中的面向对象"><span>lua中的面向对象</span></a></h1><p>一些面向对象的设计，可以通过 <code>表</code> 这一Lua专有特殊的结构实现。但由于这些实现不由语言本身指导，最好不要没事在lua中搞OOP。</p><blockquote><p>就像《C++ Primer》一书中说: &quot;尽量使用智能指针（而非指针），尽量不要做强制转换（尤其是 <code>reinterpreter_cast</code> 和c风格强转）&quot;，但总归有一些使用场景得使用指针和强制转换。</p></blockquote><p>lua的设计模式就不太支持OO（面向对象），光是想实现“实例化”这一功能，就得利用元表和<code>__index</code>。即便如此，也可以参考“基于原型的语言”在lua中模拟类。</p><blockquote><p>《Lua程序设计》书中，只提到可以实现类的继承和私有（他甚至不敢说是封装），对于多态概念，代码层面实现多态很简单（毕竟大家都是表，什么方法不能调，还有 <code>print</code> 和 <code>__tostring()</code> 这一例子），但却难以规范，不像c++和c#可以通过类型（抽象类、接口）和类型转换来规范。</p></blockquote><details class="hint-container details"><summary>gpt带你咬文嚼字：</summary><p>Q：《Lua程序设计》书中提到“可以使用lua实现类的继承和私有”，他为什么不说是“封装”而说是“私有”呢？这两个概念有什么区别？</p><p>A：在《Lua程序设计》中提到“可以使用Lua实现类的继承和私有”，在这里使用“私有”而不是“封装”可能是因为在Lua中并没有像其他面向对象编程语言一样提供内置的私有访问控制。在传统的面向对象编程语言中，私有性是通过访问修饰符（如private）来实现的，以确保某些属性或方法只能在类的内部访问。</p><p>在Lua中，面向对象编程通常是通过元表和闭包等特性来实现的，这意味着可以模拟出类似于私有成员的概念，但实际上这些成员并不是真正的私有。因此，作者在书中可能选择使用“私有”而不是“封装”，以强调在Lua中模拟私有性的方式，而不是传统意义上的封装。</p><p>封装是面向对象编程中的一个概念，指的是将数据和操作数据的方法捆绑在一起以确保数据的安全性和一致性。封装提供了对对象的访问控制，可以通过公共接口暴露必要的操作，同时隐藏内部实现的细节。在传统的面向对象编程语言中，封装往往与私有性紧密相关，而访问控制使用访问修饰符（public、private、protected）来实现。</p><p>因此，虽然在Lua中无法像传统面向对象编程语言一样提供真正的私有访问控制，但可以通过一些技巧来模拟类似的效果，这可能是为什么在书中作者选择使用“私有”而不是“封装”的原因。</p></details><p>本文接下来会仿照《Lua程序设计》介绍lua语言如何：</p><ul><li>实现类</li><li>实现类的继承</li><li>实现类成员的私有</li></ul><p>并使用银行账户这一背景，和 <code>Account</code> 类，来写示例代码</p><h2 id="实现类" tabindex="-1"><a class="header-anchor" href="#实现类"><span>实现类</span></a></h2><p>类可以解释为“数据方法集合的定义”和“实例化”两个功能，我们可以通过元表和表方法定义（冒号运算符<code>:</code>）实现。</p><p>例如我们定义一个类 <code>Account</code> ，并实现 <code>deposit</code> 方法。</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token comment">-- 定义 Account “类”</span>
Account <span class="token operator">=</span> <span class="token punctuation">{</span>balance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> Account<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span>
    o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self
    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>
    <span class="token keyword">return</span> o
<span class="token keyword">end</span>

<span class="token keyword">function</span> Account<span class="token punctuation">:</span><span class="token function">deposit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>balance <span class="token operator">=</span> self<span class="token punctuation">.</span>balance <span class="token operator">+</span> v <span class="token comment">-- 若self中没有索引，则self会产生索引</span>
<span class="token keyword">end</span>

<span class="token comment">-- 操作</span>
acc1 <span class="token operator">=</span> Account<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
acc1<span class="token punctuation">:</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">-- 这时acc有了自己的key，而不再利用元表的key</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现类的继承" tabindex="-1"><a class="header-anchor" href="#实现类的继承"><span>实现类的继承</span></a></h2><p>使用元表的 <code>__index</code> 来模拟继承，<code>__index</code>可以是一个被继承的表，构成一个简单的单继承实现。<code>__index</code>可以是一个方法，可以在里面具体控制索引<code>key</code>不在时按什么顺序查找哪些类，构成一个多继承的实现。</p><p>例如，我们可以创建一个基类 <code>Account</code>，然后派生出子类 <code>SuperAccount</code>：</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token comment">-- 定义 Account “类”</span>
Account <span class="token operator">=</span> <span class="token punctuation">{</span>balance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> Account<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span>
    o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self <span class="token comment">-- 若要实现多继承，则考虑将__index改为一个函数而非一个表</span>
    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>
    <span class="token keyword">return</span> o
<span class="token keyword">end</span>

<span class="token keyword">function</span> Account<span class="token punctuation">:</span><span class="token function">deposit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>balance <span class="token operator">=</span> self<span class="token punctuation">.</span>balance <span class="token operator">+</span> v
<span class="token keyword">end</span>

<span class="token comment">-- 定义 SuperAccount “子类”</span>
SuperAccount <span class="token operator">=</span> Account<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> SuperAccount<span class="token punctuation">:</span><span class="token function">deposit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>balance <span class="token operator">=</span> self<span class="token punctuation">.</span>balance <span class="token operator">+</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> 
<span class="token keyword">end</span>

<span class="token comment">-- 操作</span>
<span class="token keyword">local</span> sa <span class="token operator">=</span> SuperAccount<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 实例化SuperAccount</span>
<span class="token function">print</span><span class="token punctuation">(</span>sa<span class="token punctuation">.</span>balance<span class="token punctuation">)</span> <span class="token comment">-- 0，是元表的元表（Account）中的0</span>
sa<span class="token punctuation">:</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>sa<span class="token punctuation">.</span>balance<span class="token punctuation">)</span> <span class="token comment">-- 100，是SuperAccount中的100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SuperAccount</code> 的特点是存款（<code>deposit</code>）会变为两倍！</p><h2 id="实现成员的私有" tabindex="-1"><a class="header-anchor" href="#实现成员的私有"><span>实现成员的私有</span></a></h2><p>可以利用闭包或“对偶表示（dual representation）”实现类的私有</p><p>以闭包的方式实现:</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token comment">-- 定义 Account “类”</span>
<span class="token keyword">function</span> <span class="token function">newAccount</span> <span class="token punctuation">(</span>initBalance<span class="token punctuation">)</span>
    <span class="token keyword">local</span> self <span class="token operator">=</span> <span class="token punctuation">{</span>balance <span class="token operator">=</span> initBalance<span class="token punctuation">}</span>
    <span class="token keyword">local</span> deposit <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> self<span class="token punctuation">.</span>balance <span class="token operator">+</span> v
    <span class="token keyword">end</span>
    <span class="token keyword">local</span> getBalance <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>balance
    <span class="token keyword">end</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>
        deposit <span class="token operator">=</span> deposit<span class="token punctuation">,</span>
        getBalance <span class="token operator">=</span> getBalance
    <span class="token punctuation">}</span> 
<span class="token keyword">end</span>

<span class="token comment">-- 操作</span>
<span class="token keyword">local</span> acc <span class="token operator">=</span> <span class="token function">newAccount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>acc<span class="token punctuation">:</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对偶表示的方式实现：</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token comment">-- 定义 Account “类”</span>
Account <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">local</span> balance <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">-- 注意看，这个表叫做小帅，他是实现对偶表示的关键</span>

<span class="token keyword">function</span> Account<span class="token punctuation">:</span><span class="token function">new</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span>
    o <span class="token operator">=</span> o <span class="token keyword">or</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self
    <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>
    balance<span class="token punctuation">[</span>o<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">return</span> o
<span class="token keyword">end</span>

<span class="token keyword">function</span> Account<span class="token punctuation">:</span><span class="token function">deposit</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    balance<span class="token punctuation">[</span>self<span class="token punctuation">]</span> <span class="token operator">=</span> balance<span class="token punctuation">[</span>self<span class="token punctuation">]</span> <span class="token operator">+</span> v
<span class="token keyword">end</span>

<span class="token keyword">function</span> Account<span class="token punctuation">:</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> balance<span class="token punctuation">[</span>self<span class="token punctuation">]</span>
<span class="token keyword">end</span>

<span class="token comment">-- 操作</span>
<span class="token keyword">local</span> acc <span class="token operator">=</span> Account<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
acc<span class="token punctuation">:</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>acc<span class="token punctuation">:</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出对偶表示实现，代码结构更优雅一点，不用把成员函数作为闭包都写到一个函数中的了，但无论哪种方式都产生了额外的资源开销。</p><blockquote><p>对于对偶实现中的 <code>balance</code> ，它可能永远也不会被垃圾回收，这在一些场景中可能会有问题。解决方案是将 <code>balance</code> 设为弱引用键的表（将元字段<code>__mode</code>设为<code>k</code>）</p></blockquote><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,27),d={href:"https://www.lua.org/pil/",target:"_blank",rel:"noopener noreferrer"},r=n("ul",null,[n("li",null,"20章，元表和元方法"),n("li",null,"21章，面向对象编程")],-1);function k(v,m){const s=e("ExternalLinkIcon");return t(),p("div",null,[u,n("ul",null,[n("li",null,[n("a",d,[c("Lua程序设计 第四版 - Roberto"),o(s)]),r])])])}const w=a(i,[["render",k],["__file","OOPInLua.html.vue"]]),h=JSON.parse('{"path":"/Lua/OOPInLua.html","title":"lua中的面向对象","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"实现类","slug":"实现类","link":"#实现类","children":[]},{"level":2,"title":"实现类的继承","slug":"实现类的继承","link":"#实现类的继承","children":[]},{"level":2,"title":"实现成员的私有","slug":"实现成员的私有","link":"#实现成员的私有","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1714394241000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":5}]},"readingTime":{"minutes":4.95,"words":1484},"filePathRelative":"Lua/OOPInLua.md","localizedDate":"February 13, 2024"}');export{w as comp,h as data};

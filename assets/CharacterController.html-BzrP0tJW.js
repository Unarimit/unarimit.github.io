import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as p,c as i,a as n,b as a,d as t,w as r,e}from"./app-BX3Xhc_b.js";const u="/assets/characterController-1-gGQR3Fch.png",d={},k=e('<img src="'+u+'"><h1 id="角色控制" tabindex="-1"><a class="header-anchor" href="#角色控制"><span>角色控制</span></a></h1><p>角色控制即把玩家的输入转化为角色的动作响应。可能需要考虑：</p><ul><li>角色动画（Animator）和效果控制</li><li>动作和实际坐标变化之间的协调</li><li>输入和当前角色行为冲突和优先级</li><li>和场景的互动（拾取，脚印等）</li><li>角色死亡和重生</li><li>镜头控制（Cinemachine）</li><li>。。。</li></ul><p>实现一个简单的角色控制并不难，很多复杂的地方都可以使用工具完成（如跳跃时的坐标变换可以用DOTween），但实现过程中不断地维护可能出现各种各样的问题，所以需要一定的设计模式。</p><h2 id="运用设计模式" tabindex="-1"><a class="header-anchor" href="#运用设计模式"><span>运用设计模式</span></a></h2>',6),m=e(`<p>这样做的好处是，方便做网络同步以及解耦动作和控制代码。</p><p>理想的角色控制类可能是:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>inpunt<span class="token punctuation">.</span>jump<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">canJumm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            CurrentAction <span class="token operator">=</span> ActionsSet<span class="token punctuation">[</span>Jump<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>move<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">canMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            CurrentAction <span class="token operator">=</span> ActionsSet<span class="token punctuation">[</span>Move<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// else if...</span>

    CurrentAction<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在其中完成动画和游戏逻辑</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="charactercontroller" tabindex="-1"><a class="header-anchor" href="#charactercontroller"><span>CharacterController</span></a></h2><p>unity提供的简单控制角色的方法，属于物理系统的一部分，有：</p><ul><li>Move函数</li><li>胶囊碰撞箱（不受物理系统影响，但空间不够会过不去）</li></ul><blockquote><p>另外他的碰撞检测好像不受与他碰撞的物体的rigidbody中检测方式的影响，一直是离散检测。在做射击检测时发现这个问题。</p></blockquote><h2 id="网络传输延迟处理和命令模式" tabindex="-1"><a class="header-anchor" href="#网络传输延迟处理和命令模式"><span>网络传输延迟处理和命令模式</span></a></h2><p>这是一个比较难的点 WIP</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,10),h={href:"https://docs.unity3d.com/cn/current/Manual/character-control-section.html",target:"_blank",rel:"noopener noreferrer"};function v(b,f){const o=s("RouteLink"),c=s("ExternalLinkIcon");return p(),i("div",null,[k,n("p",null,[a("可以使用"),t(o,{to:"/GameCodeDesign/DesignPattern.html#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F"},{default:r(()=>[a("命令模式")]),_:1}),a("，将玩家输入放入实例化的命令中响应玩家的行为。")]),m,n("ul",null,[n("li",null,[n("a",h,[a("Character Control - Unity Doc"),t(c)])])])])}const g=l(d,[["render",v],["__file","CharacterController.html.vue"]]),y=JSON.parse('{"path":"/UnityComponent/CharacterController.html","title":"角色控制","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"运用设计模式","slug":"运用设计模式","link":"#运用设计模式","children":[]},{"level":2,"title":"CharacterController","slug":"charactercontroller","link":"#charactercontroller","children":[]},{"level":2,"title":"网络传输延迟处理和命令模式","slug":"网络传输延迟处理和命令模式","link":"#网络传输延迟处理和命令模式","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1707819000000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":1}]},"readingTime":{"minutes":1.39,"words":416},"filePathRelative":"UnityComponent/CharacterController.md","localizedDate":"February 13, 2024"}');export{g as comp,y as data};

import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as n,b as a,d as p,e as l}from"./app-BX3Xhc_b.js";const i="/assets/rasterization-0-CAlmtiD4.png",u="/assets/rasterization-3-DFb5N_T_.png",r="/assets/rasterization-1-BezYXJrj.png",k="/assets/rasterization-2-D5QBAg_4.png",d={},m=l('<h1 id="光栅化-rasterization" tabindex="-1"><a class="header-anchor" href="#光栅化-rasterization"><span>光栅化 Rasterization</span></a></h1><img src="'+i+'"><p>光栅化指将图形对象转换为图像的过程，一个狭义点的例子是在屏幕坐标上根据信息绘制三角形。</p><p>是将模型映射到屏幕上的过程之一</p><blockquote><p>坐标变换 -&gt; (三角面)顶点映射 -&gt; 光栅化</p></blockquote><p>图：光栅化之前的步骤</p><img width="500" src="'+u+`"><h2 id="光栅化的过程和问题" tabindex="-1"><a class="header-anchor" href="#光栅化的过程和问题"><span>光栅化的过程和问题</span></a></h2><p>光栅化是将图形对象（映射到视锥体空间的三角面[1]和渲染参数）在屏幕空间采样[2]。其主要问题是如何处理离散采样发生的Aliasing[3]和如何正确的绘制三角面的遮挡关系[4]。</p><ol><li>为什么是三角形？</li></ol><blockquote><p>（1）可以方便的表示几何图形。（2）可以方便判断内外关系（通过向量的叉积判断一个点是否在三角形内，要叉积三次）。（3）三个不同颜色的点可以插值出过渡颜色。（4）三角形是最简单的多边形。（5）三角形必然是平坦的且经过多种变换后仍是三角形</p></blockquote><ol start="2"><li>采样 <ul><li>从如16*9的连续空间映射到如1920*1080的屏幕空间(离散空间)</li><li>确定每个栅格（像素）的颜色</li></ul></li></ol><p>代码：一种简单的采样过程</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">fresh_screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max_y<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            screen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sample</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 采样像素对应的中心点</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Aliasing（走样，锯齿） <ul><li>摩尔纹，边缘锯齿</li><li>原理涉及数字图像处理（信号处理），关键词：混叠</li><li>Anti-Aliasing（反走样，抗锯齿），是一个信号处理问题 <ul><li>简单的出发点：先对原象进行“模糊”，再光栅化。（模糊这一过程很困难，根据如何定义采样点的模糊值，延伸出了不同的方法）</li><li>MSAA（Multi Sample Anti-Aliasing）：靠模糊解决走样问题，计算量增加k倍，k为每个像素计算模糊的采样次数（没有考虑可复用的采样点）（注：GAMES101的描述和《游戏引擎架构（第2版）》书中有冲突的地方，后者认为MSAA不计算样本的着色，而依靠样本的深度测试的结果加权计算像素颜色，而将FSAA（full-screen antialiasing）作为GAMES101描述的MSAA情况，即上文所描述的）</li><li>FXAA（Fast Approximate AA）：基于后处理的AA，检测边缘，替换成平滑的边缘</li><li>TAA（Temporal AA）：保留上一帧的值，使其参与这一帧的采样。计算量⬇ 空间占用⬆，对于快速运动需要特殊处理</li></ul></li></ul><blockquote><p>顺便一提 Aliasing 也有&quot;别名&quot;的意思，如<code>int &amp;r = a</code>，就可以说<code>r</code>是<code>a</code>的 Aliasing（别名）。 代码：一种 MSAA 2*2 的计算方法</p></blockquote></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">fresh_screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max_y<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            screen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sample</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">0.25</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
            screen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">sample</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">0.75</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
            screen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">sample</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">0.25</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
            screen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">sample</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">0.75</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>遮挡关系 <ul><li>考虑“画家算法”（按照三角面中心的深度渲染），但因为可能存在特殊的遮挡关系，故只能从每个像素的深度下手</li><li>依赖于图形对象的深度参数生成<code>Z-Buffer</code>，和采样的颜色值同步生成，下方有代码样例。</li><li>延伸：<code>Z-Test</code>，<code>Z-Fighting</code></li></ul></li></ol><p>图：一种特殊的遮挡关系</p><img src="`+r+'"><p>图：<code>Z-Buffer</code>长啥样</p><img src="'+k+`"><p>代码：一种简单的采样过程，结合<strong>逐三角面渲染</strong>和<code>Z-Buffer</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">float</span><span class="token operator">*</span><span class="token operator">*</span> z_buffer<span class="token punctuation">;</span>
color<span class="token operator">*</span><span class="token operator">*</span> screen<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">fresh_screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// ... 别问我triangles怎么来的</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>tri <span class="token operator">:</span> triangles<span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 因为没有设置包围盒，所以每次遍历整个屏幕</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> max_y<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">auto</span> depth <span class="token operator">=</span> <span class="token function">get_depth</span><span class="token punctuation">(</span>tri<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>depth <span class="token operator">&lt;</span> z_buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    screen<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sample</span><span class="token punctuation">(</span>tri<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 采样像素对应的中心点</span>
                    z_buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> depth<span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token comment">// do nothing</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,24),v={href:"https://www.bilibili.com/video/BV1X7411F744?p=5",target:"_blank",rel:"noopener noreferrer"},b={href:"https://book.douban.com/subject/34864920/",target:"_blank",rel:"noopener noreferrer"},f=n("ul",null,[n("li",null,"10.2 抗锯齿")],-1);function _(h,g){const s=e("ExternalLinkIcon");return o(),c("div",null,[m,n("ul",null,[n("li",null,[n("a",v,[a("GAMES101-闫令琪-Rasterization Bilibili"),p(s)])]),n("li",null,[n("a",b,[a("游戏引擎架构（第2版）- 【美】Jason Gregory"),p(s)]),f])])])}const w=t(d,[["render",_],["__file","Rasterization.html.vue"]]),y=JSON.parse('{"path":"/ComputerGraphics/Rasterization.html","title":"光栅化 Rasterization","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"光栅化的过程和问题","slug":"光栅化的过程和问题","link":"#光栅化的过程和问题","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1708010941000,"updatedTime":1711279899000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":4}]},"readingTime":{"minutes":3.36,"words":1009},"filePathRelative":"ComputerGraphics/Rasterization.md","localizedDate":"February 15, 2024"}');export{w as comp,y as data};

import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as u,c as r,a as n,b as s,d as a,w as t,e as o}from"./app-BX3Xhc_b.js";const d="/assets/uisystem-1-TSqKFGYG.jpg",k="/assets/uisystem-2-BwipTptB.png",m="/assets/uisystem-5-BhSJmSuk.png",h="/assets/uisystem-3-L_uCh1Jj.png",g="/assets/uisystem-4-B66LW9cY.png",I={},U=n("img",{src:d},null,-1),_=n("h1",{id:"ui系统",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ui系统"},[n("span",null,"UI系统")])],-1),v=n("p",null,"UI系统的设计需要考虑下列因素：",-1),b=n("li",null,"基础元素配置统一（如字体，大小，颜色等）",-1),f=n("li",null,"层级控制（ESC和UI栈）",-1),w=n("li",null,"本地化（可以结合第一点一起做）",-1),y=n("li",null,"动画和对生命周期的影响",-1),M=n("li",null,"特殊行为：元素拖拽移动（背包系统）",-1),C=n("li",null,"等等",-1),S=n("p",null,"那么一个简单的UI系统的结构可能是这样的：",-1),x={href:"https://assetstore.unity.com/packages/2d/gui/shift-complete-sci-fi-ui-157943",target:"_blank",rel:"noopener noreferrer"},P=o('<img src="'+k+'"><p>关于层级控制，还有一点要补充：有些UI功能可能会允许多个窗口交互，或是点击底层UI会关闭顶层UI，这在mmorpg中比较常见：</p><ul><li>对于多个窗口交互（例如把物品从背包拖到仓库）</li><li>对于不同层次UI的管理，可以简单粗暴的捕获raycast处理，也可以记录事件状态做额外的交互（如果不想设置额外的事件响应，就要为UI设计统一的管理类，可以参考GameFramework等框架的实现）。</li></ul><h2 id="uiconfig-全局配置" tabindex="-1"><a class="header-anchor" href="#uiconfig-全局配置"><span>UIConfig-全局配置</span></a></h2><p>全局配置的存在主要是为了减少一些组件可能的反复修改，以及约束开发时使用统一的配置。</p><p>这里主要介绍<code>Shift UI</code>中的全局配置和其相关的类，从一个实际例子出发了解全局配置的重要性。在<code>Shift UI</code>的Demo Scene中，通过3个组件配置UI的显示：</p><ul><li>UIManager(Scriptable Object): 全局配置信息，主题的颜色，字体，背景，音效等。相当于上文的<code>UIConfig</code></li><li>UIManager(Component)：具体的UI组件配置信息，如文字采取主题中的哪个颜色</li><li>Main(Component)：Component显示的动画配置信息，如Button的名字，按下时的文字等。</li></ul><p>如下图所示：</p>',8),V=n("img",{width:"400",src:m},null,-1),q=n("p",null,"UIManager(Scriptable Object)",-1),G=n("img",{width:"400",src:h},null,-1),L=n("p",null,"Main(Component), Component = Button",-1),B=n("img",{width:"400",src:g},null,-1),E=n("p",null,"UIManager(Component), Component = Text",-1),H=o('<p>这些组件的存在可以使主题的变更变得很轻松，在Main(Component)中，可以方便的做本地化，不觉得这很cool吗？</p><h2 id="uimanager-分页管理和特殊功能" tabindex="-1"><a class="header-anchor" href="#uimanager-分页管理和特殊功能"><span>UIManager-分页管理和特殊功能</span></a></h2><p><code>UIManager</code>应该考虑实现以下功能</p><ul><li><strong>分页管理</strong>：如果场景涉及多个独立的UI页面（如抽卡和角色配置页面）应该使用状态机做分页管理，可以通过方便的注册UI层，使转换变得更简单并复用一些逻辑。</li><li><strong>特殊功能</strong>：对于像是“暂时隐藏UI（不涉及生命周期）”，“布局设置”这些需求，也应该从<code>UIManager</code>中出发。</li><li><strong>设计约束</strong>：<code>UIManager</code>中应该只包含涉及层级时的UI逻辑，例如开启任务菜单，打开地图等逻辑。至于层级内的UI逻辑，如查看装备属性，编辑背包物品逻辑则应该由装备UI，背包UI完成。</li></ul><h3 id="分页管理-ui状态机" tabindex="-1"><a class="header-anchor" href="#分页管理-ui状态机"><span>分页管理-UI状态机</span></a></h3><p>参考状态机的实现，实现它需要按照以下步骤：</p><ol><li>为被管理的<code>子UI</code>设计统一的接口或基类</li><li>在<code>UIManager</code>中存储<code>子UI</code></li><li>在<code>UIManager</code>中公开切换UI方法</li></ol><h3 id="其他功能-wip" tabindex="-1"><a class="header-anchor" href="#其他功能-wip"><span>其他功能-WIP</span></a></h3><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子</span></a></h3>',9),T={href:"https://github.com/Unarimit/my-topdown-shooting-game/blob/dev/Assets/Scripts/HomeLogic/UILogic/UIManager.cs",target:"_blank",rel:"noopener noreferrer"},D=o(`<p>他的核心代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 简化过的代码</span>
<span class="token keyword">internal</span> <span class="token keyword">enum</span> <span class="token class-name">HomePage</span>
<span class="token punctuation">{</span>
    Nothing<span class="token punctuation">,</span>MainView<span class="token punctuation">,</span>TopView<span class="token punctuation">,</span> <span class="token comment">//...</span>
<span class="token punctuation">}</span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">UIManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UIManager</span> Instance<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">HomePage</span> CurHomePage <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>HomePage<span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span>ISwitchUI<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> switchUIs<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 注册单例和UI状态，如：</span>
        switchUIs<span class="token punctuation">[</span>HomePage<span class="token punctuation">.</span>CoreView<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>m_canvas<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;GachaPanel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GachaPanelUI<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        switchUIs<span class="token punctuation">[</span>HomePage<span class="token punctuation">.</span>MainView<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>m_canvas<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;OverlayPanel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OverlayPanelUI<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SwitchPage</span><span class="token punctuation">(</span><span class="token class-name">HomePage</span> page<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 页面切换逻辑</span>
        <span class="token comment">// 如：背景相机过渡</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据交互" tabindex="-1"><a class="header-anchor" href="#数据交互"><span>数据交互</span></a></h2><p>可以借鉴MVVM(Model, View, ViewModel)+数据绑定的思想实现，即一个ViewModel类对应一个UI，当其中的数据发生变化时，UI也会变化。数据绑定可以通过Model类的OOP设计+C# event实现。</p><blockquote><p>这个ViewModel类我会放在一个<code>context</code>类里面，<code>context</code>类还定义了一组当前场景下全局可用的方法。</p></blockquote><p>当然，可以用方便的单例模式实现数据交互，但一堆单例会带来代码上的高耦合，不利于后续维护。</p><blockquote><p>具体而言，一个数据存储结构修改后（从List改为Dictionary）依赖他的所有逻辑都需要修改。这也是MVC、MVVM之类设计模式存在的原因。</p></blockquote><h3 id="由ui直接修改-读取model产生的问题" tabindex="-1"><a class="header-anchor" href="#由ui直接修改-读取model产生的问题"><span>由UI直接修改，读取Model产生的问题</span></a></h3><blockquote><p>一个角色有一把枪，UI为了显示枪械状态，要从枪Model获取数据</p></blockquote><ul><li>造成Model逻辑和UI逻辑的耦合</li><li>Model使用事件做数据绑定，也会产生延迟加载导致UI事件绑定失效</li></ul><p>但像是仓库，背包系统逻辑和UI紧密的功能使用UI直接控制Model是没有问题的。</p><h3 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1"><span>例子</span></a></h3><p>WIP</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,14),W={href:"https://assetstore.unity.com/packages/2d/gui/shift-complete-sci-fi-ui-157943",target:"_blank",rel:"noopener noreferrer"},A=n("li",null,[n("p",null,"某网课比较基础的实现")],-1),N=o('<details class="hint-container details"><summary>达内Unity培训课：</summary><p>核心类</p><ol><li>Ul 窗口类 UIWindow <ul><li>所有 UI 窗口的基类，用于以层次化的方式管理具体窗口类。</li><li>定义所有窗口共有行为(显隐、获取事件监听器)。</li></ul></li><li>UI 管理类 UIManager <ul><li>管理(记录、禁用、查找)所有窗口。</li></ul></li><li>UI 事件监听器 UIEventListener <ul><li>提供当前 UI 所有事件(具有事件参数类)。</li></ul></li></ol><p>使用方式</p><ol><li>定义 UIXXXWindow 类，继承自 UIWindow，负责处理该窗口逻辑。</li><li>通过窗口基类的 GetUIEventListener 方法获取需要交瓦的 UI 元素事件监听器。</li><li>通过事件监听器 UIEventListener 提供的各种事件，实现交互行为。</li><li>通过 UIManager 访问各个窗口成员。 <ul><li><code>UIManagerInstance.GetWindow&lt;窗口类型&gt;().成员</code>:</li></ul></li></ol></details>',1),O={href:"https://www.netsolutions.com/insights/software-design-pattern/",target:"_blank",rel:"noopener noreferrer"};function F(j,J){const c=i("RouteLink"),e=i("ExternalLinkIcon"),l=i("center");return u(),r("div",null,[U,_,v,n("ul",null,[b,f,w,y,n("li",null,[s("优化：动静分离（详见"),a(c,{to:"/UnityComponent/UGUI.html#canvas-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB"},{default:t(()=>[s("UGUI部分")]),_:1}),s("）")]),M,C]),S,n("blockquote",null,[n("p",null,[s("可以参考如"),n("a",x,[s("shift UI"),a(e)]),s("之类的UI实现。")])]),P,a(l,null,{default:t(()=>[V,q]),_:1}),a(l,null,{default:t(()=>[G,L]),_:1}),a(l,null,{default:t(()=>[B,E]),_:1}),H,n("p",null,[s("在"),n("a",T,[s("My-TDS中的Home场景的UI管理"),a(e)]),s("中，在UIManager中做了分页管理，和UI栈的功能。")]),D,n("ul",null,[n("li",null,[n("p",null,[n("a",W,[s("SHFIT UI - Unity Asset"),a(e)])])]),A]),N,n("ul",null,[n("li",null,[s("头图："),n("a",O,[s("What’s a Design Pattern in Software Engineering? - Netsolutions"),a(e)])])])])}const Y=p(I,[["render",F],["__file","UISystem.html.vue"]]),z=JSON.parse('{"path":"/GameCodeDesign/UISystem.html","title":"UI系统","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"UIConfig-全局配置","slug":"uiconfig-全局配置","link":"#uiconfig-全局配置","children":[]},{"level":2,"title":"UIManager-分页管理和特殊功能","slug":"uimanager-分页管理和特殊功能","link":"#uimanager-分页管理和特殊功能","children":[{"level":3,"title":"分页管理-UI状态机","slug":"分页管理-ui状态机","link":"#分页管理-ui状态机","children":[]},{"level":3,"title":"其他功能-WIP","slug":"其他功能-wip","link":"#其他功能-wip","children":[]},{"level":3,"title":"例子","slug":"例子","link":"#例子","children":[]}]},{"level":2,"title":"数据交互","slug":"数据交互","link":"#数据交互","children":[{"level":3,"title":"由UI直接修改，读取Model产生的问题","slug":"由ui直接修改-读取model产生的问题","link":"#由ui直接修改-读取model产生的问题","children":[]},{"level":3,"title":"例子","slug":"例子-1","link":"#例子-1","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1708334479000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":2}]},"readingTime":{"minutes":4.89,"words":1466},"filePathRelative":"GameCodeDesign/UISystem.md","localizedDate":"February 13, 2024"}');export{Y as comp,z as data};

import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as u,c as r,a as n,b as s,d as a,w as t,e as p}from"./app-BX3Xhc_b.js";const k="/assets/abilitySystem-0-DaV4Uv3c.png",d="/assets/abilitySystem-1-C_oJBkei.jpg",m="/assets/abilitySystem-2-CuGqGzlV.png",v="/assets/abilitySystem-3-BVbbSIc3.png",b="/assets/abilitySystem-4-Dg_QaF9O.png",g="/assets/abilitySystem-5-wT8tJwzz.png",h="/assets/abilitySystem-6-C5XHsKL6.gif",_="/assets/abilitySystem-7-CwMJdH40.png",f={},y=p('<img src="'+k+'"><h1 id="技能系统" tabindex="-1"><a class="header-anchor" href="#技能系统"><span>技能系统</span></a></h1><p>技能系统的目的是为了减少后续开发难度，和<strong>热更新</strong>的可能，采用数据驱动方法设计，再结合外部代码更新方案。要求在一开始时就考虑到各种效果的表现方式。并使用继承、封装等编程思想建立统一标准。</p><h2 id="如何设计技能系统" tabindex="-1"><a class="header-anchor" href="#如何设计技能系统"><span>如何设计技能系统</span></a></h2><p>统计所有技能的需求，把其中技能与技能之间不同的逻辑抽离出来。</p><ul><li>技能的释放方式可能不同，包括原地释放、抛射释放、从天而降释放等，可以抽离出来设计</li><li>技能产生的影响可能不同，包括眩晕、减速、减防等，可以抽离出来设计</li><li>技能肯定都有释放者、冷却、造成伤害，这部分就可以统一设计</li></ul><p>对于被抽离出来的类，通过继承关系，写到基础的技能类里面，方便调用。</p><p>另外还可以配合外部代码设计自由度更高的技能，同样依赖对逻辑的抽离。为了提高鲁棒性，还应该提供外部代码专用的接口，而不是从为游戏物体添加脚本开始。</p><blockquote><p>参考设计模式中的 &#39;字节码模式&#39; 和本文详细案例中最后一小节。</p></blockquote><div class="hint-container tip"><p class="hint-container-title">需要注意的是：</p><p>没有什么设计模式是可以一劳永逸的，都要随着需求变更不断迭代。利用设计模式的意义在于提供一定的可拓展性；并且重复的逻辑不需再写，减少了出现bug的可能性。</p></div><h2 id="详细案例" tabindex="-1"><a class="header-anchor" href="#详细案例"><span>详细案例</span></a></h2><p>本小节将描述一个技能系统的迭代过程，从一个技能一个类，到数据驱动设计，再到有条理的数据驱动设计，最后结合热更新提供对特定逻辑的支持。</p><h3 id="先介绍一个错误实现的例子" tabindex="-1"><a class="header-anchor" href="#先介绍一个错误实现的例子"><span>先介绍一个错误实现的例子</span></a></h3>',13),S=n("strong",null,"投掷手雷",-1),w=n("strong",null,"发射激光",-1),C={href:"https://github.com/Unarimit/my-topdown-shooting-game/tree/e250ab2cdbcd69eb90f07269da4d92570c8065d1/Assets/Scripts/CombatLogic",target:"_blank",rel:"noopener noreferrer"},R=n("img",{src:d},null,-1),x=p('<p>这里将技能释放分为三个步骤</p><ol><li>实例化技能 <ul><li>根据按键不同实例化不同的技能prefab</li><li>这里省略了表示技能属性（伤害，延时，取对象）的类，采用随用随new的设计模式（</li></ul></li><li>放入检查列表</li><li>在游戏系统中触发技能的后续效果 <ul><li>投掷物爆炸效果、伤害计算等</li></ul></li></ol><p>这样一个技能系统，显然是不合理的。</p><ol><li>每加一个技能，就要加一个类， 每改动一个实现方式，就要改技能类里的代码。</li><li>不同的技能要添加不同的控制类。 <ul><li>因为每个技能的逻辑不一样，特效也不一样。</li></ul></li><li>要在角色控制类中修改对应的释放技能。</li><li>...</li></ol><p>当然这里的触发延时逻辑的接口化还是不错的。</p><br><h3 id="更好的实现-技能系统雏形" tabindex="-1"><a class="header-anchor" href="#更好的实现-技能系统雏形"><span>更好的实现-技能系统雏形</span></a></h3><p>我们可以使用数据驱动设计的思想，通过数据调用写好的逻辑。</p><p>先看看方案比较吧：</p><table><thead><tr><th>上文方法</th><th>这个方法</th></tr></thead><tbody><tr><td>每加一个技能，就要加一个控制类。😡</td><td>每加一个技能，添加一段json。😁</td></tr><tr><td>技能的控制类之间差异很大，不便维护。😡</td><td>共用一个控制类。😁</td></tr><tr><td>要在角色控制类中修改对应的释放技能。😡</td><td>不需关注角色控制类。😁</td></tr><tr><td>不管什么需求都添加类。</td><td>需求超出一开始的预期需要改技能系统。😨</td></tr></tbody></table><p>然后再来着手设计方案：</p><ol><li>设计技能类（纯数据类）</li><li>新建ScriptableObject存储技能类 <ul><li>“添加一段json”是一种形容添加简单的形容词</li></ul></li><li>给角色绑定指定下标的技能</li><li>设计释放器 <ul><li>释放器按照技能类的指导来释放</li></ul></li></ol>',12),E={href:"https://github.com/Unarimit/my-topdown-shooting-game/tree/25ddf6847c97e6af37b52c625af3415f8f33a9d2/Assets/Scripts/CombatLogic",target:"_blank",rel:"noopener noreferrer"},L=n("img",{src:m},null,-1),D=n("p",null,[s("然后"),n("strong",null,"投掷手雷"),s("就变成了"),n("code",null,"技能1：抛出一个圆球Prefab，持续时间3秒"),s(" + "),n("code",null,"技能2：爆炸造成范围伤害"),s("的组合。"),n("strong",null,"发射激光"),s("则变成了"),n("code",null,"技能0：射出一个圆球Prefab并造成伤害"),s("。")],-1),O=n("img",{src:v},null,-1),G=n("p",null,[n("strong",null,"但是，他现在的可玩性也很低，因为只能在投、抛、检测并伤害中组合。")],-1),T=n("p",null,[s("这时候就需要在技能控制器中引入"),n("code",null,"Buffs"),s("或更多效果类型，增加组合种类。")],-1),U=n("ul",null,[n("li",null,"如眩晕，中毒，回血等效果，甚至可以做一个闪现技能，因为技能控制器中有释放者的Transform！"),n("li",null,"这时候利用lua等热更新技术，可以方便的完善技能的多样性。")],-1),I=n("h3",{id:"更好的实现-释放、选择、影响",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#更好的实现-释放、选择、影响"},[n("span",null,"更好的实现-释放、选择、影响")])],-1),j={href:"https://github.com/Unarimit/my-topdown-shooting-game/tree/6b7f94746778638dcb6b510d402f715ba4ab42d5/Assets/Scripts/CombatLogic/Skill",target:"_blank",rel:"noopener noreferrer"},A=n("img",{src:b},null,-1),M=p("<ul><li>技能管理器<code>SkillManager</code>调用<code>CastSkill</code>时，会初始化技能释放器<code>Releaser</code>，并将技能信息传递给<code>Releaser</code>。</li><li><code>Releaser</code>根据技能信息，使用<strong>反射</strong>生成对应的选择器<code>Selector</code>和影响器<code>Impactor</code>，并将信息传入。</li><li><code>Selector</code>根据算法选择到目标后，调用<code>List&lt;Impactor&gt;</code>的<code>Impact</code></li><li><code>Impactor</code>对目标造成影响，如伤害，减速，生命恢复等。</li></ul><p>这样一来，添加技能的方式就变为：</p><ol><li>如果现有的<code>Releaser</code>、<code>Selector</code>和<code>Impactor</code>能组合出技能，就通过配置表组合。</li><li>如果不能，完成<code>Releaser</code>、<code>Selector</code>和<code>Impactor</code>中的一个或多个，满足1的条件后，通过配置表组合。</li></ol><p>相比上一个实现方式，这种实现方式减少了“超出预期需要改技能系统”时的复杂度，并且耦合性更低了。</p><blockquote><p>但考虑到有些技能逻辑特殊到不需要复用，这样实现就有些太复杂了，可以考虑“可编程技能系统的实现”，将会在<code>更好的实现-配合热更新</code>中介绍。</p></blockquote><p>最后还可以通过csv文件+<code>Editor Menu</code>脚本的方式完成配置表的搭建，配置表如下图所示：</p>",6),B=n("img",{src:g},null,-1),P=n("code",null,"Editor Menu",-1),q={href:"https://github.com/Unarimit/my-topdown-shooting-game/blob/6b7f94746778638dcb6b510d402f715ba4ab42d5/Assets/Scripts/Editor/GenerateSkillInfoByCsvFile.cs",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"更好的实现1",-1),F=n("code",null,"ScriptableObject",-1),V=n("p",null,"在这个方案中，将技能的释放过程拆解为三个部分（释放、选择目标、影响目标）带来的好处如下：",-1),X=n("ul",null,[n("li",null,"方便进行排列组合"),n("li",null,"可以根据各个部分组合生成技能描述，非常便利")],-1),N=n("h3",{id:"更好的实现-配合热更新",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#更好的实现-配合热更新"},[n("span",null,"更好的实现-配合热更新")])],-1),W=n("p",null,[s("将技能的释放过程拆解为三个部分后，我们可以任意组合它们，丰富技能逻辑的数量。但对于一些特定的需求（比如我希望有一个投掷物画一个五角星，对投掷物的轨迹上的敌人造成伤害）却不能通过数据配置，而且专门为它设计一个"),n("code",null,"Selector"),s("类好像也不太值当（因为重用的可能不高，还得重新编译），所以我们可以尝试配合热更新，用"),n("strong",null,"外部代码"),s("实现。")],-1),J=n("code",null,"XLua",-1),H=n("a",{href:"../GameBuild/Mod&Hotfix"},"热更新方案",-1),K=p('<p>为了使用外部代码表示技能过程，参考上文中<code>Releaser</code>、<code>Selector</code>和<code>Impactor</code>的设计，且考虑到仍可以利用其中的组件达到重用代码的效果，我们从上述的三个部分出发，考虑以下做法：</p><ul><li>设计外部代码专用的<code>Selector</code>，通过委托调用外部代码</li><li>使用外部代码实现<code>Impactor</code>的接口（方法的集合），传递给特定的<code>Releaser</code><ul><li><code>Selector</code>也可以用上述方式实现，只不过<code>Selector</code>可能会使用碰撞器，就代表要继承MonoBehaviour，情况会复杂很多（例如<code>XLua</code>就不支持继承类）</li></ul></li></ul><p>下面是一个例子：“画一个五角星，对轨迹上的敌人造成伤害”，效果如下：</p><img src="'+h+`"><p>使用XLua实现，代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// C#通过外部代码初始化选择器</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 利用碰撞箱的选择器，用lua指定轨迹</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">LuaTriggerSelector</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span><span class="token punctuation">,</span> <span class="token class-name">ISelector</span></span>
<span class="token punctuation">{</span>
    <span class="token class-name">List<span class="token punctuation">&lt;</span>IImpactor<span class="token punctuation">&gt;</span></span> _impactors<span class="token punctuation">;</span>
    <span class="token class-name">CombatSkill</span> _skill<span class="token punctuation">;</span>
    <span class="token class-name">Action<span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">,</span> Transform<span class="token punctuation">,</span> Vector3<span class="token punctuation">&gt;</span></span> action<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>IImpactor<span class="token punctuation">&gt;</span></span> impectors<span class="token punctuation">,</span> <span class="token class-name">Transform</span> caster<span class="token punctuation">,</span> <span class="token class-name">CombatSkill</span> skill<span class="token punctuation">,</span> <span class="token class-name">Vector3</span> aim<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _impactors <span class="token operator">=</span> impectors<span class="token punctuation">;</span>
        _skill <span class="token operator">=</span> skill<span class="token punctuation">;</span>
        action <span class="token operator">=</span>  MyServices<span class="token punctuation">.</span>LuaEnv<span class="token punctuation">.</span>Global<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetInPath</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Action<span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">,</span> Transform<span class="token punctuation">,</span> Vector3<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>skill<span class="token punctuation">.</span>SkillSelector<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">action</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">,</span> caster<span class="token punctuation">,</span> aim<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 省略了通过\`OnTriggerEnter\`造成\`Impact\`的函数</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTriggerEnter</span><span class="token punctuation">(</span><span class="token class-name">Collider</span> collision<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token comment">-- lua执行技能的选择逻辑，是在游戏开始时载入的</span>
LuaTestSkill <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>go<span class="token punctuation">,</span> caster_trans<span class="token punctuation">,</span> aim_pos<span class="token punctuation">)</span>
    <span class="token keyword">local</span> comp <span class="token operator">=</span> go<span class="token punctuation">:</span><span class="token function">GetComponent</span><span class="token punctuation">(</span><span class="token string">&quot;LuaTriggerSelector&quot;</span><span class="token punctuation">)</span> <span class="token comment">-- 应该传进来的，懒得改了</span>
    <span class="token keyword">local</span> size <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token keyword">local</span> points <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">-- 五角星的五个点</span>
    <span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>
        <span class="token keyword">local</span> angle <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">72</span> <span class="token operator">*</span> CS<span class="token punctuation">.</span>UnityEngine<span class="token punctuation">.</span>Mathf<span class="token punctuation">.</span>Deg2Rad<span class="token punctuation">;</span>
        <span class="token keyword">local</span> x <span class="token operator">=</span> aim_pos<span class="token punctuation">.</span>x <span class="token operator">+</span> size <span class="token operator">*</span> CS<span class="token punctuation">.</span>UnityEngine<span class="token punctuation">.</span>Mathf<span class="token punctuation">.</span><span class="token function">Cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">local</span> z <span class="token operator">=</span> aim_pos<span class="token punctuation">.</span>z <span class="token operator">+</span> size <span class="token operator">*</span> CS<span class="token punctuation">.</span>UnityEngine<span class="token punctuation">.</span>Mathf<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        points<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> CS<span class="token punctuation">.</span>UnityEngine<span class="token punctuation">.</span><span class="token function">Vector3</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> aim_pos<span class="token punctuation">.</span>y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>
    <span class="token keyword">end</span>
    go<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">local</span> step <span class="token operator">=</span> <span class="token number">0.2</span>
    <span class="token keyword">local</span> util <span class="token operator">=</span> require <span class="token string">&#39;xlua.util&#39;</span>
    comp<span class="token punctuation">:</span><span class="token function">StartCoroutine</span><span class="token punctuation">(</span>
        util<span class="token punctuation">.</span><span class="token function">cs_generator</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
            coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>CS<span class="token punctuation">.</span>UnityEngine<span class="token punctuation">.</span><span class="token function">WaitForSeconds</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 强行前摇</span>
            go<span class="token punctuation">:</span><span class="token function">GetComponent</span><span class="token punctuation">(</span><span class="token string">&#39;Collider&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>
            CS<span class="token punctuation">.</span>DG<span class="token punctuation">.</span>Tweening<span class="token punctuation">.</span>ShortcutExtensions<span class="token punctuation">.</span><span class="token function">DOMove</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>transform<span class="token punctuation">,</span> points<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
            coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>CS<span class="token punctuation">.</span>UnityEngine<span class="token punctuation">.</span><span class="token function">WaitForSeconds</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span>
            CS<span class="token punctuation">.</span>DG<span class="token punctuation">.</span>Tweening<span class="token punctuation">.</span>ShortcutExtensions<span class="token punctuation">.</span><span class="token function">DOMove</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>transform<span class="token punctuation">,</span> points<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
            coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>CS<span class="token punctuation">.</span>UnityEngine<span class="token punctuation">.</span><span class="token function">WaitForSeconds</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span>
            CS<span class="token punctuation">.</span>DG<span class="token punctuation">.</span>Tweening<span class="token punctuation">.</span>ShortcutExtensions<span class="token punctuation">.</span><span class="token function">DOMove</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>transform<span class="token punctuation">,</span> points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
            coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>CS<span class="token punctuation">.</span>UnityEngine<span class="token punctuation">.</span><span class="token function">WaitForSeconds</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span>
            CS<span class="token punctuation">.</span>DG<span class="token punctuation">.</span>Tweening<span class="token punctuation">.</span>ShortcutExtensions<span class="token punctuation">.</span><span class="token function">DOMove</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>transform<span class="token punctuation">,</span> points<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
            coroutine<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span>CS<span class="token punctuation">.</span>UnityEngine<span class="token punctuation">.</span><span class="token function">WaitForSeconds</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">)</span>
            CS<span class="token punctuation">.</span>DG<span class="token punctuation">.</span>Tweening<span class="token punctuation">.</span>ShortcutExtensions<span class="token punctuation">.</span><span class="token function">DOMove</span><span class="token punctuation">(</span>go<span class="token punctuation">.</span>transform<span class="token punctuation">,</span> points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),Q={href:"https://github.com/Unarimit/my-topdown-shooting-game/blob/dev-with-xlua/Assets/Scripts/StartLogic/StartSceneStartup.cs",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/Unarimit/my-topdown-shooting-game/blob/dev-with-xlua/Assets/Scripts/CombatLogic/Skill/Selector/LuaTriggerSelector.cs",target:"_blank",rel:"noopener noreferrer"},Z=n("h3",{id:"优化-使用对象池",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#优化-使用对象池"},[n("span",null,"优化-使用对象池")])],-1),$=n("p",null,"在“更好的实现-释放、选择、影响”中，我们使用技能需要频繁的使用反射去构造选择器和释放器，这不好，而且如果我们的技能是一种射击出的子弹（频繁创建和销毁），那使用反射就更成问题啦。",-1),nn=p("<ul><li>对象池管理的关键在于合理的“释放”逻辑 <ul><li>将对象的状态重置的和新创建的一样，但又保留了需要大量时间初始化的内容（如反射初始化的子类型）</li></ul></li><li>正确的将对象分类 <ul><li>例如可以根据技能类型不同划分不同的对象池</li></ul></li><li>释放需要调用对象池的方法（<code>ObjectPool&lt;T&gt;.Release()</code>），不要直接<code>Destroy</code>哦</li><li>不要忘记更新应该更新的属性</li></ul><p>于是现在我们的 <code>SkillManager</code> 类除了负责释放技能外，还负责“销毁”技能</p>",2),sn=n("br",null,null,-1),an=n("img",{width:"300",src:_},null,-1),tn=n("br",null,null,-1),en=p(`<p>我认为其中的<code>getXXXReleaser</code>和<code>FinalizerSkill</code>是比较重要的，放一下代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>CombatSkill<span class="token punctuation">,</span> ObjectPool<span class="token punctuation">&lt;</span>RangeReleaser<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> rangeReleaserPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span>CombatSkill<span class="token punctuation">,</span> ObjectPool<span class="token punctuation">&lt;</span>RangeReleaser<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FinalizerSkill</span><span class="token punctuation">(</span><span class="token class-name">BaseReleaser</span> releaser<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>releaser <span class="token keyword">is</span> <span class="token class-name">MeleeReleaser</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 。。。没必要看的逻辑</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>releaser <span class="token keyword">is</span> <span class="token class-name">RangeReleaser</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rangeReleaserPool<span class="token punctuation">[</span>releaser<span class="token punctuation">.</span>Skill<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span>releaser <span class="token keyword">as</span> <span class="token class-name">RangeReleaser</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token return-type class-name">RangeReleaser</span> <span class="token function">getRangeReleaser</span><span class="token punctuation">(</span><span class="token class-name">CombatSkill</span> skill<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rangeReleaserPool<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>skill<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token class-name">false</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        rangeReleaserPool<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>skill<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ObjectPool<span class="token punctuation">&lt;</span>RangeReleaser<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token comment">// createfunc</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> prefab <span class="token operator">=</span> ResourceManager<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Load</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Skills/&quot;</span> <span class="token operator">+</span> skill<span class="token punctuation">.</span>PrefabResourceUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> skillGo <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>prefab<span class="token punctuation">,</span> _context<span class="token punctuation">.</span>Enviorment<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> skillGo<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RangeReleaser<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>range<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token comment">// actionOnGet</span>
                <span class="token punctuation">{</span>
                    range<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>range<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token comment">// actionOnRelease</span>
                <span class="token punctuation">{</span>
                    range<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">SetActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>range<span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token comment">// actionOnDestroy</span>
                <span class="token punctuation">{</span>
                    <span class="token function">Destroy</span><span class="token punctuation">(</span>range<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rangeReleaserPool<span class="token punctuation">[</span>skill<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然还有一些关键的复位（Reset）逻辑在 <code>Releaser</code> 中，可以自行去代码仓库查看哦，这里附上当时增加这段逻辑的commit们，按时间从早到晚排序。</p>`,3),on={href:"https://github.com/Unarimit/my-topdown-shooting-game/commit/4c195637e06f67a70387efff12c28eafe17e9c11",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://github.com/Unarimit/my-topdown-shooting-game/commit/79d240f3d031e0892dc5aec22f126cd2b1f944f2",target:"_blank",rel:"noopener noreferrer"},cn=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结"},[n("span",null,"总结")])],-1),ln=n("p",null,"以上，文章所描述的技能系统的设计就先到此为止了，这里留下了一个问题：怎样设计出具有可拓展性和鲁棒性的技能系统呢？如果考虑热更新又如何？",-1),un=n("blockquote",null,[n("p",null,"我认为可以参考一些steam workshop中物品比较多的游戏MOD的设计，如环世界-Rimworld（利用文本配置和c#编译的dll），群星-Stellaris（利用文本配置和lua），暗黑地牢（利用文本配置）；还有一些steam之外的，如我的世界（利用jar包）和远行星号-StarSector（利用jar包）等。")],-1),rn=n("blockquote",null,[n("p",null,"像是mmorpg，手游等依赖热更新的场景，可选方案可能就比较有限。")],-1),kn=n("h2",{id:"参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考"},[n("span",null,"参考")])],-1),dn={href:"https://www.reddit.com/r/DotA2/comments/mvd6v9/new_collage_with_all_ability_icons_in_dota2_check/",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://www.bilibili.com/video/BV1WJ411T7YQ",target:"_blank",rel:"noopener noreferrer"},vn={href:"https://zhuanlan.zhihu.com/p/92651085",target:"_blank",rel:"noopener noreferrer"};function bn(gn,hn){const c=l("RouteLink"),e=l("ExternalLinkIcon"),o=l("center");return u(),r("div",null,[y,n("p",null,[s("在我的"),a(c,{to:"/Projects/TopShooting.html"},{default:t(()=>[s("上帝视角射击游戏")]),_:1}),s("里，我的一个拥有两个技能的角色是这样设置技能触发机制的：")]),n("p",null,[s("哦，对了，两个技能分别是："),S,s("和"),w,s("，顺便附上"),n("a",C,[s("当时的代码目录 - github"),a(e)])]),a(o,null,{default:t(()=>[R]),_:1}),a(o,null,{default:t(()=>[s("其中上面那条绿线的目的地标错了，不要介意")]),_:1}),x,n("p",null,[s("通过一番折腾，设计出了如下图所示的技能系统（当然技能的属性还不是很全，很多东西都没考虑到）。顺便附上"),n("a",E,[s("当时的代码目录 - github"),a(e)])]),a(o,null,{default:t(()=>[L]),_:1}),a(o,null,{default:t(()=>[s("看不清楚可以右键图片在新标签页中打开哦")]),_:1}),D,a(o,null,{default:t(()=>[O]),_:1}),a(o,null,{default:t(()=>[s("对技能的配置")]),_:1}),G,T,U,I,n("p",null,[s("承接上文，为了避免在“投、抛、检测并伤害”上完善新方式的时候重复修改类型内的代码，将技能的释放过程拆解为三个部分（释放、选择目标、影响目标），解耦控制。下图是我按照上述方法拆解后的调用关系。（附上"),n("a",j,[s("当时的代码目录"),a(e)]),s("）")]),a(o,null,{default:t(()=>[A]),_:1}),M,a(o,null,{default:t(()=>[B]),_:1}),n("p",null,[P,s("脚本的代码："),n("a",q,[s("GenerateSkillInfoByCsvFile.cs"),a(e)]),s("，它的功能为将csv配置表转化为"),z,s("中的"),F,s("。")]),V,X,N,W,n("blockquote",null,[n("p",null,[s("类似设计模式中的字节码模式，当然我们不可能自己搓一个虚拟机，这里使用一种热更新方案-"),J,s("实现（点击查看我总结的关于"),H,s("和"),a(c,{to:"/Lua/UseXLua.html"},{default:t(()=>[s("XLua")]),_:1}),s("的介绍）。")])]),K,n("ul",null,[n("li",null,[n("a",Q,[s("lua载入代码,xlua"),a(e)])]),n("li",null,[s("完整的"),n("a",Y,[s("LuaTriggerSelector.cs"),a(e)])])]),Z,$,n("p",null,[s("这时候不难想起我们的"),a(c,{to:"/GameCodeDesign/DesignPattern.html#%E4%BC%98%E5%8C%96%E5%9E%8B%E6%A8%A1%E5%BC%8F"},{default:t(()=>[s("优化型模式之对象池")]),_:1}),s("，而且unity也定义了一些api方便我们开发，先列出一些注意事项吧：")]),nn,a(o,null,{default:t(()=>[sn,an,tn,s("黄线为新增加的成员 ")]),_:1}),en,n("ul",null,[n("li",null,[n("a",on,[s("[Game logic] change skill pass param logic - github commit"),a(e)])]),n("li",null,[n("a",pn,[s("[Game logic] add ObjectPool in skill system - github commit"),a(e)])])]),cn,ln,un,rn,kn,n("ul",null,[n("li",null,[s("头图："),n("a",dn,[s("New collage with ALL ability icons in Dota2. - Reddit"),a(e)])]),n("li",null,[n("a",mn,[s("第三部分:Unity技能系统 - Bilibili"),a(e)])]),n("li",null,[n("a",vn,[s("实现高扩展性的通用游戏技能系统 flashyiyi - 知乎"),a(e)])])])])}const yn=i(f,[["render",bn],["__file","AbilitySystem.html.vue"]]),Sn=JSON.parse('{"path":"/GameCodeDesign/AbilitySystem.html","title":"技能系统","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"如何设计技能系统","slug":"如何设计技能系统","link":"#如何设计技能系统","children":[]},{"level":2,"title":"详细案例","slug":"详细案例","link":"#详细案例","children":[{"level":3,"title":"先介绍一个错误实现的例子","slug":"先介绍一个错误实现的例子","link":"#先介绍一个错误实现的例子","children":[]},{"level":3,"title":"更好的实现-技能系统雏形","slug":"更好的实现-技能系统雏形","link":"#更好的实现-技能系统雏形","children":[]},{"level":3,"title":"更好的实现-释放、选择、影响","slug":"更好的实现-释放、选择、影响","link":"#更好的实现-释放、选择、影响","children":[]},{"level":3,"title":"更好的实现-配合热更新","slug":"更好的实现-配合热更新","link":"#更好的实现-配合热更新","children":[]},{"level":3,"title":"优化-使用对象池","slug":"优化-使用对象池","link":"#优化-使用对象池","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1708860579000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":3}]},"readingTime":{"minutes":10.83,"words":3250},"filePathRelative":"GameCodeDesign/AbilitySystem.md","localizedDate":"February 13, 2024"}');export{yn as comp,Sn as data};

import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as u,a as n,b as s,d as a,w as o,e as t}from"./app-BX3Xhc_b.js";const d={},r=n("h1",{id:"游戏中的-设计模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#游戏中的-设计模式"},[n("span",null,"(游戏中的)设计模式")])],-1),k=n("p",null,"Unity引擎本身就包含了大量的设计模式，例如MonoBehavior就应用了更新模式，使开发者不必再自发的“保护UI线程”等。",-1),m={href:"https://gameprogrammingpatterns.com/",target:"_blank",rel:"noopener noreferrer"},v=t(`<p><strong>*注：下文在引用这本书时，会简写为<code>GPP</code>。</strong></p><blockquote><p>无论何时，都应采取相对简单点的方案。软件工程的大部分工作都是在和复杂性做对抗。</p></blockquote><h2 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式"><span>命令模式</span></a></h2><p>用于实现战棋游戏的悔棋和editor的撤回操作，封装后更容易实现网络同步。</p><p><code>GPP</code>中还提到了可以用作：</p><ul><li>按键映射的中间处理</li><li>抽离控制逻辑和角色行为逻辑</li></ul><p>但我认为unity中的inputsystem已经完成了按键映射，而角色行为逻辑的抽离由于玩家使用控制器移动和Agent使用NavMesh移动的方式差距过大，实现存在一定难度。</p><h2 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式"><span>观察者模式</span></a></h2><p>它还有一些其他名字：“响应式编程”和“数据流编程”</p><p>在Unity（C#）中，主要以事件的形式体现，即<code>delegate</code>和<code>event</code>，还有unity自己封装的<code>UnityEvent</code>。一般用于UI更新通知，和成就系统等。</p><blockquote><p>采用观察者模式的主要原因是解耦两个不相关的模块，如果使用观察者模式反而阻碍了对游戏逻辑的理解，则不需要使用</p></blockquote><div class="hint-container tip"><p class="hint-container-title">注意</p><p>采用事件模式编程时，及时注销事件。CLR中，绑定(<code>+=</code>)事件的对象不会被垃圾回收。</p></div><h3 id="实现ui更新-观察者模式" tabindex="-1"><a class="header-anchor" href="#实现ui更新-观察者模式"><span>实现UI更新-观察者模式</span></a></h3><p>在这个例子中，<code>Foo.cs</code>是被观察者，而<code>xxUI.cs</code>是观察者。<code>Foo.cs</code>通过<code>CheckAim()</code>通知UI要更新了，而不用UI在每一帧自行去观察Foo.cs来更新UI。</p><p>Foo.cs</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">AimChangeEventHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">AimChangeEventHandler</span> AimChangeEvent<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CheckAim</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> key<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    AimChangeEvent<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token function">generateText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>xxUI.cs</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Foo<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>AimChangeEvent <span class="token operator">+=</span> ChangeText<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ChangeText</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    MainText<span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Foo<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>AimChangeEvent <span class="token operator">-=</span> ChangeText<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原型模式" tabindex="-1"><a class="header-anchor" href="#原型模式"><span>原型模式</span></a></h2><p>像是unity里的Prefab，一种批量生成实例的思想。</p><p>如常用的敌人物体，一定会包括<code>NavMesh Agent</code>,<code>Animator</code>和一些自定义的Component，就可以把物体打包为prefab，并由某个静态方法去初始化这个敌人物体。</p><p>如弹出UI框的设计（一个简单的例子），只需要一段string就可以创建这个实例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 弹出UI框的例子</span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">TipsUI</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">TextMeshProUGUI</span> Text<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GenerateNewTips</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> prefab <span class="token operator">=</span> ResourceManager<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Load</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;UIs/Tip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> go <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>prefab<span class="token punctuation">)</span><span class="token punctuation">;</span>
        go<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TipsUI<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Text<span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> cg <span class="token operator">=</span> <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CanvasGroup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cg<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        cg<span class="token punctuation">.</span><span class="token function">DOFade</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 渐入动画</span>
        <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">,</span> <span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 持续1.5秒后销毁</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h2><p>单例模式在unity开发中很常用，但需要加以限制。</p><blockquote><p>例如你可能不想在一堆游戏逻辑中看到一句<code>AudioSource.PlayClipAtPoint(...)</code> // 这会造成业务的耦合，不过这里更多的是对业务的封装问题，会导致无法对声音播放流程做控制。</p></blockquote><p>避免使用单例模式的原因是为了降低耦合，因为单例模式属于全局变量，全局变量可能因为某个模块<strong>逻辑错误</strong>或<strong>并发</strong>顺序异常产生错误修改，而引起其他模块异常，且很难debug。当然对于一些游戏的Context不可避免的使用全局变量。<code>GPP</code>提供了几种避免使用单例模式的策略：</p><ul><li>使用依赖注入（对于需要引用实例的场合通过传参的方式）</li><li>一部分管理类（Manager or System or ...）可以被优化，由被管理的类本身实现这些逻辑（OOP）</li><li>服务定位模式...</li></ul><p>Unity的<code>TowerDefence</code>模板是这样实现单例模式的：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// Singleton class</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Type of the singleton<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Singleton<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Singleton<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// The static reference to the instance</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> instance <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">protected</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Gets whether an instance of this singleton exists</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> instanceExists
    <span class="token punctuation">{</span>
        <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Awake method to associate singleton with instance</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceExists<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// OnDestroy method to clear singleton association</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="双缓存模式" tabindex="-1"><a class="header-anchor" href="#双缓存模式"><span>双缓存模式</span></a></h2><p>双缓存模式主要用于GPU的渲染，单缓存可能会出现GPU读到脏数据的情况。</p><p>另外也可以用作帧同步（每帧的执行结果不受MonoBehavior生命周期函数执行顺序的影响），通过给每个状态设置：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    <span class="token class-name">T</span> current_state<span class="token punctuation">;</span>
    <span class="token class-name">T</span> next_state<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>的方式，在每帧中<code>current_state</code>不会被更改，<code>next_state</code>会被更改，在每帧的开始或结束（如<code>LastUpdate()</code>），交换<code>next_state</code>和<code>current_state</code>。</p><h2 id="游戏循环-更新方法" tabindex="-1"><a class="header-anchor" href="#游戏循环-更新方法"><span>游戏循环-更新方法</span></a></h2><p>Unity提供了游戏循环部分的设计，即MonoBehavior。GPP书中主要解释了使用变时步长更新机制（<code>Update()</code>）的的坏处，会使整个系统不确定，尤其是在涉及网络的时候。</p><p>Unity中<code>FixedUpdate()</code>就避免了上述问题。</p><p>对于更新方法GPP书中提到了更新方法的解耦设计，可以结合状态模式、组件模式等设计模式进行。</p><p>由于Unity已经自带了这些设计，包括组件模式，这些设计方法已经被Unity开发中被动使用，在实现上不太需要关注，但可以通过追问“为什么要这么做”，更好的认识Unity生命周期函数。</p><h2 id="字节码模式" tabindex="-1"><a class="header-anchor" href="#字节码模式"><span>字节码模式</span></a></h2><blockquote><p>“通过将行为编码成虚拟机指令，而使其具备数据的灵活性。”</p></blockquote><p>GPP书中讲述了如何实现这个模式，从语法分析到API，再到基于栈的虚拟机。~~这很像以太坊中的智能合约，~~目的都是赋予软件<strong>从程序外部编写行为</strong>的能力。</p><p>实际开发过程中使用lua等脚本语言（Unity也可以使用C#+CLR实现，有C#的热更新方案），它们会完成最为复杂的工作（语法分析和虚拟机，lua是基于寄存器的虚拟机），开发只需要关注提供什么样的api即可。</p>`,44),h=t('<h2 id="子类沙盒" tabindex="-1"><a class="header-anchor" href="#子类沙盒"><span>子类沙盒</span></a></h2><blockquote><p>GPP：“使用基类提供的操作集合来定义子类中的行为。” 基类提供子类调用的保护方法和给子类实现的虚方法。</p></blockquote><p>这种模式普遍到不需要靠语言称赞它的地步，举一个例子: <code>MonoBehaviour</code>：</p><ul><li>首先，对于子类沙盒中定义行为的概念，<code>MonoBehaviour</code>通过一系列生命周期函数，使主线程中的游戏循环调用者无需关注他的具体类型和状态。</li><li>除此之外，子类沙盒的另一个主要思想是：使用基类封装一些api函数，给子类直接调用，目的是限制子类的访问范围，如<code>MonoBehaviour</code>的<code>StartCoroutine</code>，<code>Instantiate</code>等（可以，这很沙盒）。</li></ul><p>这在游戏开发中被经常使用，例如同样存在生命周期的UI系统（基类定义子类调用的创建新层等保护方法，和给子类实现的刷新，退出行为方法）和技能系统（基类定义子类调用的粒子，音效，伤害等保护方法，和给子类实现的发射行为方法）等。</p>',5),b=t(`<h2 id="类型对象" tabindex="-1"><a class="header-anchor" href="#类型对象"><span>类型对象</span></a></h2><blockquote><p>GPP：“通过创建一个类来支持新类型的灵活创建，其每个实例都代表一个不同的对象类型。” 如创建Breed类来支持Dragon(龙)、Troll(巨魔)类型的灵活创建。完成<code>Breed dragonBreed;</code>,<code>Monster dragon = dragonBreed.newMonster();</code>的表述，这里的dragon成为了Breed类型的&quot;实例&quot;，Breed即为类型对象。</p></blockquote><p>GPP中介绍，在认为对象之后可能存在拓展情况（如增加怪物种类）的情况、或需要不修改代码增加新类型的情况下，可以使用类型对象模式。感觉和工厂模式类似。</p><p>我第一次听到这个名词是在C#使用的虚拟机<code>CLR</code>中，<code>CLR</code>在每次调用类之前，都要提前初始化他的<code>类型对象</code>，而<code>类型对象</code>中存储了成员函数的指针，静态属性等。</p><blockquote><p>这里的&#39;类型对象&#39;显然和<code>CLR</code>里的完全不同。</p></blockquote><h2 id="总结-行为模式" tabindex="-1"><a class="header-anchor" href="#总结-行为模式"><span>总结-行为模式</span></a></h2><p>GPP中，把上文的<code>字节码模式</code>，<code>子类沙盒模式</code>和<code>类型对象模式</code>称为行为模式。</p><p>这些设计模式都为代码提供了灵活性，方便之后对功能进行拓展。</p><p>WIP，需要更多实践以拓展内容</p><h2 id="组件模式" tabindex="-1"><a class="header-anchor" href="#组件模式"><span>组件模式</span></a></h2><blockquote><p>GPP：“允许一个单一的实体跨越多个不同的域而不会导致耦合。”</p></blockquote><p>Unity框架的核心<code>GameObject</code>完全围绕组件模式来设计。如同transform在继承了Monobehaviour的类中都可以访问到，开发者也可以设计类似的管理<code>GameObject</code>所有组件的类，相比直接<code>GetComponent()</code>，通过管理类应该更能明确调用关系(如下方所示的代码，通过<code>GetComponent&lt;OperatorManager&gt;().xxx</code>调用，更能看出引用关系)。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 战斗单位管理类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorManager</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">NavMeshAgent</span> Nav <span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">OperatorController</span> Controller <span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">CombatOperator</span> Model <span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理互相关联的组件逻辑" tabindex="-1"><a class="header-anchor" href="#处理互相关联的组件逻辑"><span>处理互相关联的组件逻辑</span></a></h3><blockquote><p>一个属于某个对象的组件，由于其“属于某个对象”的特点，必然会产生关联的逻辑。</p></blockquote><p>可以从以下角度解决组件之间的通讯问题：</p><ol><li>显式管理物体上挂载的组件 <ul><li>如上述<code>OperatorManager</code>中的代码。</li></ul></li><li>直接关联 <ul><li>如AI控制组件和<code>NavMeshAgent</code>，需要主动调用<code>NavMeshAgent</code>的寻路方法。但其他组件不应该调用<code>NavMeshAgent</code>的方法，<code>NavMeshAgent</code>的引用应该被AI控制组件设为私有。（<code>NavMeshAgent</code>是Unity中的AI寻路组件）</li></ul></li><li>事件广播 <ul><li>如Inputsystem的<code>PlayerInput</code>组件，会向挂载的GameObject的全部组件广播事件</li></ul></li></ol><p>一般在解决组件之间的通讯问题时，以上方法会组合使用。</p><h2 id="事件队列" tabindex="-1"><a class="header-anchor" href="#事件队列"><span>事件队列</span></a></h2><blockquote><p>GPP：“对消息或事件的发送与受理进行时间上的解耦。”</p></blockquote><p>他像是一个异步的观察者模式，如果不是在必须异步或多线程的情况下，不要使用它（实际上这个模式在游戏中也不怎么使用，他更多应用在分布式系统中）。而他的“优势区间”就是多线程和异步，如音频播放系统（多线程），动作游戏中缓存按键（异步）等。</p><h2 id="服务定位器" tabindex="-1"><a class="header-anchor" href="#服务定位器"><span>服务定位器</span></a></h2><blockquote><p>GPP：“为某服务提供一个全局访问入口来避免使用者与该服务的具体实现类之间产生耦合”</p></blockquote><p>有点像后端开发中面向接口编程的概念。他的作用一部分和单例模式很像（继承了单例模式的缺点），但他的主要目的是使服务调用者不必关心服务是如何实现的。</p>`,24),g=t('<p>另外Unity的<code>MonoBehaviour</code>也实现了一定的服务定位器功能。<code>GetComponent&lt;T&gt;</code>可以指定组件的基类泛型，实现“调用者不必关心服务是如何实现的”这一点，而且通过<code>GetComponent&lt;T&gt;</code>也解决了作用域的问题（但当有些服务全局范围普遍存在的时候，还是全局静态类实现比较好）</p><h2 id="优化型模式" tabindex="-1"><a class="header-anchor" href="#优化型模式"><span>优化型模式</span></a></h2><blockquote><p>GPP: “列举了一些经常用来优化加速游戏的几个中级模式”</p></blockquote><p>由于这些模式比较特殊，实现起来比较复杂（脏标记模式还好），故只简单提及。</p><p>这些模式有：</p>',5),y=n("li",null,[s("数据局部性 "),n("ul",null,[n("li",null,"参考Unity ECS 和 DOTS，在并行计算使用中较多，如利用Job。"),n("li",null,"一般不对整个项目使用（因为面向数据的思想和面向对象的思想冲突），而对主要产生性能问题的地方使用，还要确认性能问题是因为缓存未命中引起。")])],-1),_=n("li",null,[s("脏标记模型 "),n("ul",null,[n("li",null,"GPP文中举了父物体子物体在移动中的处理例子，会将一些计算延迟到渲染前，减少了可能的多余计算。"),n("li",null,"对于有依赖关系的属性，可以采取这种方法，实现起来并不困难。"),n("li",null,"对于缺点，GPP举了GC和GC暂停的例子，表示如果原逻辑对性能影响不明显不需要使用此模式。")])],-1),w=n("li",null,"主要用于解决内存碎片问题（如果不是对内存使用较为极端的情况应该看不出使用和不使用的区别才是）",-1),f=n("li",null,"对频繁创建销毁的物体使用（如子弹，超级仓库ui，粒子应该不用开发者操心）",-1),P={href:"https://docs.unity3d.com/ScriptReference/Pool.ObjectPool_1.html",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,"将游戏空间分成一个个小格子，减少计算遍历数量。和A*一样经典的算法，应该比A*还要常用吧。视锥体遮挡剔除、碰撞计算应该都是基于空间分区做的吧。",-1),G={href:"https://en.wikipedia.org/wiki/Grid_(spatial_index)",target:"_blank",rel:"noopener noreferrer"},C={href:"https://en.wikipedia.org/wiki/Quadtree",target:"_blank",rel:"noopener noreferrer"},A={href:"https://en.wikipedia.org/wiki/Binary_space_partitioning",target:"_blank",rel:"noopener noreferrer"},U={href:"https://en.wikipedia.org/wiki/K-d_tree",target:"_blank",rel:"noopener noreferrer"},I={href:"https://en.wikipedia.org/wiki/Bounding_volume_hierarchy",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,"GPP还对上述算法分类：“网格是连续的桶排序，二叉空间分割、k-d数，以及层次包围盒都是二叉查找树，四叉树和八叉树都是Trie树”",-1),T=t('<h2 id="不常用的模式" tabindex="-1"><a class="header-anchor" href="#不常用的模式"><span>不常用的模式</span></a></h2><p>这里列举在GPP书中见到过，但实际开发很少用的设计模式</p><ul><li>状态模式：实现方式很像命令模式，但是用来做状态机的版本，可以参考<a href="/AI/StateMachine">AI状态机的例子</a></li><li>享元模式：简而言之就是把重复使用的数据封装取引用。可能理解的难点主要在cpu和gpu的数据交换上。 <ul><li>Unity的material复用和渲染时合批使用了这种思想，可以参考unity批处理的条件。</li></ul></li></ul><h2 id="不在书中却相对常见的模式" tabindex="-1"><a class="header-anchor" href="#不在书中却相对常见的模式"><span>不在书中却相对常见的模式</span></a></h2><ul><li>工厂模式：在后端框架的各种复杂API的配置中很常见，我在AI-GOAP的行为图的构建类中也使用过该模式。</li><li>装饰者模式：在行为树中有使用过，是一种拼接代码逻辑（如图形化编程）的手段。</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',6),E=n("strong",null,"主要参考",-1),M={href:"https://gameprogrammingpatterns.com/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://zhuanlan.zhihu.com/p/158717151",target:"_blank",rel:"noopener noreferrer"};function D(O,S){const e=c("ExternalLinkIcon"),p=c("RouteLink");return i(),u("div",null,[r,k,n("p",null,[s("本章主要内容为几种设计模式的核心思想（或我认为的核心思想）和我自己的相关实现。如果想进一步了解游戏中的设计模式，请自行阅读 "),n("a",m,[s("《Game Programming Patterns》"),a(e)]),s(" 这本书，有中文翻译的纸质书在售。")]),v,n("blockquote",null,[n("p",null,[a(p,{to:"/GameCodeDesign/AbilitySystem.html"},{default:o(()=>[s("技能系统的迭代")]),_:1}),s("中就实践了基于XLua的热更新模式。")])]),h,n("p",null,[s("GPP书中就介绍了一个拥有100个超级英雄类，可以使用不同的技能的场景。并强调当子类足够多的时候，采用数据驱动的方法设计（使用数据定义行为），这也是我的项目中使用过的方式，见"),a(p,{to:"/GameCodeDesign/AbilitySystem.html#%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%AE%9E%E7%8E%B02"},{default:o(()=>[s("技能系统-更好的实现2")]),_:1}),s("。")]),b,n("p",null,[s("GPP中介绍了音频播放系统使用服务定位器的必要性，而我首先在游戏的数据存储方面使用到了他，因为游戏开发过程中需求频繁变动，真的拉一个数据库和一套资源管理系统维护起来很麻烦。于是就使用静态类充当临时数据库，详见"),a(p,{to:"/GameCodeDesign/ResourceSystem.html#%E6%9C%8D%E5%8A%A1%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%AE%9A%E4%BD%8D%E5%99%A8"},{default:o(()=>[s("资源系统和服务-服务定位器")]),_:1}),s("中的描述。")]),g,n("ul",null,[y,_,n("li",null,[s("对象池 "),n("ul",null,[w,f,n("li",null,[s("Unity有"),n("a",P,[s("对象池的API"),a(e)]),s("，可以辅助构建对象池，开发者只需要以委托的形式实现关键的逻辑。")])])]),n("li",null,[s("空间分区 "),n("ul",null,[x,n("li",null,[s("GPP中提到了几种常见结构，并说它们简单明了： "),n("ul",null,[n("li",null,[n("a",G,[s("网格-Grid(spatial_index)"),a(e)])]),n("li",null,[n("a",C,[s("四叉树"),a(e)]),s("、八叉树")]),n("li",null,[n("a",A,[s("二叉空间分割"),a(e)])]),n("li",null,[n("a",U,[s("k-dimensional数"),a(e)])]),n("li",null,[n("a",I,[s("层次包围盒"),a(e)])])])]),q])])]),T,n("ul",null,[n("li",null,[E,s("："),n("a",M,[s("《Game Programming Patterns》"),a(e)])]),n("li",null,[n("a",B,[s("《InsideUE4》GamePlay架构（十一）Subsystems - 大钊的文章 - 知乎"),a(e)])])])])}const R=l(d,[["render",D],["__file","DesignPattern.html.vue"]]),F=JSON.parse('{"path":"/GameCodeDesign/DesignPattern.html","title":"(游戏中的)设计模式","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[]},{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[{"level":3,"title":"实现UI更新-观察者模式","slug":"实现ui更新-观察者模式","link":"#实现ui更新-观察者模式","children":[]}]},{"level":2,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]},{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":2,"title":"双缓存模式","slug":"双缓存模式","link":"#双缓存模式","children":[]},{"level":2,"title":"游戏循环-更新方法","slug":"游戏循环-更新方法","link":"#游戏循环-更新方法","children":[]},{"level":2,"title":"字节码模式","slug":"字节码模式","link":"#字节码模式","children":[]},{"level":2,"title":"子类沙盒","slug":"子类沙盒","link":"#子类沙盒","children":[]},{"level":2,"title":"类型对象","slug":"类型对象","link":"#类型对象","children":[]},{"level":2,"title":"总结-行为模式","slug":"总结-行为模式","link":"#总结-行为模式","children":[]},{"level":2,"title":"组件模式","slug":"组件模式","link":"#组件模式","children":[{"level":3,"title":"处理互相关联的组件逻辑","slug":"处理互相关联的组件逻辑","link":"#处理互相关联的组件逻辑","children":[]}]},{"level":2,"title":"事件队列","slug":"事件队列","link":"#事件队列","children":[]},{"level":2,"title":"服务定位器","slug":"服务定位器","link":"#服务定位器","children":[]},{"level":2,"title":"优化型模式","slug":"优化型模式","link":"#优化型模式","children":[]},{"level":2,"title":"不常用的模式","slug":"不常用的模式","link":"#不常用的模式","children":[]},{"level":2,"title":"不在书中却相对常见的模式","slug":"不在书中却相对常见的模式","link":"#不在书中却相对常见的模式","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1708860579000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":4}]},"readingTime":{"minutes":12.98,"words":3895},"filePathRelative":"GameCodeDesign/DesignPattern.md","localizedDate":"February 13, 2024"}');export{R as comp,F as data};

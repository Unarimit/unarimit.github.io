import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as c,c as p,a as n,b as s,d as e,e as t}from"./app-BX3Xhc_b.js";const i={},u=t('<h1 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程"><span>多线程</span></a></h1><details class="hint-container details"><summary>为什么要使用多线程-gpt：</summary><p>保证在进行异步计算时不影响游戏的帧数是非常重要的，以下是几种方法可以实现这一目标：</p><ol><li><p>控制计算量：在执行异步计算的过程中，需要控制每帧执行的计算量，以确保不会超过一个帧的时间导致卡顿。可以通过在每帧中执行一部分计算任务，并在下一帧继续执行剩余的任务，以逐步完成耗时计算。</p></li><li><p>设置优先级和时间片：可以为游戏线程和计算线程设置不同的优先级，以确保游戏线程始终具有较高的优先级，并获得更多的CPU时间片。这样可以确保游戏线程在处理渲染和交互逻辑时不会受到太大的影响。</p></li><li><p>使用Unity Job System的调度器（Scheduler）：Unity Job System提供了一个调度器，可以控制并发作业的执行顺序和优先级。通过合理设置调度器的执行顺序和优先级，可以确保异步计算在不影响游戏帧数的前提下得到适当的处理时间。</p></li><li><p>实时性能监测：在开发过程中，可以使用Unity Profiler或其他性能监测工具来监测游戏的帧率、计算时间等关键指标。通过实时监测，可以发现潜在的性能问题并进行调优，以保证游戏帧数的稳定性。</p></li></ol><p>无论采用哪种方法，都需要进行充分的测试和调试，确保异步计算不会影响游戏的帧率和流畅度。关注合理的任务调度和控制计算量是保证游戏帧数不受影响的重要因素。</p></details><p>Unity的生命周期都是在主线程中进行的，Unity协程属于一种（分帧）异步封装，也是在主线程中运行。如果有<strong>计算量大</strong>的任务，应该创建线程，在线程中运行。</p><blockquote><p>对于单线程平台<code>WEBGL</code>，使用多线程会相对困难</p></blockquote><p>这里计划对Unity使用的两种多线程API做简单介绍</p><ul><li>Unity JobSystem</li><li>C# Task (注意和异步函数声明的Task区分)</li></ul><div class="hint-container tip"><p class="hint-container-title">与异步的区别</p><p>本文事实上主要讨论将任务分配到其他线程的方法，所以这里的多线程主要强调 “需要多个线程的场景”。</p><p>如同多线程是单线程的反义词，异步是同步的反义词，但实际应用中这两个概念有时难以区分，例如：</p><ul><li>可以说在两个线程中，他们的信息传递是异步的。</li><li>可以说在异步函数中配置了调度参数，使其调度到另一个线程，变成了多线程。</li></ul></div><h2 id="使用unity-jobsystem" tabindex="-1"><a class="header-anchor" href="#使用unity-jobsystem"><span>使用Unity JobSystem</span></a></h2>',8),r={class:"hint-container tip"},d=n("p",{class:"hint-container-title"},"Unity文档",-1),k=n("p",null,"JobSystem允许您编写简单且安全的多线程代码，以便您的应用程序可以使用所有可用的CPU核心来执行您的代码。这有助于提高应用程序的性能。",-1),m=n("p",null,"您可以单独使用作业系统，但为了提高性能，您还应该使用Burst编译器，它专门为Unity的作业系统编译作业。Burst编译器改进了代码生成，从而提高了性能并减少了移动设备的电池消耗。",-1),b=n("p",null,"您可以将作业系统与Unity的实体组件系统(Entity Component System, ECS)一起使用，以创建高性能的数据导向代码。",-1),h={href:"https://learn.microsoft.com/en-us/dotnet/framework/interop/blittable-and-non-blittable-types",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.unity3d.com/cn/current/ScriptReference/Unity.Collections.LowLevel.Unsafe.NativeContainerAttribute.html",target:"_blank",rel:"noopener noreferrer"},y=n("blockquote",null,[n("p",null,"如果对JobSystem的使用方法不是很了解，可以先阅读下方的“demo和介绍”章节。")],-1),_=n("p",null,"Unity文档中提到了以下信息：",-1),f=n("li",null,"可以使用Burst编译器优化",-1),g={href:"https://forum.unity.com/threads/please-allow-us-to-pass-managed-types-to-jobs.1258980/",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,"当然，不用Burst编译器时，可以在Job内部创建和使用托管类型。",-1),S=n("li",null,[s("涉及面向数据编程（Unity DOTS） "),n("ul",null,[n("li",null,[s("如果不是特别在意"),n("strong",null,"缓存命中"),s("带来的性能提升，也可以全程unsafe，或者更激进一点，用GCHandle访问主线程的托管类型。")])])],-1),J=n("p",null,"除了上述提到的不完全支持托管对象的限制，还有其他限制。",-1),T=n("h3",{id:"更多限制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#更多限制"},[n("span",null,"更多限制")])],-1),U=n("p",null,"通过一些规则的制定，规避了一些复杂行为，同时也限制了一些功能，必要时这些功能也可以通过添加attribute、或者使用指针的方式来打破一些规则。 规定包括但不限于：",-1),C=n("li",null,"不允许访问静态变量",-1),x=n("li",null,"不允许在Job里调度子Job",-1),j=n("li",null,"只能向Job里传递值类型，并且是通过拷贝的方式从主线程将数据传输进Job，当Job运行结束数据会拷贝回主线程，我们可以在主线程的job对象访问Job的执行结果。",-1),q=n("li",null,"不允许在Native容器里添加托管类型",-1),A={href:"https://forum.unity.com/threads/how-to-fix-error-nested-native-containers-are-illegal-in-jobs.1420019/",target:"_blank",rel:"noopener noreferrer"},B=n("li",null,[s("不允许使用指针 "),n("ul",null,[n("li",null,"一样可以通过unsafe方法")])],-1),E=n("li",null,"不允许多个Job同时写入同一个地方",-1),N=n("li",null,"不允许在Job里分配额外内存",-1),D={href:"https://www.cnblogs.com/FlyingZiming/p/17241013.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/OneYoungMean/Automatic-DynamicBone/tree/master",target:"_blank",rel:"noopener noreferrer"},I=t(`<blockquote><p>注意！<code>Automatic-DynamicBone</code>使用的是较早版本的JobSystem，有些声明方式可能已经不是最佳选择。</p></blockquote><h3 id="demo和介绍" tabindex="-1"><a class="header-anchor" href="#demo和介绍"><span>demo和介绍</span></a></h3><p>这里展示了一个Unity文档中的Demo，一个继承了<code>IJob</code>的简单计算。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Unity<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Unity<span class="token punctuation">.</span>Jobs</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyScheduledJob</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">// Create a native array of a single float to store the result. Using a </span>
    <span class="token comment">// NativeArray is the only way you can get the results of the job, whether</span>
    <span class="token comment">// you&#39;re getting one value or an array of values.</span>
    <span class="token class-name">NativeArray<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">;</span>
    <span class="token comment">// Create a JobHandle for the job</span>
    <span class="token class-name">JobHandle</span> handle<span class="token punctuation">;</span>

    <span class="token comment">// Set up the job</span>
    <span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">MyJob</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IJob</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> a<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> b<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">NativeArray<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Update is called once per frame</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Set up the job data</span>
        result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NativeArray<span class="token punctuation">&lt;</span><span class="token keyword">float</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Allocator<span class="token punctuation">.</span>TempJob<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">MyJob</span> jobData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyJob</span>
        <span class="token punctuation">{</span>
            a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
            b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
            result <span class="token operator">=</span> result
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Schedule the job</span>
        handle <span class="token operator">=</span> jobData<span class="token punctuation">.</span><span class="token function">Schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LateUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// Sometime later in the frame, wait for the job to complete before accessing the results.</span>
        handle<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// All copies of the NativeArray point to the same memory, you can access the result in &quot;your&quot; copy of the NativeArray</span>
        <span class="token comment">// float aPlusB = result[0];</span>

        <span class="token comment">// Free the memory allocated by the result array</span>
        result<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述代码中可以观察到，使用Job在于以下几点：</p><ul><li>定义Job类和运算内容<code>Execute()</code></li><li>在主线程创建Job实例<code>job</code>，并传入数据</li><li><code>Schedule</code>该<code>job</code>，使用<code>JobHandle</code>监视完成状态 <ul><li>可以用<code>handle.IsCompleted</code>属性</li></ul></li><li>等待完成后调用<code>handle.Complete()</code>方法，访问<code>job</code>的运算内容 <ul><li>这个<code>Complete()</code>一开始让我很疑惑，注释中只说了&quot;Ensures that the job has completed.&quot;，没有更多描述。</li></ul></li></ul><blockquote><p>可以使用<code>job.Run()</code>使其运行在主线程，以便debug</p></blockquote><blockquote><p>在debug信息不够详细时(例如Native容器遇到错误，单靠log信息很难排查问题)，使用visual studio的<code>attach debug</code>，可以得到更多的信息</p></blockquote><p>这样一来，就对JobSystem有一个大概的认识了，快上手写一个Job感受JobSystem的种种限制和面向数据编程与面向对象编程的冲突吧，记得配合Burst编译。进一步的，可以了解并行Job和ECS，更深刻的掌握JobSystem。</p>`,9),M={href:"https://docs.unity3d.com/ScriptReference/Unity.Profiling.ProfilerMarker.html",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"Time.realtimeSinceStartup",-1),L=n("h2",{id:"c-task",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-task"},[n("span",null,"C# Task")])],-1),G=n("p",null,"使用C# Task，相对JobSystem的繁文缛节，它更加易用。但相对的，开发者需要自行管理多线程可能会出现的脏读写问题，以及与Unity API的兼容问题。",-1),R={href:"https://docs.unity3d.com/cn/current/Manual/overview-of-dot-net-in-unity.html",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>C# Task 是对<strong>线程池</strong>的又一层封装，提供了返回值的支持：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Calling [void Foo(int num)]</span>
<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Equivalent of preceding using Task</span>
Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Another equivalent</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调度选项和任务取消" tabindex="-1"><a class="header-anchor" href="#调度选项和任务取消"><span>调度选项和任务取消</span></a></h3><p>除了<code>Result</code>和<code>Exception</code>外，这两个引入的Feature也应该好好理解。</p><ul><li>调度选项：通过配置 <code>TaskScheduler</code> 达成目的，一般用于在GUI应用中，让一部分改变GUI的代码在主线程中执行。</li><li>任务取消：通过配置 <code>CancellationToken</code> 达成目的，程序员写的代码需要根据传入的token打断当前逻辑。</li></ul><h3 id="处理主线程调用" tabindex="-1"><a class="header-anchor" href="#处理主线程调用"><span>处理主线程调用</span></a></h3><p>由于Unity API并不能保证线程安全，所以Unity API被认为只应该在主线程调用（在Dev下会抛异常，Build下会造成未定义的错误）。Unity也为此实现了同步上下文（主要用于异步编程），那么使用Task时也可以利用这一点，将Task调度到主线程上。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// (假设)有一个(多线程)计算任务结束时，需要将结果展示在游戏中</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> <span class="token number">648</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t1<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name"><span class="token keyword">var</span></span> ct <span class="token operator">=</span> t1<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>task <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>SynchronizationContext<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>
        GameObject<span class="token punctuation">.</span><span class="token function">CreatePrimitive</span><span class="token punctuation">(</span>PrimitiveType<span class="token punctuation">.</span>Cube<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拉一个cube</span>
        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span>deltaTime <span class="token operator">*</span> t1<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    TaskScheduler<span class="token punctuation">.</span><span class="token function">FromCurrentSynchronizationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指定调度方式</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task注意事项" tabindex="-1"><a class="header-anchor" href="#task注意事项"><span>Task注意事项</span></a></h3><ol><li>要记得处理异常，调用 <code>Wait</code>、<code>Result</code> 或 <code>ContinueWith</code> 中设置 <code>TaskContinuationOptions.OnlyOnFaulted</code><blockquote><p>以Task为代表的异步编程模型在执行程序员定义的代码时，会捕获异常存起来，也可以实现一套异步编程模型，设置遇到异常的逻辑。</p></blockquote></li></ol><h3 id="task的拓展方法" tabindex="-1"><a class="header-anchor" href="#task的拓展方法"><span>Task的拓展方法</span></a></h3><ul><li>Task工厂：TaskFactory，辅助对任务构造和调度。</li><li>Task的群体等待方法。</li><li>并行For：Parallel，提供对并行循环和区域的支持。</li></ul>`,12),z={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.tasks.task?view=netframework-4.8",target:"_blank",rel:"noopener noreferrer"},V=t('<h2 id="同步锁" tabindex="-1"><a class="header-anchor" href="#同步锁"><span>同步锁</span></a></h2><blockquote><p>对于包含静态条件的代码，（中间忘了）。为了性能，使用互锁（Interlocked类）和易变（Volatile类）这样低级的基元构造，会让情况更加复杂。在好的多线程编程中，“越简单越好”或许才是最重要的原则。- 《Essential C# 7.0》</p></blockquote><h2 id="我的多线程问题合集" tabindex="-1"><a class="header-anchor" href="#我的多线程问题合集"><span>我的多线程问题合集</span></a></h2><ol><li><p>同一个进程中的多线程，是否要考虑线程上下文切换的内存载入问题？（高内存使用场景）</p><ul><li>简化问题为：线程调度是否涉及内存页的调度？那答案应该是“要考虑”</li></ul></li><li><p>Thread.Sleep()和Task.Delay()的使用都应该仔细权衡，看是否有替代方案。</p><ul><li>如果要等待一个事件触发，可以使用消息通知。如Task的<code>TaskCompletionSource</code></li></ul></li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',5),W={href:"https://docs.unity3d.com/Manual/JobSystem.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://docs.unity3d.com/cn/current/ScriptReference/Unity.Jobs.IJob.html",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://www.cnblogs.com/FlyingZiming/p/17241013.html",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://zhuanlan.zhihu.com/p/83120068",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://book.douban.com/subject/27009371/",target:"_blank",rel:"noopener noreferrer"},K=n("ul",null,[n("li",null,"19.1 多线程处理基础")],-1);function X($,nn){const a=l("ExternalLinkIcon");return c(),p("div",null,[u,n("div",r,[d,k,m,b,n("p",null,[s("当使用Burst编译器时，JobSystem工作得最好。由于Burst不支持托管对象，因此需要使用非托管类型来访问作业中的数据。您可以使用"),n("a",h,[s("blittable类型"),e(a)]),s("或Unity内置的"),n("a",v,[s("NativeContainer对象"),e(a)]),s("，这是一种线程安全的C#包装器，用于本机内存。NativeContainer对象还允许作业访问与主线程共享的数据，而不是使用副本。")])]),y,_,n("ul",null,[f,n("li",null,[s("不完全支持托管(unmanage)对象（引用类型都是托管对象） "),n("ul",null,[n("li",null,[s("文档中描述的是“当使用Burst编译器时”的场合，但实际上Job Struct不允许有托管对象成员，还有人在unity论坛控诉"),n("a",g,[s("PLEASE allow us to pass MANAGED types to jobs !"),e(a)])]),w])]),S]),J,T,U,n("ul",null,[C,x,j,q,n("li",null,[s("不允许在Native容器里嵌套Native容器 "),n("ul",null,[n("li",null,[s("只能使用unsafe容器或BlobAssets，"),n("a",A,[s("参考UnityForum"),e(a)])])])]),B,E,N]),n("p",null,[s("这部分引自"),n("a",D,[s("Unity JobSystem使用及技巧 - cnblog"),e(a)]),s("，感兴趣可以看看，或者找一些相对成熟的开源项目，如"),n("a",P,[s("Automatic-DynamicBone - Github"),e(a)]),s("，它在unity使用jobsystem实现了动态骨骼的物理模拟。")]),I,n("blockquote",null,[n("p",null,[s("可以通过"),n("a",M,[s("ProfilerMarker"),e(a)]),s("或简单的时间开销"),F,s("测试其性能表现。")])]),L,G,n("blockquote",null,[n("p",null,[s("可以查看"),n("a",R,[s("Unity 中的 .NET 概述 - Unity Doc"),e(a)]),s('中的"Limitations of async and await tasks"部分')])]),O,n("p",null,[s("可以参考"),n("a",z,[s("Task 类 - learn.microsoft"),e(a)])]),V,n("ul",null,[n("li",null,[n("a",W,[s("Job system - Unity Documentation"),e(a)])]),n("li",null,[n("a",H,[s("继承IJob的示例 - Unity Documentation"),e(a)])]),n("li",null,[n("a",Z,[s("Unity JobSystem使用及技巧 - cnblog"),e(a)])]),n("li",null,[s("评论区吵架很有意思："),n("a",Q,[s("Blittable ECS？- 知乎"),e(a)])]),n("li",null,[n("a",Y,[s("《Essential C# 7.0》"),e(a)]),K])])])}const en=o(i,[["render",X],["__file","MultiThread.html.vue"]]),tn=JSON.parse('{"path":"/GameCodeDesign/MultiThread.html","title":"多线程","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"使用Unity JobSystem","slug":"使用unity-jobsystem","link":"#使用unity-jobsystem","children":[{"level":3,"title":"更多限制","slug":"更多限制","link":"#更多限制","children":[]},{"level":3,"title":"demo和介绍","slug":"demo和介绍","link":"#demo和介绍","children":[]}]},{"level":2,"title":"C# Task","slug":"c-task","link":"#c-task","children":[{"level":3,"title":"调度选项和任务取消","slug":"调度选项和任务取消","link":"#调度选项和任务取消","children":[]},{"level":3,"title":"处理主线程调用","slug":"处理主线程调用","link":"#处理主线程调用","children":[]},{"level":3,"title":"Task注意事项","slug":"task注意事项","link":"#task注意事项","children":[]},{"level":3,"title":"Task的拓展方法","slug":"task的拓展方法","link":"#task的拓展方法","children":[]}]},{"level":2,"title":"同步锁","slug":"同步锁","link":"#同步锁","children":[]},{"level":2,"title":"我的多线程问题合集","slug":"我的多线程问题合集","link":"#我的多线程问题合集","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1728832911000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":4}]},"readingTime":{"minutes":9.49,"words":2848},"filePathRelative":"GameCodeDesign/MultiThread.md","localizedDate":"February 13, 2024"}');export{en as comp,tn as data};

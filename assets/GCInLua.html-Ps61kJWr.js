import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as c,c as t,a as e,b as n,d as r,e as d}from"./app-BX3Xhc_b.js";const i={},u=d('<h1 id="lua中的gc" tabindex="-1"><a class="header-anchor" href="#lua中的gc"><span>Lua中的GC</span></a></h1><p>Lua中的内存管理类似于C#，也是托管式的，所以有垃圾回收机制，Lua垃圾回收的对象是<strong>表和闭包</strong>。</p><blockquote><p>一直到Lua5.0：使用标记-清除式垃圾收集器，就好像不分代的C# GC一样，每次从根开始遍历一遍，回收被标记的内存。（它怎么没提到碎片整理啊？不会没有吧？不会吧？）</p></blockquote><blockquote><p>Lua5.1：使用增量式垃圾收集器</p></blockquote><blockquote><p>Lua5.2：引入紧急垃圾回收</p></blockquote><blockquote><p>Lua5.4：引入了基于代的垃圾回收机制，可以在它和增量式垃圾收集器之间选择</p></blockquote><p>Lua引入了一些机制管理垃圾回收策略，这些机制是：</p><ul><li>弱引用表：利用表的元字段 <code>__mode</code>，有三种模式（ <code>v</code>, <code>k</code>, <code>kv</code> ）。 <blockquote><p>书中举了一个把弱引用表当cache使用的例子，好抽象啊</p></blockquote></li><li>析构器：在内存被回收时调用，可以用它释放外部资源。通过元方法<code>__gc</code>实现，回收时可存在“复苏”现象。</li><li><code>collectgarbage</code> 函数: 可以填入两个参数，具体含义见API说明。调用方式如 <code>collectgarbage(&quot;stop&quot;)</code> 和<code>collectgarbage(&quot;step&quot;, n)</code></li></ul><h2 id="值得注意的使用方法" tabindex="-1"><a class="header-anchor" href="#值得注意的使用方法"><span>值得注意的使用方法</span></a></h2><ol><li>全局变量的释放方法</li></ol><p>通过将全局变量设为 <code>null</code>，不引用它，就可以被垃圾回收标记了（如果没有其他的引用的话）</p><ol start="2"><li>在为表设置元表时，就决定了表是否可以被析构（即调用<code>__gc</code>）</li></ol><p>在设置后再修改元表，为其增加<code>__gc</code>元方法是没有用的</p><ol start="3"><li>使用弱引用键表优化对偶表示</li></ol><p>目的是解决垃圾回收问题</p><blockquote><p>我的建议是不要使用对偶表示，什么鬼特性，不能惯着（</p></blockquote><ol start="4"><li>弱引用键表的 <code>v</code>(<code>(k, v)</code>模式) 引用 <code>k</code> 时，不算做强引用</li></ol><p>一种名为“瞬表(Ephemeron Table)”的特殊情况，避免环造成的“错误”逻辑造成垃圾回收机制的失效</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',19),s={href:"https://www.lua.org/pil/",target:"_blank",rel:"noopener noreferrer"},p=e("ul",null,[e("li",null,"23章，垃圾收集")],-1);function h(_,m){const o=a("ExternalLinkIcon");return c(),t("div",null,[u,e("ul",null,[e("li",null,[e("a",s,[n("Lua程序设计 第四版 - Roberto"),r(o)]),p])])])}const g=l(i,[["render",h],["__file","GCInLua.html.vue"]]),q=JSON.parse('{"path":"/Lua/GCInLua.html","title":"Lua中的GC","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"值得注意的使用方法","slug":"值得注意的使用方法","link":"#值得注意的使用方法","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1708716861000,"updatedTime":1708716861000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":1}]},"readingTime":{"minutes":1.72,"words":515},"filePathRelative":"Lua/GCInLua.md","localizedDate":"February 23, 2024"}');export{g as comp,q as data};

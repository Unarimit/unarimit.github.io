import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as i,c as l,a as e,b as s,d as r,e as o}from"./app-BX3Xhc_b.js";const c={},p=o('<h1 id="程序集" tabindex="-1"><a class="header-anchor" href="#程序集"><span>程序集</span></a></h1><div class="hint-container tip"><p class="hint-container-title">Unity文档中对程序集的介绍</p><p>程序集定义和程序集引用是可创建用于将脚本组织为程序集的资源。</p><p>程序集是 C# 代码库，其中包含由脚本定义的已编译类和结构并且还定义了对其他程序集的引用。有关 C# 中的程序集的一般信息，请参阅 [.NET 中的程序集]。</p><p>默认情况下，Unity 几乎将所有游戏脚本都编译到预定义 程序集 Assembly-CSharp.dll 中。（Unity 还会创建[一些较小的专用预定义程序集]。）</p><p>这种安排对于小型项目而言可以接受，但是在向项目添加更多代码时会有一些缺点：</p><ul><li>每次更改一个脚本时，Unity 都必须重新编译所有其他脚本，从而增加迭代代码更改的整体编译时间。</li><li>任何脚本都可以直接访问任何其他脚本中定义的类型，这样可能更加难以重构和改进代码。</li><li>所有脚本都针对所有平台进行编译。</li></ul><p>通过定义程序集，可以组织代码以促进模块化和可重用性。为项目定义的程序集中的脚本不再添加到默认程序集中，并且只能访问指定的其他程序集中的脚本。</p></div><p>若使用多程序集，之后的开发就要区分public和internal关键字，以正确的管理作用域。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',4),m={href:"https://docs.unity3d.com/cn/2022.3/Manual/ScriptCompilationAssemblyDefinitionFiles.html",target:"_blank",rel:"noopener noreferrer"};function d(h,u){const t=n("ExternalLinkIcon");return i(),l("div",null,[p,e("ul",null,[e("li",null,[e("a",m,[s("程序集定义 - Unity Doc"),r(t)])])])])}const b=a(c,[["render",d],["__file","Assembly.html.vue"]]),y=JSON.parse('{"path":"/GameBuild/Assembly.html","title":"程序集","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1707819000000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":1}]},"readingTime":{"minutes":1.29,"words":388},"filePathRelative":"GameBuild/Assembly.md","localizedDate":"February 13, 2024"}');export{b as comp,y as data};

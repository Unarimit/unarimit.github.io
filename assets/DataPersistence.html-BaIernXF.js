import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c,a as n,b as a,d as e,e as t}from"./app-BX3Xhc_b.js";const i={},r=t('<h1 id="数据持久化" tabindex="-1"><a class="header-anchor" href="#数据持久化"><span>数据持久化</span></a></h1><h2 id="playerprefs" tabindex="-1"><a class="header-anchor" href="#playerprefs"><span>PlayerPrefs</span></a></h2><p>由于存储数据类型比较有限，可以用于存储玩家偏好设置。</p><blockquote><p>It can store string, float and integer values into the user’s platform registry.</p></blockquote><p>有<code>SetFloat</code>,<code>SetInt</code>,<code>SetString</code>等方法</p><p>根据不同的平台，会将数据存储在不同的位置</p><blockquote><p>Windows下是 On Windows, PlayerPrefs are stored in the registry under <code>HKCU\\Software\\[company name]\\[product name]</code> key, where company and product names are the names set up in Project Settings.</p></blockquote><h2 id="序列化存文件" tabindex="-1"><a class="header-anchor" href="#序列化存文件"><span>序列化存文件</span></a></h2><p>虽然也可以把序列化的string存到<code>PlayerPrefs</code>中，但有时我们希望自定义存储位置。</p><blockquote><p>windows下会写到注册表中，这位玩家，你也不想你的注册表被写满游戏存档数据吧~</p></blockquote><p>Application中定义了5个Path，我认为两个Path比较常用，分别是<code>Application.dataPath</code>和<code>Application.persistentDataPath</code></p>',11),u=n("code",null,"dataPath",-1),d={href:"https://docs.unity3d.com/ScriptReference/Application-dataPath.html",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"persistentDataPath",-1),v={href:"https://docs.unity3d.com/ScriptReference/Application-persistentDataPath.html",target:"_blank",rel:"noopener noreferrer"},m=n("h3",{id:"简要介绍一下序列化问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简要介绍一下序列化问题"},[n("span",null,"简要介绍一下序列化问题")])],-1),b={class:"hint-container warning"},h=t('<p class="hint-container-title">注意</p><p>以下序列化使用传统的<code>BinaryFormatter</code>类去做，它是由<code>[Serializable]</code>特性控制哪些类可以被序列化，用<code>[NonSerialized]</code>控制哪些成员是不需被序列化的，所有成员在类被标记为<code>[Serializable]</code>时，都可以被序列化（属性会序列化其背后的<code>Field</code>，事件会序列化对应的委托类(他的名字)和里面存储的监听对象(使用时要谨慎)）。</p><p>还有一些序列化类如<code>JsonSerializer</code>，则使用另一套特性去控制序列化，并有一些潜在规则（例如默认忽略<code>Field</code>）。</p>',3),f=n("code",null,"BinaryFormatter",-1),y={href:"https://learn.microsoft.com/zh-cn/dotnet/standard/serialization/binaryformatter-security-guide",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,[a("另外除了传统二进制序列化（通过"),n("code",null,"BinaryFormatter"),a("）和Json序列化（通过"),n("code",null,"JsonSerializer"),a("）之外，还有ProtoBuf等方案，它们有各式各样的用途（ProtoBuf主要解决序列化的压缩问题，使其更有效率）。")],-1),_=t(`<p>理论上，只要给序列化的类，和他里面包含的<code>field</code>的定义类(class和struct)都加上<code>[Serializable]</code>特性即可，另外对于一些不想被序列化的<code>field</code>加上<code>[NonSerialized]</code>特性，对于不想被序列化的事件，需要加上<code>[field: NonSerialized]</code>。</p><blockquote><p>委托和枚举类型都是默认带<code>[Serializable]</code>特性的，而struct和class不是。一般没有人想序列化事件吧，对象图中的事件还牵扯一堆订阅类。</p></blockquote><p>实际上，还是可能会遇到各种问题如：</p><ul><li>由于<code>Vector3</code>，<code>Vector2Int</code>等Unity中提供的类没有<code>[Serializable]</code>特性，需要额外处理一下。 <ul><li>可以使用简单使用属性表示不能序列化的类，数据拆开使用<code>field</code>存储，虽然会对性能有影响（不影响性能可以参考下面的<code>ISerializable</code>）。</li></ul></li><li>序列化一个继承类，而父类不可以加上<code>[Serializable]</code>特性。 <ul><li>实现<code>ISerializable</code>接口定义序列化逻辑。</li></ul></li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 简单处理的代码</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span> 放置位置 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>
<span class="token keyword">internal</span> <span class="token keyword">struct</span> <span class="token class-name">PlaceInfo</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name">Vector2Int</span> PlacePosition <span class="token punctuation">{</span> 
		<span class="token keyword">get</span> <span class="token punctuation">{</span> 
			<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector2Int</span><span class="token punctuation">(</span>_placePostionX<span class="token punctuation">,</span> _placePostionY<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">set</span>
		<span class="token punctuation">{</span>
			_placePostionX <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
			_placePostionY <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 为了序列化</span>
	<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _placePostionX<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _placePostionY<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="序列化存文件demo" tabindex="-1"><a class="header-anchor" href="#序列化存文件demo"><span>序列化存文件Demo</span></a></h3><p>下面两个函数描述了简单的保存和加载应该怎么做：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
<span class="token keyword">class</span> <span class="token class-name">SaveData</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> savedInt<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> savedFloat<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> savedBool<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SaveGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name">BinaryFormatter</span> bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BinaryFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token class-name">FileStream</span> file <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>persistentDataPath 
                 <span class="token operator">+</span> <span class="token string">&quot;/MySaveData.dat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token class-name">SaveData</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SaveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	data<span class="token punctuation">.</span>savedInt <span class="token operator">=</span> intToSave<span class="token punctuation">;</span>
	data<span class="token punctuation">.</span>savedFloat <span class="token operator">=</span> floatToSave<span class="token punctuation">;</span>
	data<span class="token punctuation">.</span>savedBool <span class="token operator">=</span> boolToSave<span class="token punctuation">;</span>
	bf<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;Game data saved!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">LoadGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>persistentDataPath 
                   <span class="token operator">+</span> <span class="token string">&quot;/MySaveData.dat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">BinaryFormatter</span> bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BinaryFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">FileStream</span> file <span class="token operator">=</span> 
                   File<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>persistentDataPath 
                   <span class="token operator">+</span> <span class="token string">&quot;/MySaveData.dat&quot;</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>Open<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">SaveData</span> data <span class="token operator">=</span> <span class="token punctuation">(</span>SaveData<span class="token punctuation">)</span>bf<span class="token punctuation">.</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
		file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		intToSave <span class="token operator">=</span> data<span class="token punctuation">.</span>savedInt<span class="token punctuation">;</span>
		floatToSave <span class="token operator">=</span> data<span class="token punctuation">.</span>savedFloat<span class="token punctuation">;</span>
		boolToSave <span class="token operator">=</span> data<span class="token punctuation">.</span>savedBool<span class="token punctuation">;</span>
		Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;Game data loaded!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span>
		Debug<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span><span class="token string">&quot;There is no save data!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存档流程设计" tabindex="-1"><a class="header-anchor" href="#存档流程设计"><span>存档流程设计</span></a></h3><p>看完了上面两个函数，再来思考下一个问题：如何完成存档，读档功能呢？我认为可以分为以下几个部分：</p><ul><li>存档类 <ul><li>确定哪些数据是需要存储的</li></ul></li><li>加载存档的UI和存档摘要类 <ul><li>在读档页面希望看到什么摘要数据</li></ul></li><li>文件读写功能 <ul><li>可以通过一个通用的泛型功能完成</li></ul></li><li>完成存读档流程 <ul><li>加载存档后将数据写入使用区域（在c#中可能只是改个引用）</li><li>写入新的存档后也要变更存档摘要哦</li></ul></li><li>调试和测试 <ul><li>看看数据是否完整，或编写测试用例</li></ul></li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,12),w={href:"https://docs.unity3d.com/ScriptReference/PlayerPrefs.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://docs.unity3d.com/ScriptReference/Application.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://www.red-gate.com/simple-talk/development/dotnet-development/saving-game-data-with-unity/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://book.douban.com/subject/26285940/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://stackoverflow.com/questions/1173667/how-do-i-ignore-event-subscribers-when-serializing-an-object",target:"_blank",rel:"noopener noreferrer"};function z(F,x){const s=p("ExternalLinkIcon");return l(),c("div",null,[r,n("ul",null,[n("li",null,[u,a("和工程目录相关，具体见"),n("a",d,[a("文档"),e(s)])]),n("li",null,[k,a("和用户目录相关，具体见"),n("a",v,[a("文档"),e(s)])])]),m,n("div",b,[h,n("p",null,[f,a("在"),n("a",y,[a(".Net文档"),e(s)]),a("被标记为obsolete，需要在使用它时好好考虑。")]),g]),_,n("ul",null,[n("li",null,[n("a",w,[a("API PlayerPrefs - Unity Doc"),e(s)])]),n("li",null,[n("a",S,[a("API Application - Unity Doc"),e(s)])]),n("li",null,[n("a",P,[a("Saving Game Data with Unity - redgate"),e(s)])]),n("li",null,[a("《CLR Via C# 第四版》24章-运行时序列化："),n("a",D,[a("CLR Via C# - Jeffrey Richter"),e(s)])]),n("li",null,[n("a",q,[a("How do I ignore event subscribers when serializing an object? - Stack Overflow"),e(s)])])])])}const A=o(i,[["render",z],["__file","DataPersistence.html.vue"]]),C=JSON.parse('{"path":"/UnityComponent/DataPersistence.html","title":"数据持久化","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"PlayerPrefs","slug":"playerprefs","link":"#playerprefs","children":[]},{"level":2,"title":"序列化存文件","slug":"序列化存文件","link":"#序列化存文件","children":[{"level":3,"title":"简要介绍一下序列化问题","slug":"简要介绍一下序列化问题","link":"#简要介绍一下序列化问题","children":[]},{"level":3,"title":"序列化存文件Demo","slug":"序列化存文件demo","link":"#序列化存文件demo","children":[]},{"level":3,"title":"存档流程设计","slug":"存档流程设计","link":"#存档流程设计","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1708162985000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":2}]},"readingTime":{"minutes":3.73,"words":1120},"filePathRelative":"UnityComponent/DataPersistence.md","localizedDate":"February 13, 2024"}');export{A as comp,C as data};

import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as u,c as i,a as n,d as a,w as p,b as s,e}from"./app-BX3Xhc_b.js";const k="/assets/runtimeModelConfig-0-DEm9uqA7.gif",r={},d=e('<h1 id="记一次人物模型的运行时配置" tabindex="-1"><a class="header-anchor" href="#记一次人物模型的运行时配置"><span>记一次人物模型的运行时配置</span></a></h1><img src="'+k+'"><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>所使用资源来自网络，可能会引起各种版权问题，仅做学习交流使用。如文中有侵犯权益的行为，请联系Github中的邮箱，我将于24小时之内删除。</p></div><p>记录一次通过代码运行时（Runtime）配置碧蓝档案中角色模型<code>Humanoid Avatar</code>(<code>Animator</code>组件需要<code>Avatar</code>才可以运作)、<code>枪-特效绑定</code>、<code>material</code>和<code>额外骨骼</code>(头发和裙子)的摇动。</p><blockquote><p>包含shiroko、hoshino、mashiro、aru和karin 5个角色模型，以下对其简称为&quot;BA模型&quot;</p></blockquote><p>包括以下小节：</p>',6),m={class:"table-of-contents"},v={href:"https://github.com/Unarimit/my-topdown-shooting-game/blob/version0.4/Assets/Scripts/CombatLogic/FbxLoadManager.cs",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"LoadModel",-1),g=e('<h2 id="为什么需要运行时配置" tabindex="-1"><a class="header-anchor" href="#为什么需要运行时配置"><span>为什么需要运行时配置</span></a></h2><p>对于&quot;BA模型&quot;，其格式较为统一，相较为每个人物在Unity中Editor下配置，还是按照一定格式在运行时统一配置比较方便。除此之外还有下列好处：</p><ul><li>适应从外部Patch模型（如Mod制作只需对照格式制作即可像native模型一样映射到游戏中）</li><li>（实际开发流程中）强制规范化（你也不想收到一堆骨骼命名、尺寸甚至pivot都不一样的人物模型吧）</li><li>一些通过点云扫描建模的元宇宙app生成avatar只能这么做吧</li></ul><h2 id="配置humanoid-avatar" tabindex="-1"><a class="header-anchor" href="#配置humanoid-avatar"><span>配置<code>Humanoid Avatar</code></span></a></h2><p>在<code>Unity Editor</code>中，在<code>Inspector</code>点几个按钮就配置了，但Runtime好像并不那么方便，至少我没找到对应的Api。</p>',5),h={href:"https://github.com/bkevelham/unity-avatar-generation/tree/main",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"unity editor",-1),w=e(`<p>通过<code>AvatarBuilder.BuildHumanAvatar</code>方法生成<code>Avatar</code>，关键是需要<code>HumanDescription</code>信息，这个信息的获取并不简单。</p><blockquote><p>我完成了骨骼映射的部分，跑了一下很奇怪，模型都卷在一起了，所以放弃了自己从0配置<code>HumanDescription</code></p></blockquote><p>为了获取<code>HumanDescription</code>信息，考虑到这些模型的配置信息(Humanoid部分)都差不多，所以直接在unity editor中生成一个作为通用<code>HumanDescription</code>，将它作用到之后导入的模型（取巧的做法）。</p><p>从配置到好<code>Avatar</code>中获取<code>HumanDescription</code>的代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name">HumanDescription</span> <span class="token function">GetHumanDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> res <span class="token operator">=</span> NormalAvatar<span class="token punctuation">.</span>humanDescription<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&quot;bone_root&quot;</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span>skeleton <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保留mesh当作根，我也不知道为什么要这样，反正这样是对的</span>
    
    <span class="token comment">// delete parent</span>
    res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SkeletonBone</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token string">&quot;this_is_root&quot;</span><span class="token punctuation">,</span> position <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>position<span class="token punctuation">,</span> rotation <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rotation<span class="token punctuation">,</span> scale <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token punctuation">}</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SkeletonBone</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> position <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>position<span class="token punctuation">,</span> rotation <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rotation<span class="token punctuation">,</span> scale <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后就可以把这个<code>HumanDescription</code>用于<code>AvatarBuilder.BuildHumanAvatar</code>方法了。</p><blockquote><p>注意到里面有一个“经验数”-<code>115</code>，是因为通过debug观察，后面的骨骼都不是人形骨骼</p></blockquote><h2 id="配置枪-特效绑定" tabindex="-1"><a class="header-anchor" href="#配置枪-特效绑定"><span>配置<code>枪-特效绑定</code></span></a></h2><p>鉴于BA模型的人形骨骼命名都是一样的，直接把枪塞到手上就行了。</p><p>代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> weaponBone <span class="token operator">=</span> boneRoot<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Bip001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Bip001_Weapon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> rhandBone <span class="token operator">=</span> boneRoot<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Bip001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Bip001 Pelvis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Bip001 Spine&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Bip001 Spine1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Bip001 R Clavicle&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Bip001 R UpperArm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Bip001 R Forearm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Bip001 R Hand&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
weaponBone<span class="token punctuation">.</span>parent <span class="token operator">=</span> rhandBone<span class="token punctuation">;</span>
weaponBone<span class="token punctuation">.</span>localPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.1f</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
weaponBone<span class="token punctuation">.</span>localEulerAngles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 配置枪口位置</span>
<span class="token class-name"><span class="token keyword">var</span></span> fireStart <span class="token operator">=</span> weaponBone<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;fire_01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> gf <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>ResourceManager<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Load</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Effects/Gunfire&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fireStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
gf<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>localEulerAngles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gf<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>localScale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3</span><span class="token punctuation">(</span><span class="token number">0.4f</span><span class="token punctuation">,</span> <span class="token number">0.4f</span><span class="token punctuation">,</span> <span class="token number">0.4f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置material" tabindex="-1"><a class="header-anchor" href="#配置material"><span>配置<code>material</code></span></a></h2><p>鉴于BA模型命名相对一致，同样通过关键词查找对应的<code>material</code>并替换。</p><blockquote><p>需要注意只有重新赋值<code>skinRender.materials</code>这个属性，才能更改材质（只改变其中的元素不行）。这可能就是属性不直观的地方，如果用显示的<code>SetMaterials</code>方法，就好理解一些。</p></blockquote><p>代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">changeSkinMaterial</span><span class="token punctuation">(</span><span class="token class-name">SkinnedMeshRenderer</span> skinRender<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> oldM <span class="token operator">=</span> skinRender<span class="token punctuation">.</span>materials<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> newM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Material</span><span class="token punctuation">[</span>oldM<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldM<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> oldM<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//if (x.mainTexture != null) Debug.Log($&quot;{x}, {x.mainTexture.name}&quot;);</span>
        <span class="token comment">//else Debug.Log($&quot;{x}, null texture&quot;);</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>mainTexture <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            newM<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;_Face&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            newM<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>default_face<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newM<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">SetTexture</span><span class="token punctuation">(</span><span class="token string">&quot;_BaseMap&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>mainTexture<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;_Hair&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            newM<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>default_hair<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newM<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">SetTexture</span><span class="token punctuation">(</span><span class="token string">&quot;_BaseMap&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>mainTexture<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;_Body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            newM<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>default_body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newM<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">SetTexture</span><span class="token punctuation">(</span><span class="token string">&quot;_BaseMap&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>mainTexture<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;_EyeMouth&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            newM<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>default_eyeMouth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            newM<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">SetTexture</span><span class="token punctuation">(</span><span class="token string">&quot;_BaseMap&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>mainTexture<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            newM<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    skinRender<span class="token punctuation">.</span>sharedMaterials <span class="token operator">=</span> newM<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置额外骨骼" tabindex="-1"><a class="header-anchor" href="#配置额外骨骼"><span>配置<code>额外骨骼</code></span></a></h2><p>使用&quot;MagicaCloth2&quot;实现，需要考虑以下事项：</p><ul><li>根据关键词和层级找出目标骨骼</li><li>对于裙子，需要调试大腿的碰撞体大小，或延长裙子碰撞骨骼（避免穿模）</li><li>执行&quot;MagicaCloth2&quot;的<code>BuildAndRun()</code></li><li>由于<code>BuildAndRun()</code>在另一个线程执行，需要确保骨骼在完成<code>Build</code>前锁定，防止可能的穿模问题 <ul><li>当<code>Build</code>完成时，动画已经把人物的大腿卡在了裙子中间，裙子就开始颤抖</li></ul></li></ul><p>代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">addMagicaBone</span><span class="token punctuation">(</span><span class="token class-name">Transform</span> root<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> nodes <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponentsInChildren</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Transform<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// hair (short front hair)</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hairParent <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;hair&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;hair&quot;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token class-name">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hairParent<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> go <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>magicaHair<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        go<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MagicaCloth<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>SerializeData<span class="token punctuation">.</span>rootBones <span class="token operator">=</span> hairParent<span class="token punctuation">;</span>
        go<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MagicaCloth<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BuildAndRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// hair - tail (long back hair)</span>
    <span class="token class-name"><span class="token keyword">var</span></span> tailParent <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;tail&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;tail&quot;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token class-name">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tailParent<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> go <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>magicaTail<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        go<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MagicaCloth<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>SerializeData<span class="token punctuation">.</span>rootBones <span class="token operator">=</span> tailParent<span class="token punctuation">;</span>
        go<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MagicaCloth<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BuildAndRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment">// skirt: find parent</span>
    <span class="token class-name"><span class="token keyword">var</span></span> skirtParent <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;skirt&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;skirt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token class-name">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>skirtParent<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 找到叶节点并延长一段</span>
        <span class="token class-name"><span class="token keyword">var</span></span> skirtLeafs <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;skirt&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>childCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> leaf <span class="token keyword">in</span> skirtLeafs<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> left_ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GameObject</span><span class="token punctuation">(</span>leaf<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;left_ex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            left_ex<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>parent <span class="token operator">=</span> leaf<span class="token punctuation">.</span>transform<span class="token punctuation">;</span>
            left_ex<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">=</span> leaf<span class="token punctuation">.</span>position <span class="token operator">+</span> <span class="token punctuation">(</span>leaf<span class="token punctuation">.</span>position <span class="token operator">-</span> leaf<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span>normalized <span class="token operator">*</span> <span class="token number">0.08f</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// bones</span>
        <span class="token class-name"><span class="token keyword">var</span></span> go <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>magicaSkirt<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> comp <span class="token operator">=</span> go<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MagicaCloth<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        comp<span class="token punctuation">.</span>SerializeData<span class="token punctuation">.</span>rootBones <span class="token operator">=</span> skirtParent<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> colliders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>ColliderComponent<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// colliders</span>
        <span class="token comment">// -- 右腿</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> rThighTrans <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;R Thigh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>rThighTrans<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">root<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string"> have </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">rThighTrans<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> &#39;R Thigh&#39; Bone, expected to be 1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> rTrans <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>rThighCollider<span class="token punctuation">,</span> rThighTrans<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            colliders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>rTrans<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MagicaCapsuleCollider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// -- 左腿</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> lThighTrans <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;L Thigh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>lThighTrans<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">root<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string"> have </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">lThighTrans<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> &#39;L Thigh&#39; Bone, expected to be 1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> thTrans <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>lThighCollider<span class="token punctuation">,</span> lThighTrans<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            colliders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>thTrans<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MagicaCapsuleCollider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// -- 盆骨</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> pelvisTrans <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;Pelvis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pelvisTrans<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">root<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string"> have </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">pelvisTrans<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> &#39;Pelvis&#39; Bone, expected to be 1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> thTrans <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>pelvisCollider<span class="token punctuation">,</span> pelvisTrans<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            colliders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>thTrans<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MagicaSphereCollider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        comp<span class="token punctuation">.</span>SerializeData<span class="token punctuation">.</span>colliderCollisionConstraint<span class="token punctuation">.</span>colliderList <span class="token operator">=</span> colliders<span class="token punctuation">;</span>
        go<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MagicaCloth<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BuildAndRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 冻结裙子根骨骼运动，直到MagicaCloth build完成</span>
        <span class="token class-name"><span class="token keyword">int</span></span> id <span class="token operator">=</span> _ID<span class="token operator">++</span><span class="token punctuation">;</span>
        freezeSkirtId<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">StartCoroutine</span><span class="token punctuation">(</span><span class="token function">freezeSkirt</span><span class="token punctuation">(</span>skirtParent<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        go<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MagicaCloth<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>OnBuildComplete <span class="token operator">+=</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> freezeSkirtId<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _ID <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> freezeSkirtId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token return-type class-name">IEnumerator</span> <span class="token function">freezeSkirt</span><span class="token punctuation">(</span><span class="token class-name">IList<span class="token punctuation">&lt;</span>Transform<span class="token punctuation">&gt;</span></span> skirtTopNode<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> points <span class="token operator">=</span> skirtTopNode<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>freezeSkirtId<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> skirtTopNode<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> skirtTopNode<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>position <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>简单总结一下，我目前能发现不足的地方主要在异常处理，不能在假定模型满足格式要求的同时，不做异常检测和<strong>抛出异常</strong>。不然到时候出一个空引用异常很难发现是哪里的问题（是输入数据有问题还是模型本身有问题）。</p><p>另外就是<code>HumanDescription</code>用取巧的方式获取，没有去了解他的工作方式和相关参数的意义（有一堆错误容忍参数）。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,25),y={href:"https://gwb.tencent.com/community/detail/128310",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.unity3d.com/ScriptReference/HumanDescription.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.unity3d.com/ScriptReference/AvatarBuilder.BuildHumanAvatar.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/bkevelham/unity-avatar-generation/tree/main",target:"_blank",rel:"noopener noreferrer"};function C(T,B){const t=c("router-link"),o=c("ExternalLinkIcon");return u(),i("div",null,[d,n("nav",m,[n("ul",null,[n("li",null,[a(t,{to:"#为什么需要运行时配置"},{default:p(()=>[s("为什么需要运行时配置")]),_:1})]),n("li",null,[a(t,{to:"#配置humanoid-avatar"},{default:p(()=>[s("配置Humanoid Avatar")]),_:1})]),n("li",null,[a(t,{to:"#配置枪-特效绑定"},{default:p(()=>[s("配置枪-特效绑定")]),_:1})]),n("li",null,[a(t,{to:"#配置material"},{default:p(()=>[s("配置material")]),_:1})]),n("li",null,[a(t,{to:"#配置额外骨骼"},{default:p(()=>[s("配置额外骨骼")]),_:1})]),n("li",null,[a(t,{to:"#总结"},{default:p(()=>[s("总结")]),_:1})]),n("li",null,[a(t,{to:"#参考"},{default:p(()=>[s("参考")]),_:1})])])]),n("p",null,[s("所有配置代码都在"),n("a",v,[s("我的项目My-TDS，FbxLoadManager.cs"),a(o)]),s("中的"),b,s("函数中。")]),g,n("blockquote",null,[n("p",null,[s("在github找到了一个"),n("a",h,[s("针对mixamo模型的生成方法"),a(o)]),s("，不像"),f,s("中的算法一样支持骨骼的模糊匹配。")])]),w,n("ul",null,[n("li",null,[n("a",y,[s("Unity 批处理模型转Humanoid - 腾讯独立游戏孵化器"),a(o)])]),n("li",null,[n("a",q,[s("HumanDescription - Unity API Documentation"),a(o)])]),n("li",null,[n("a",x,[s("AvatarBuilder - Unity API Documentation"),a(o)])]),n("li",null,[n("a",_,[s("针对mixamo模型的生成方法 - Github"),a(o)])])])])}const S=l(r,[["render",C],["__file","HumanModelRuntimeConfig.html.vue"]]),R=JSON.parse('{"path":"/CodingRamble/HumanModelRuntimeConfig.html","title":"记一次人物模型的运行时配置","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"为什么需要运行时配置","slug":"为什么需要运行时配置","link":"#为什么需要运行时配置","children":[]},{"level":2,"title":"配置Humanoid Avatar","slug":"配置humanoid-avatar","link":"#配置humanoid-avatar","children":[]},{"level":2,"title":"配置枪-特效绑定","slug":"配置枪-特效绑定","link":"#配置枪-特效绑定","children":[]},{"level":2,"title":"配置material","slug":"配置material","link":"#配置material","children":[]},{"level":2,"title":"配置额外骨骼","slug":"配置额外骨骼","link":"#配置额外骨骼","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1708011239000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":2}]},"readingTime":{"minutes":5.55,"words":1664},"filePathRelative":"CodingRamble/HumanModelRuntimeConfig.md","localizedDate":"February 13, 2024"}');export{S as comp,R as data};

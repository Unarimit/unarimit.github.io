import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c,e as o}from"./app-BX3Xhc_b.js";const t={},d=o('<h1 id="数值" tabindex="-1"><a class="header-anchor" href="#数值"><span>数值</span></a></h1><p>你是否曾落入过C++的 <code>size_t</code> 陷阱，又或是在看到带有幂运算符号的语言中 <code>2^-3^4</code> 的结果时百思不得其解？这就是编程语言中数值的魅力。</p><blockquote><p>C++的 <code>size_t</code> 陷阱: 当你写for循环时使用 <code>int i = 0; i &lt; x.size()-1; i++</code> 时，若 <code>x.size()</code> 是0，那么就会得到一个很长时间的循环。C#为了易用性在设计时就避免了这一点，<code>List&lt;T&gt;</code> 的 <code>Count</code> 属性是一个 <code>int</code> 类型。</p></blockquote><blockquote><p>lua的 <code>2^-3^4</code>：可以理解为 <code>2^-(3^4)</code>， <code>^</code> 遵守右结合规律，但<code>-</code>却不同。这其实是一个关于编译原理的问题。</p></blockquote><h2 id="计算机是如何表示数值" tabindex="-1"><a class="header-anchor" href="#计算机是如何表示数值"><span>计算机是如何表示数值</span></a></h2><h2 id="大端小端之争" tabindex="-1"><a class="header-anchor" href="#大端小端之争"><span>大端小端之争</span></a></h2><h2 id="运算时的结合率" tabindex="-1"><a class="header-anchor" href="#运算时的结合率"><span>运算时的结合率</span></a></h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',8),i=[d];function n(l,s){return a(),c("div",null,i)}const m=e(t,[["render",n],["__file","Number.html.vue"]]),p=JSON.parse('{"path":"/Language/Number.html","title":"数值","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"计算机是如何表示数值","slug":"计算机是如何表示数值","link":"#计算机是如何表示数值","children":[]},{"level":2,"title":"大端小端之争","slug":"大端小端之争","link":"#大端小端之争","children":[]},{"level":2,"title":"运算时的结合率","slug":"运算时的结合率","link":"#运算时的结合率","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1715012087000,"updatedTime":1740898402000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":2}]},"readingTime":{"minutes":0.64,"words":191},"filePathRelative":"Language/Number.md","localizedDate":"May 6, 2024"}');export{m as comp,p as data};

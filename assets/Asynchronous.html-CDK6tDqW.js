import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as u,c as r,a as n,b as s,d as a,w as c,e}from"./app-BX3Xhc_b.js";const d="/assets/async-0-DCr8ndan.png",k="/assets/async-1-B8wYOKIB.png",m={},v=e('<h1 id="异步编程" tabindex="-1"><a class="header-anchor" href="#异步编程"><span>异步编程</span></a></h1><img src="'+d+'"><p>在Unity中，异步编程的思想可以应用到很多方面，通常用于处理需要一段时间才能完成的任务，例如加载资源、网络请求或动画效果等。通过异步，可以避免阻塞主线程，保持游戏或应用程序的流畅性。</p><p>本文主要介绍异步编程需要的组件和他们的区别：</p><ul><li><code>Coroutine</code>是异步编程</li><li><code>async</code> / <code>await</code> 是异步编程（注：Task不等于异步编程）</li><li>*回调函数配合生命周期也可以是异步编程（混沌邪恶</li></ul><h2 id="三种方案的优缺点" tabindex="-1"><a class="header-anchor" href="#三种方案的优缺点"><span>三种方案的优缺点</span></a></h2>',6),h=n("li",null,[n("code",null,"Coroutine"),n("ul",null,[n("li",null,[s("优点：unity原生，很多api都是用协程实现（例如"),n("code",null,"LoadSceneAsync"),s("）")]),n("li",null,[s("缺点："),n("code",null,"IEnumarable"),s("没有返回值，不方便复杂的逻辑。")])])],-1),b=n("code",null,"async",-1),y=n("code",null,"await",-1),g=n("li",null,[s("优点： "),n("ul",null,[n("li",null,"有返回值"),n("li",null,"写起来逻辑更清晰"),n("li",null,[s("提供比协程更多的逻辑控制（"),n("code",null,"cancellationToken"),s("）")]),n("li",null,"同步异步都能用"),n("li",null,[s("考虑多线程，由 "),n("code",null,"SynchronizationContext"),s(" 处理“线程处理模型”产生的额外影响")])])],-1),w={href:"https://stackoverflow.com/questions/5383310/catch-an-exception-thrown-by-an-async-void-method",target:"_blank",rel:"noopener noreferrer"},f={href:"https://youtu.be/WY-mk-ZGAq8?si=Do5vRtqHYq3gwhwX&t=919",target:"_blank",rel:"noopener noreferrer"},_=n("li",null,"有些使用协程的api使用起来不方便",-1),C=n("li",null,[s("*"),n("code",null,"Unity 2023.1"),s("中引入"),n("code",null,"Awaitable"),s(" class，提供"),n("code",null,"WaitForSecondsAsync"),s(", "),n("code",null,"NextFrameAsync"),s("等api。")],-1),x=n("li",null,[s("响应式编程配合生命周期 "),n("ul",null,[n("li",null,"参考DOTween和UI事件，特定的使用场景")])],-1),T=e('<h2 id="c-异步编程模型-async-await" tabindex="-1"><a class="header-anchor" href="#c-异步编程模型-async-await"><span>C#异步编程模型 <code>async</code> / <code>await</code></span></a></h2><p>方法使用<code>async</code>修饰，方法内部内容会被C#编译器转化为<code>异步状态机类</code>，用于实现异步执行的功能。并使用异步特性修饰方法，以便能够在metadata中查看。在使用时，有下列需要注意的事项：</p><ol><li>逻辑仍(默认)在unity主线程“运行”，但不再受生命周期函数的上下文影响（如<code>FixedUpdate</code>中的deltaTime(默认)是0.02秒） <ul><li>这里的“运行”指的是一种特殊的Task调度模式，为了避免多线程产生的脏读写，异步方法中的代码会被调度到主线程运行。如果想修改这一调度方式，可以重新配置环境的同步上下文<code>System.Threading.SynchronizationContext.Current</code> 或通过Task的 <code>ConfigureAwait(false)</code> 方法。</li></ul></li><li>小心异常逃逸！该异步模型是基于 <code>Task</code> 的，<code>Task</code> 中的异常会被“收集”起来。使用 <code>await</code> 等待异步函数时会将异常抛出。</li><li><code>async void</code>是一类特殊的异步方法，通常用作异步开始的“入口”。 <ul><li>特点是异常不可<code>try catch</code>，但可以正常抛到同步上下文（而非task那样塞到自己的属性里）</li><li>为了正常使用，不应在其中出现<code>ConfigureAwait(false)</code>等将线程调至线程池的做法。</li><li>对<code>async void</code>不应该滥用，有一种解释是它只应该用于“某个事件处理程序的订阅者”，如unity中的按钮、生命周期函数、各种触发函数(如OnCollision)等。</li></ul></li></ol>',3),O={href:"https://devblogs.microsoft.com/dotnet/how-async-await-really-works/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://book.douban.com/subject/26285940/",target:"_blank",rel:"noopener noreferrer"},q=e(`<h3 id="异常捕获问题" tabindex="-1"><a class="header-anchor" href="#异常捕获问题"><span>异常捕获问题</span></a></h3><blockquote><p>由于异步模式利用了<code>Task</code>，而<code>Task</code>被设计为捕获内部异常，等拿结果时再抛出异常。所以不await异步函数，该函数内的异常就找不到地方抛出。</p></blockquote><p>直接上示例代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>如果不Await异常就捕获不了<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// await 如果不Await异常就捕获不了(); // 如果用注释中的，则能捕获到异常</span>
<span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> Task 如果不Await异常就捕获不了<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个异常不会触发断点调试(可以试着在console app中执行一下)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="以不同的方式执行异步代码" tabindex="-1"><a class="header-anchor" href="#以不同的方式执行异步代码"><span>以不同的方式执行异步代码</span></a></h3><p>测试运行线程，我想看看<code>async</code>方法在这里是怎么调度的。这里使用了一个“引理”，那就是unity在dev模式下的非主线程中调用unity api函数会抛出异常。</p>`,6),S={href:"https://book.douban.com/subject/26285940/",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"调度上下文",-1),A=n("code",null,"await",-1),E={href:"https://github.com/Unity-Technologies/UnityCsReference/blob/master/Runtime/Export/Scripting/UnitySynchronizationContext.cs",target:"_blank",rel:"noopener noreferrer"},I={href:"https://learn.microsoft.com/zh-cn/dotnet/desktop/winforms/controls/how-to-make-thread-safe-calls?view=netdesktop-7.0",target:"_blank",rel:"noopener noreferrer"},L=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">TestMono</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 顶层异步入口 &quot;async void&quot;</span>
        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>SynchronizationContext<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  --&gt; UnityEngine.UnitySynchronizationContext</span>
        <span class="token class-name"><span class="token keyword">var</span></span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; null(无SynchronizationContext), exception, Thread Pool Worker, 没报错</span>
        t<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _ <span class="token operator">=</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; UnityEngine.UnitySynchronizationContext, 没报错, 0.0019407, 没报错</span>
        <span class="token keyword">await</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; UnityEngine.UnitySynchronizationContext, 没报错, 0.0019407, Test EX</span>
        <span class="token comment">// dosomething().GetAwaiter().GetResult(); </span>
        <span class="token comment">// 上述代码cause deadlock, more detail: https://stackoverflow.com/questions/39007006/is-getawaiter-getresult-safe-for-general-use </span>
        <span class="token comment">// 如果想看看什么是死锁，在尝试这个用例的时候除了取消注释外，还要把代码放在上面，</span>
        <span class="token comment">// 不然就因为 await dosomething() 抛出的异常提前终止了，根本执行不到这里。</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 打印同步上下文</span>
        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>SynchronizationContext<span class="token punctuation">.</span>Current<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 一个await测试</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 测试访问只有游戏主线程能访问的</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意，如果在Worker中调用且遇到空引用异常，unity会忽略它</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">&quot;can not get time &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 打印线程名字</span>
        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 抛出异常，看是否可以被程序捕获</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Test EX&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="例子-使用async-await实现选择窗口" tabindex="-1"><a class="header-anchor" href="#例子-使用async-await实现选择窗口"><span>例子-使用<code>async</code> / <code>await</code>实现选择窗口</span></a></h2><p>选择窗口可以理解为上传、打开文件时，弹出的文件选择窗口。</p><img src="`+k+'">',4),R=n("p",null,"目的是可以向网络API一样，异步的方式获取所需资源（某个类）",-1),G=n("blockquote",null,[n("p",null,[s("用代码的方式就是"),n("code",null,"var data = await xxxxxRequest(xxxx)"),s("，之后就可以对data各种操作。")])],-1),z=n("p",null,[s("代码是"),n("code",null,"My-TDS"),s("中实现"),n("code",null,"Operator"),s("选择的逻辑，这样写可以复用到同样需要选择"),n("code",null,"Operator"),s("的UI上。")],-1),B={href:"https://github.com/Unarimit/my-topdown-shooting-game/commit/9f0a51cc8f6550cfa6aa7a230e984af4c927d3d0#diff-24a12e61770d7ee56b1dac79d23d6bd05a1c045df723ea7537a786450a2bc23c",target:"_blank",rel:"noopener noreferrer"},V=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">OperatorChooseUI</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Operator<span class="token punctuation">&gt;</span></span> <span class="token function">ChooseOperator</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Operator<span class="token punctuation">&gt;</span></span> operators<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> comp <span class="token operator">=</span> <span class="token function">Instantiate</span><span class="token punctuation">(</span>ResourceManager<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Load</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;UIs/OperatorChooseCanvas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span>transform<span class="token punctuation">.</span><span class="token function">GetChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OperatorChooseUI<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> comp<span class="token punctuation">.</span><span class="token function">ChooseOperatorInner</span><span class="token punctuation">(</span>operators<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Operator</span> choseOp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>Operator<span class="token punctuation">&gt;</span></span> <span class="token function">ChooseOperatorInner</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>Operator<span class="token punctuation">&gt;</span></span> operators<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 1.创建子UI</span>
        transform<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">&quot;Scroll View&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OperatorChooseScrollViewUI<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> operators<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2.等待finish</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>choseOp <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3.过渡消失</span>
        <span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CanvasGroup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DOFade</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">OnComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Destroy</span><span class="token punctuation">(</span>transform<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> choseOp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Choose</span><span class="token punctuation">(</span><span class="token class-name">Operator</span> op<span class="token punctuation">)</span> <span class="token comment">// 子UI的button会调用这个方法</span>
    <span class="token punctuation">{</span>
        choseOp <span class="token operator">=</span> op<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码的逻辑是，调用时弹出一个<code>Operator</code>选择窗口，用户点击了某个选择按钮时，就返回一个<code>Operator</code>给调用方。</p><blockquote><p>调用函数在用户选择期间处于挂起状态。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 简单调用测试一下</span>
<span class="token class-name"><span class="token keyword">var</span></span> op <span class="token operator">=</span> <span class="token keyword">await</span> OperatorChooseUI<span class="token punctuation">.</span><span class="token function">ChooseOperator</span><span class="token punctuation">(</span>MyServices<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Operators<span class="token punctuation">)</span><span class="token punctuation">;</span>
Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,5),j={href:"https://www.mendix.com/blog/asynchronous-vs-synchronous-programming/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://youtu.be/WY-mk-ZGAq8?si=Do5vRtqHYq3gwhwX",target:"_blank",rel:"noopener noreferrer"},W={href:"https://www.youtube.com/watch?v=X9Dtb_4os1o",target:"_blank",rel:"noopener noreferrer"},F={href:"https://stackoverflow.com/questions/5383310/catch-an-exception-thrown-by-an-async-void-method",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://book.douban.com/subject/26285940/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://wudaijun.com/2021/11/c-sharp-unity-async-programing/",target:"_blank",rel:"noopener noreferrer"},X={href:"https://book.douban.com/subject/27009371/",target:"_blank",rel:"noopener noreferrer"},P=n("ul",null,[n("li",null,"19.5 基于任务的异步模式")],-1);function H(J,K){const p=o("RouteLink"),t=o("ExternalLinkIcon"),l=o("center");return u(),r("div",null,[v,n("ol",null,[h,n("li",null,[b,s(" / "),y,s(": 利用 Task 和被称为 异步函数 的C#语言功能的一种"),a(p,{to:"/Language/OtherFeatures.html#c-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B"},{default:c(()=>[s("编程模型")]),_:1}),n("ul",null,[g,n("li",null,[s("缺点： "),n("ul",null,[n("li",null,[s("比协程复杂一点，要了解它的工作方式，不了解的话，可能会引起："),n("a",w,[s("一个不恰当使用导致try catch没用的例子"),a(t)])]),n("li",null,[s("在WebGL中不能使用"),n("a",f,[s("这个视频中提到"),a(t)])]),_])]),C])]),x]),T,n("p",null,[s("*可以参考："),n("a",O,[s("一个关于 async / await 的很长的理论文章"),a(t)]),s("，"),n("a",U,[s("CLR Via C# 第四版"),a(t)]),s("中描述的简单一些。")]),q,n("blockquote",null,[n("p",null,[s("参考"),n("a",S,[s("CLR Via C# 第四版"),a(t)]),s("在WinForm中描述的"),D,s("，应该会被调度到Unity的主线程中进行，方便对主线程数据的修改，实际上也确实如此。")])]),n("blockquote",null,[n("p",null,[A,s("之后的代码保证在游戏主线程中调用（因为Unity中一些属性只能游戏主线程访问，参考"),n("a",E,[s("UnityEngine.UnitySynchronizationContext"),a(t)]),s("），也可以看看"),n("a",I,[s("如何对控件进行线程安全的调用（Windows 窗体 .NET）"),a(t)])])]),L,a(l,null,{default:c(()=>[s(" 一个示意图，我做的肯定简单得多 ")]),_:1}),R,G,z,n("blockquote",null,[n("p",null,[n("a",B,[s("在这个提交里添加了这个功能"),a(t)])])]),V,n("ul",null,[n("li",null,[s("头图："),n("a",j,[s("Asynchronous vs. Synchronous Programming: Key Similarities and Differences - mendix"),a(t)])]),n("li",null,[s("简单介绍async / await 以及在unity中的使用："),n("a",N,[s("Unity async / await: Coroutine's Hot Sister - Youtube"),a(t)])]),n("li",null,[n("a",W,[s("Unity async / await: Awaitable - Youtube"),a(t)])]),n("li",null,[n("a",F,[s("一个不恰当使用导致try catch没用的例子 - Stackoverflow"),a(t)])]),n("li",null,[s("《CLR Via C# 第四版》28章节中的28.2-28.5介绍了await/async的工作原理，28.9介绍了线程上下文："),n("a",Y,[s("CLR Via C# - Jeffrey Richter"),a(t)])]),n("li",null,[n("a",M,[s("C#/Unity中的异步编程 - wudaijun's blog"),a(t)])]),n("li",null,[n("a",X,[s("《Essential C# 7.0》"),a(t)]),P])])])}const $=i(m,[["render",H],["__file","Asynchronous.html.vue"]]),nn=JSON.parse('{"path":"/GameCodeDesign/Asynchronous.html","title":"异步编程","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"三种方案的优缺点","slug":"三种方案的优缺点","link":"#三种方案的优缺点","children":[]},{"level":2,"title":"C#异步编程模型 async / await","slug":"c-异步编程模型-async-await","link":"#c-异步编程模型-async-await","children":[{"level":3,"title":"异常捕获问题","slug":"异常捕获问题","link":"#异常捕获问题","children":[]},{"level":3,"title":"以不同的方式执行异步代码","slug":"以不同的方式执行异步代码","link":"#以不同的方式执行异步代码","children":[]}]},{"level":2,"title":"例子-使用async / await实现选择窗口","slug":"例子-使用async-await实现选择窗口","link":"#例子-使用async-await实现选择窗口","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1728832507000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":6}]},"readingTime":{"minutes":6.46,"words":1938},"filePathRelative":"GameCodeDesign/Asynchronous.md","localizedDate":"February 13, 2024"}');export{$ as comp,nn as data};

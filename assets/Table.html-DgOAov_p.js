import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as d,c as u,a as n,b as a,d as s,w as l,e as t}from"./app-BX3Xhc_b.js";const r="/assets/lua_table-1-C4l-W5UJ.svg",k={},m=t(`<h1 id="表-关键数据结构" tabindex="-1"><a class="header-anchor" href="#表-关键数据结构"><span>表-关键数据结构</span></a></h1><blockquote><p>在Lua编程语言中，表（table）是一种非常重要的数据结构，可以用来表示关联数组、集合、记录、对象等。表在Lua中是一种强大而灵活的数据结构，它既可以被用作数组，也可以被用作字典或关联数组。</p></blockquote><p>它有以下用途：</p><ul><li>作为基础的数据结构（数组，字典）</li><li>作为面向对象设计的<code>类</code>，通过原型模式</li><li>元方法实现运算符重载和其他特性</li></ul><p>注意：lua中的表，类似C#中的引用类型，赋值会进行浅拷贝</p><h2 id="表的基本操作" tabindex="-1"><a class="header-anchor" href="#表的基本操作"><span>表的基本操作</span></a></h2><p>由于lua是动态类型的，你可以往表里面塞任何东西，通过<code>string</code>和<code>number</code>索引就行</p><blockquote><p>任何东西，lua的基本类型：值（boolean, number, string），函数(function)，thread，table，userdata</p></blockquote><p>然后我们通过表的定义，和作为列表和字典使用时的操作简单看一下表的概念</p><p>表定义:</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code>foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">--不定义的话，以类似foo[1]的方式访问表内元素会导致程序终止哦</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列表的定义、遍历和基本操作:</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code>arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">do</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token comment">-- 遍历</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token keyword">end</span>  

<span class="token comment">-- 基本操作，使用表标准库：insert，remove</span>
table<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">-- 在1之前插入10，会导致1-10的元素后移</span>
table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">-- 删除第二位元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字典的定义、遍历和基本操作</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
dic<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span> dic<span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span> dic<span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span>
<span class="token comment">-- 或 dic = {[&#39;a&#39;] = 10, [&#39;b&#39;] = 12, [&#39;c&#39;] = 15}</span>

<span class="token comment">-- 遍历</span>
<span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span> <span class="token keyword">do</span>
    <span class="token function">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment">-- 基本操作：contains</span>
<span class="token keyword">if</span> dic<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span> <span class="token operator">~=</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;contains element &#39;a&#39;&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>*记录式，到目前为止没什么卵用（需要配合面向对象的一些feature</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code>a <span class="token operator">=</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token comment">-- 10</span>
a<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">30</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>z<span class="token punctuation">)</span> <span class="token comment">-- 30</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>undefine<span class="token punctuation">)</span> <span class="token comment">-- nil</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>以上定义方式还可以混合使用...</strong> 是不是汗流浃背了呢</p><h3 id="作为列表使用的一些问题" tabindex="-1"><a class="header-anchor" href="#作为列表使用的一些问题"><span>作为列表使用的一些问题</span></a></h3><p>如果通过<code>arr[i]=nil</code>的方式尝试删除元素，就可能会遇到一些问题(书中把他称为空洞)</p><blockquote><p>建议使用<code>table.remove</code></p></blockquote><p>例如求长度的符号<code>#</code>只会计算从<code>下标1</code>到第一个nil为止的列表长度，会变得不可靠。解决方案是程序员自己存储长度信息。</p><blockquote><p>注意作为字典使用时的情况，<code>#</code>基本没用</p></blockquote><h2 id="元表-metatable" tabindex="-1"><a class="header-anchor" href="#元表-metatable"><span>元表（metatable）</span></a></h2>`,24),b={href:"https://www.lua.org/pil/",target:"_blank",rel:"noopener noreferrer"},v=t("<p>元表是表的表，元表中的方法（叫做元方法），提供了类似重载运算符（如<code>__add</code>和<code>__concat</code>）、重载api实现（如<code>__tostring</code>、<code>__metatable</code>和<code>__pairs</code>）和重载表相关的元方法（如<code>__index</code>）。</p><blockquote><p>也可以是任何类型的表，但修改其他类型的元表在lua语言中是做不到的</p></blockquote>",2),_=n("img",{src:r},null,-1),h=t("<p>通过元表，延伸出了面向对象设计和沙箱运行环境等特殊做法。</p><p>获取和设定元表：<code>getmetatable(table)</code> 和 <code>setmetatable(table, metatable)</code></p><blockquote><p>可以通过设置<code>__metatable</code>控制是否允许访问metatable</p></blockquote><p>常用的表相关的元方法</p><blockquote><p>“<code>__index</code>用于表的查询而<code>__newindex</code>用于表的更新”</p></blockquote><ul><li><code>__index</code>：访问不到的<code>key</code>会访问表中的<code>__index</code>，<code>__index</code>可以是一个表，也可以是一个方法（元方法），若未定义则返回nil。 <ul><li>若<code>__index</code>是一个方法，则会传入类似的参数<code>__index(table, key)</code>执行这个方法。</li><li>若<code>__index</code>是一个表，则会继续尝试访问<code>__index</code>中的<code>key</code>。可以根据此实现继承。</li><li>当然，由于函数更灵活，利用<code>__index</code>方法可以实现多继承</li></ul></li><li><code>__newindex</code>：添加表中不存在的<code>key</code>会执行元表的<code>__newindex</code>方法，<code>__newindex</code>同样也可以是一个表。 <ul><li>方法可以阻止向表中添加元素，也可以结合<code>__index</code>方法利用“代理”概念进一步控制。</li><li>当<code>__newindex</code>为表时，添加元素将在<code>__newindex</code>表中进行。</li></ul></li><li><code>__gc</code>: 析构器，垃圾回收相关</li><li>更多应用 <ul><li>追踪表的修改：保持表是空的，在元表中“代理”对表的操作</li><li>默认值和对偶表示</li><li>使用 <code>rawset</code> 和 <code>rawget</code> 绕过元方法</li></ul></li></ul><p>常用的表相关的元字段</p><ul><li><code>__mode</code>: 标记弱引用表的字段，垃圾回收相关</li><li><code>__metatable</code>：控制是否允许访问metatable</li></ul>",8),g=n("h2",{id:"参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考"},[n("span",null,"参考")])],-1),f={href:"https://www.lua.org/pil/",target:"_blank",rel:"noopener noreferrer"},x=n("ul",null,[n("li",null,"20章，元表和元方法"),n("li",null,"21章，面向对象编程")],-1);function w(y,q){const o=e("ExternalLinkIcon"),c=e("center"),p=e("RouteLink");return d(),u("div",null,[m,n("blockquote",null,[n("p",null,[a('"Lua语言中的每一个值都可以有元表" —— '),n("a",b,[a("《Lua程序设计 第四版》"),s(o)])])]),v,s(c,null,{default:l(()=>[_]),_:1}),h,n("p",null,[a("可以在"),s(p,{to:"/Lua/OOPInLua.html"},{default:l(()=>[a("lua中的面向对象")]),_:1}),a("中，进一步了解面向对象相关的知识")]),g,n("ul",null,[n("li",null,[n("a",f,[a("Lua程序设计 第四版 - Roberto"),s(o)]),x])])])}const N=i(k,[["render",w],["__file","Table.html.vue"]]),C=JSON.parse('{"path":"/Lua/Table.html","title":"表-关键数据结构","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"表的基本操作","slug":"表的基本操作","link":"#表的基本操作","children":[{"level":3,"title":"作为列表使用的一些问题","slug":"作为列表使用的一些问题","link":"#作为列表使用的一些问题","children":[]}]},{"level":2,"title":"元表（metatable）","slug":"元表-metatable","link":"#元表-metatable","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1714394241000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":5}]},"readingTime":{"minutes":3.77,"words":1130},"filePathRelative":"Lua/Table.md","localizedDate":"February 13, 2024"}');export{N as comp,C as data};

import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c as i,a as e,b as a,d as n,e as s}from"./app-BX3Xhc_b.js";const c={},d=s('<h1 id="游戏常用的几何算法" tabindex="-1"><a class="header-anchor" href="#游戏常用的几何算法"><span>游戏常用的几何算法</span></a></h1><p>虽然游戏引擎都为我们实现好了碰撞系统和区域的重叠检测功能，但理解它们是如何工作的会指导我们在开发中选择哪种算法，更能设计出性能友好的设计。需要考虑的是，有些检测算法可能在不同平台（如CPU、GPU）的效率是不一样的，所以掌握多种算法，综合分析是我们需要做的事。</p><blockquote><p>一些关于碰撞系统的检测方式可以看看我的<a href="./CollisionSystem">初探碰撞系统</a>文章</p></blockquote><h2 id="判断点是否在三角形内" tabindex="-1"><a class="header-anchor" href="#判断点是否在三角形内"><span>判断点是否在三角形内</span></a></h2><p>判断点是否在三角形内的方法有</p><blockquote><p>这里的介绍少了一些图片，不便于没接触过的人去理解，可以去看看文章尾部的参考文章，那里面有图。</p></blockquote><ul><li>重心坐标法：将点与三角形一点连线，投影到相邻边，利用其性质判断</li><li>向量叉积法：求点和三角形三个点的向量和顺序边的叉积，判断是否同向</li><li>面积和或内角和法：求点和三角形三个点的面积和（或角度和）和原三角形的面积（或180°）相比。</li></ul><p>向量叉乘法仅需要做三次向量的叉积，是性能最好的算法，所有普遍用于GPU的图形处理中（如光栅化）。面积和或内角和法都是理解起来相对容易但性能十分糟糕的算法。</p><p>值得一提的是，向量叉积法可以拓展到任意的凸形状中。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',10),m={href:"https://blog.csdn.net/yingyujianmo/article/details/49663695",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zhuanlan.zhihu.com/p/106253152",target:"_blank",rel:"noopener noreferrer"};function p(u,_){const t=o("ExternalLinkIcon");return r(),i("div",null,[d,e("ul",null,[e("li",null,[a("判断点是否在三角形内 "),e("ul",null,[e("li",null,[a("看图和思路："),e("a",m,[a("判断点是否在三角形内 狮子HH - csdn"),n(t)])]),e("li",null,[a("看评论区："),e("a",h,[a("学习｜判断一个点是否在三角形内 牛客竞赛 - csdn"),n(t)])])])])])])}const k=l(c,[["render",p],["__file","GameGeometry.html.vue"]]),g=JSON.parse('{"path":"/CodingRamble/GameGeometry.html","title":"游戏常用的几何算法","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"判断点是否在三角形内","slug":"判断点是否在三角形内","link":"#判断点是否在三角形内","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1708623209000,"updatedTime":1708687280000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":2}]},"readingTime":{"minutes":1.55,"words":464},"filePathRelative":"CodingRamble/GameGeometry.md","localizedDate":"February 22, 2024"}');export{k as comp,g as data};

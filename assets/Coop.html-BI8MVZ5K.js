import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,b as s,d as e,e as t}from"./app-BX3Xhc_b.js";const l={},r=t(`<h1 id="协同开发" tabindex="-1"><a class="header-anchor" href="#协同开发"><span>协同开发</span></a></h1><p>根据需求，有时可能需要和其他部门协同开发。应用不同的设计方法可以让其他人在不涉及具体业务代码的情况下，也能参与到游戏开发中来。</p><h2 id="unityevent" tabindex="-1"><a class="header-anchor" href="#unityevent"><span>UnityEvent</span></a></h2><p>可以暴露在Unity Editor里<code>Inspector</code>中的委托？</p><p>WIP</p><h2 id="scriptableobject" tabindex="-1"><a class="header-anchor" href="#scriptableobject"><span>ScriptableObject</span></a></h2><p>用于在Unity Editor中配置变量的东西，一些URP渲染管线的配置文件就是用它实现的。</p><details class="hint-container details"><summary>gpt介绍使用方法</summary><p>要使用 <code>ScriptableObject</code>，请按照以下步骤操作：</p><ol><li><p>创建一个派生自 <code>ScriptableObject</code> 的脚本： 在 Unity 中，创建一个新的 C# 脚本并使其继承自 <code>ScriptableObject</code>。例如，您可以使用以下代码示例创建一个名为 <code>MyData</code> 的自定义数据类：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">UnityEngine</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CreateAssetMenu</span><span class="token attribute-arguments"><span class="token punctuation">(</span>fileName <span class="token operator">=</span> <span class="token string">&quot;NewMyData&quot;</span><span class="token punctuation">,</span> menuName <span class="token operator">=</span> <span class="token string">&quot;Create My Data&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyData</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ScriptableObject</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> myString<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> myInt<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> myFloat<span class="token punctuation">;</span>

    <span class="token comment">// 可以在这里定义其他属性和方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例代码定义了一个 <code>MyData</code> 类，它具有 <code>myString</code>、<code>myInt</code> 和 <code>myFloat</code> 三个公共变量。</p></li><li><p>创建 <code>ScriptableObject</code> 实例： 在 Unity 编辑器中，右键单击项目视图中的某个文件夹，选择 &quot;Create&quot;，然后选择 &quot;Create My Data&quot;（根据您的脚本命名而定）。这将在所选文件夹中创建一个新的 <code>MyData</code> 实例。</p><p>您可以使用创建的 <code>MyData</code> 实例来编辑您的数据对象。在检查器窗口中，您可以设置和修改 <code>myString</code>、<code>myInt</code> 和 <code>myFloat</code> 等属性的值。</p></li><li><p>在脚本中使用 <code>ScriptableObject</code>： 要在其他脚本中使用 <code>ScriptableObject</code>，您可以通过以下方式引用和访问它：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token class-name">MyData</span> myData<span class="token punctuation">;</span>  <span class="token comment">// 声明一个 MyData 变量</span>

<span class="token comment">// 在脚本中使用 myData 的值</span>
<span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> dataString <span class="token operator">=</span> myData<span class="token punctuation">.</span>myString<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> dataInt <span class="token operator">=</span> myData<span class="token punctuation">.</span>myInt<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">float</span></span> dataFloat <span class="token operator">=</span> myData<span class="token punctuation">.</span>myFloat<span class="token punctuation">;</span>

    <span class="token comment">// 可以在这里进行其他操作</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Unity 编辑器中，将 <code>MyData</code> 脚本附加到场景中的游戏对象上，并将 <code>myData</code> 字段与先前创建的 <code>MyData</code> 实例关联起来。然后，您可以在脚本中使用 <code>myData</code> 变量来访问其属性值。</p></li></ol></details><h2 id="editor" tabindex="-1"><a class="header-anchor" href="#editor"><span>Editor</span></a></h2><p><code>Unity Editor</code>指的是unity客户端，<code>Editor</code>是一种专门用于自定义编辑器界面和工具的功能。它允许开发人员创建自定义的<code>Inspector</code>窗口、工具栏按钮和菜单项，以增强开发过程和提供更好的工作流程。</p><p>通过继承<code>EditorWindow</code>类，您可以创建自己的编辑器窗口，这使您能够在Unity编辑器中创建和管理自定义界面元素。<code>EditorWindow</code>提供了一系列方法和事件，可用于布局UI元素、处理用户输入和实现自定义功能。</p><p>这里列举一些挺不错的<code>Editor</code>插件：</p>`,12),u={href:"https://github.com/DumoeDss/AquaSmoothNormals",target:"_blank",rel:"noopener noreferrer"},d={href:"https://assetstore.unity.com/packages/tools/behavior-ai/schema-200876",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="editor实现csv文件转换为scriptable-object" tabindex="-1"><a class="header-anchor" href="#editor实现csv文件转换为scriptable-object"><span>Editor实现<code>CSV</code>文件转换为<code>Scriptable Object</code></span></a></h3><p>使用gpt生成了一个挺不错的模板</p><details class="hint-container details"><summary>gpt代码模板</summary><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CSVImporterEditor</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EditorWindow</span></span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MenuItem</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;MyMenu/Import CSV&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ImportCSV</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> filePath <span class="token operator">=</span> EditorUtility<span class="token punctuation">.</span><span class="token function">OpenFilePanel</span><span class="token punctuation">(</span><span class="token string">&quot;Import CSV&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 读取CSV文件内容</span>
            <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> lines <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllLines</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 解析CSV文件内容并更新ScriptableObject</span>
            <span class="token class-name">MyScriptableObject</span> myScriptableObject <span class="token operator">=</span> AssetDatabase<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LoadAssetAtPath</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyScriptableObject<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Assets/Path/To/Your/ScriptableObject.asset&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// TODO: 注意处理表头信息哦</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> values <span class="token operator">=</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 根据CSV文件的内容更新ScriptableObject的属性</span>
                myScriptableObject<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 保存ScriptableObject的修改</span>
            EditorUtility<span class="token punctuation">.</span><span class="token function">SetDirty</span><span class="token punctuation">(</span>myScriptableObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            AssetDatabase<span class="token punctuation">.</span><span class="token function">SaveAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            AssetDatabase<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,3),m={href:"https://github.com/Unarimit/my-topdown-shooting-game/commit/ab0c3746797ad078d1a86032eda3569c221b80ac#diff-d76776d5cbe58bd51383b9709d4de327fd0e2cefb86dbaffeac814c4e5d4e5d2",target:"_blank",rel:"noopener noreferrer"},b=t('<h3 id="editor实现覆写inspector" tabindex="-1"><a class="header-anchor" href="#editor实现覆写inspector"><span>Editor实现覆写Inspector</span></a></h3><p>通过<code>CustomEditor(typeof(T))</code>特性覆写<code>T</code>类型<code>MonoBehaviour</code>在Inspector中的信息。</p><p>WIP</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',4),v={href:"https://assetstore.unity.com/packages/tools/gui/ugui-minimap-32874",target:"_blank",rel:"noopener noreferrer"};function h(y,g){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,n("ul",null,[n("li",null,[s("处理法线："),n("a",u,[s("AquaSmoothNormals - Github"),e(a)])]),n("li",null,[s("行为树插件："),n("a",d,[s("Schema - Asset Store"),e(a)])])]),k,n("p",null,[s("我的项目使用此模板完成了技能csv表到scriptable object的转换，附上"),n("a",m,[s("脚本内容 - Github"),e(a)])]),b,n("ul",null,[n("li",null,[s("覆写Inspector代码："),n("a",v,[s("UGUI Minimap - Assets Store"),e(a)])])])])}const w=p(l,[["render",h],["__file","Coop.html.vue"]]),_=JSON.parse('{"path":"/GameCodeDesign/Coop.html","title":"协同开发","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"UnityEvent","slug":"unityevent","link":"#unityevent","children":[]},{"level":2,"title":"ScriptableObject","slug":"scriptableobject","link":"#scriptableobject","children":[]},{"level":2,"title":"Editor","slug":"editor","link":"#editor","children":[{"level":3,"title":"Editor实现CSV文件转换为Scriptable Object","slug":"editor实现csv文件转换为scriptable-object","link":"#editor实现csv文件转换为scriptable-object","children":[]},{"level":3,"title":"Editor实现覆写Inspector","slug":"editor实现覆写inspector","link":"#editor实现覆写inspector","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1707819000000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":1}]},"readingTime":{"minutes":2.98,"words":894},"filePathRelative":"GameCodeDesign/Coop.md","localizedDate":"February 13, 2024"}');export{w as comp,_ as data};

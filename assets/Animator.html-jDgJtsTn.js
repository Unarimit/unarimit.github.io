import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as c,c as r,d as s,w as e,a as n,b as a,e as p}from"./app-BX3Xhc_b.js";const u="/assets/animator-1-DfXWJFD5.png",d="/assets/animator-2-CQ0tFZPV.png",k="/assets/animator-3-5d0JFP-f.png",m={},h=p('<h1 id="动画机-animator" tabindex="-1"><a class="header-anchor" href="#动画机-animator"><span>动画机(Animator)</span></a></h1><p>本章包括：</p><ul><li><code>Animator组件</code>介绍（Animator Component）</li><li><code>Animator面板</code>提供的功能（Animator Window）</li><li>关于3D动画格式的一些知识</li><li>动态导入，从fbx导入Avatar</li></ul><h2 id="animator组件" tabindex="-1"><a class="header-anchor" href="#animator组件"><span>Animator组件</span></a></h2><p>一般绑定在被控制的物体上面，使其在进行移动、攻击行为时，播放相应的动画。</p>',5),v=n("img",{src:u},null,-1),_=p('<p>在上图中可以看到要配置Controller和Avatar</p><ul><li>Controller：动画状态机，通过<code>Animator Window</code>编辑 <ul><li>保持动画格式和模型格式相同（都是Genetic或Humanoid）</li></ul></li><li>Avatar：角色的骨骼表示 <ul><li>保证被控制的骨骼（在Hierarchy中的子物体）来自这个Avatar</li></ul></li></ul><p>不难发现如果为一个角色写好一套逻辑，只想改变模型的话：修改物体Hierarchy下的模型和骨骼，在修改对应的Avatar就可以了。</p><h2 id="animator面板" tabindex="-1"><a class="header-anchor" href="#animator面板"><span>Animator面板</span></a></h2><p>动画之前的切换采用了有限状态机的形式，可以通过配置在动画切换时播放过渡动画</p><p>除了状态之间的过渡动画外，还有混合树的形式，如通过速度blend走和跑两个动作，使速度介于走和跑中间时播放blend动画。</p><p>对于复杂的动作，可以使用层级控制（Layer）模式。例如可以控制上半身做释放技能动作，下半身仍做移动动作。</p>',7),b=n("img",{src:d},null,-1),f={href:"https://docs.unity3d.com/cn/current/Manual/AnimatorControllers.html",target:"_blank",rel:"noopener noreferrer"},A=n("h3",{id:"animationevent",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#animationevent"},[n("span",null,"AnimationEvent")])],-1),g=n("p",null,"可以在动画clip中设置AnimationEvent，在执行到指定动画帧时，会在执行动画的物体上调用相应的函数。",-1),y={href:"https://docs.unity3d.com/cn/2021.3/Manual/script-AnimationWindowEvent.html",target:"_blank",rel:"noopener noreferrer"},w=n("h3",{id:"动画过渡",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#动画过渡"},[n("span",null,"动画过渡")])],-1),x=n("p",null,"当一个动画转换到另一个动画时，需要配置过渡属性，包括：",-1),D=n("ul",null,[n("li",null,"从A到B如何混合动画"),n("li",null,"A到B发生中断如何混合")],-1),I={href:"https://docs.unity3d.com/cn/current/Manual/class-Transition.html",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"humanoid-dynamic",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#humanoid-dynamic"},[n("span",null,"humanoid & dynamic")])],-1),H=n("p",null,"在导入模型文件时，需要配置rig（翻译为：操纵 or 绑定），如下图所示。",-1),B=n("img",{src:k},null,-1),M=p(`<p>WIP</p><h2 id="动态导入avatar" tabindex="-1"><a class="header-anchor" href="#动态导入avatar"><span>动态导入Avatar</span></a></h2><p>仅介绍humanoid的方式，参考方法：</p><p><code>public static Avatar BuildHumanAvatar(GameObject go, HumanDescription humanDescription)</code></p><p>这个函数显然不如<code>Editor</code>的<code>Avatar配置</code>一样智能，只会按照humanoid的标准找骨骼，找不到就报错。</p><p>只能自己配置<code>HumanDescription</code>，其中包括：</p><ul><li><code>human</code>:模型骨骼名称对应humanoid骨骼名称的映射</li><li><code>skeleton</code>:骨骼位置</li><li>其他如<code>m_ArmTwist</code>的float参数</li></ul><p>由于<code>skeleton</code>中需要配置<code>T-pose</code>时的参数，如果模型初始状态不处于<code>T-pose</code>时会很麻烦</p><blockquote><p><code>human</code>相对来说好配置，可由<code>Editor</code>的<code>Avatar配置</code>导出一套映射。理论上如果模型处于<code>T-pose</code>就不需要配置<code>skeleton</code>？</p></blockquote><h3 id="从默认avatar获取humandescription" tabindex="-1"><a class="header-anchor" href="#从默认avatar获取humandescription"><span>从默认Avatar获取<code>HumanDescription</code></span></a></h3><p>这里假定导入的模型在humanoid部分，骨骼都是相同的情况，以下是示例代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name">HumanDescription</span> <span class="token function">GetHumanDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> res <span class="token operator">=</span> TestAvatar<span class="token punctuation">.</span>humanDescription<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&quot;bone_root&quot;</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 如果根骨骼不叫&quot;bone_root&quot;也要改一下</span>
    <span class="token punctuation">}</span>
    res<span class="token punctuation">.</span>skeleton <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span>HUMANOID_BOUND<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保留mesh根当作根，我也不知道为什么要这样，反正这样是对的</span>
    <span class="token comment">// HUMANOID_BOUND 需要debug目测一下到哪里结束HUMANOID部分</span>

    <span class="token comment">// 清空parent（一个internal修饰的变量，记录模型中的父骨骼名称）</span>
    res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SkeletonBone</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token string">&quot;this_is_root&quot;</span><span class="token punctuation">,</span> position <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>position<span class="token punctuation">,</span> rotation <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rotation<span class="token punctuation">,</span> scale <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token punctuation">}</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SkeletonBone</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> position <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>position<span class="token punctuation">,</span> rotation <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rotation<span class="token punctuation">,</span> scale <span class="token operator">=</span> res<span class="token punctuation">.</span>skeleton<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scale <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断animator状态" tabindex="-1"><a class="header-anchor" href="#判断animator状态"><span>判断Animator状态</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//检查是否正在播放reload动画</span>
<span class="token class-name">AnimatorStateInfo</span> stateinfo <span class="token operator">=</span> anim<span class="token punctuation">.</span><span class="token function">GetCurrentAnimatorStateInfo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从0开始计数</span>
<span class="token comment">//参数表示动画层的id</span>
<span class="token class-name"><span class="token keyword">bool</span></span> play_ing_flag <span class="token operator">=</span> stateinfo<span class="token punctuation">.</span><span class="token function">IsName</span><span class="token punctuation">(</span><span class="token string">&quot;handgun_combat_reload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="animator转换触发事件" tabindex="-1"><a class="header-anchor" href="#animator转换触发事件"><span>Animator转换触发事件</span></a></h3><p>需要继承StateMachineBehaviour，详见参考中的引用</p><h2 id="其他选项" tabindex="-1"><a class="header-anchor" href="#其他选项"><span>其他选项</span></a></h2><h3 id="根运动-root-motion-和脚的反向动力学-foot-ik" tabindex="-1"><a class="header-anchor" href="#根运动-root-motion-和脚的反向动力学-foot-ik"><span>根运动（Root Motion）和脚的反向动力学（foot IK）</span></a></h3><ul><li><code>Root Motion</code>：Animator在Inspector中可以勾选<code>Apply Root Motion</code>，使动画可以控制角色的transform。</li><li><code>foot Ik</code>: 在<code>Animator Controller</code>的面板中，可以为单个动画状态设置<code>foot Ik</code>，使其脚能紧贴在地板上。</li></ul><h3 id="导入动画时" tabindex="-1"><a class="header-anchor" href="#导入动画时"><span>导入动画时</span></a></h3><ul><li>可以配置动画的Root Transform选项，使模型按照动画的轨迹在场景中位移。</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,22),T={href:"https://docs.unity3d.com/cn/current/Manual/AnimationSection.html",target:"_blank",rel:"noopener noreferrer"},U={href:"https://docs.unity3d.com/Manual/ConfiguringtheAvatar.html",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,[a("Animation Rigging "),n("ul",null,[n("li",null,"blend")])],-1),N={href:"https://www.bilibili.com/video/BV1Hz4y1F75i",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.jianshu.com/p/a4379937f8c3",target:"_blank",rel:"noopener noreferrer"};function E(O,R){const o=i("center"),t=i("ExternalLinkIcon");return c(),r("div",null,[h,s(o,null,{default:e(()=>[v]),_:1}),s(o,null,{default:e(()=>[a("一个角色inspector中的animator")]),_:1}),_,s(o,null,{default:e(()=>[b]),_:1}),s(o,null,{default:e(()=>[a("一个状态动画机示例，看不清可以右键新标签页打开图片")]),_:1}),n("p",null,[a("关于对其元素更多的解释，可以查看"),n("a",f,[a("Animator Controllers文档"),s(t)])]),A,g,n("p",null,[a("详见"),n("a",y,[a("使用动画事件 - unity doc"),s(t)])]),w,x,D,n("p",null,[a("可以查看"),n("a",I,[a("动画过渡 - unity doc"),s(t)])]),C,H,s(o,null,{default:e(()=>[B]),_:1}),M,n("ul",null,[n("li",null,[n("a",T,[a("动画 - Unity Doc"),s(t)])]),n("li",null,[n("a",U,[a("ConfiguringtheAvatar - Unity Doc"),s(t)])]),q,n("li",null,[a("Spine动画："),n("a",N,[a("NIKKE射击系统在Unity中的实现 - Bilibili"),s(t)])]),n("li",null,[a("Animator状态检查和事件："),n("a",S,[a("Unity检查动画Animator状态 - 简书"),s(t)])])])])}const W=l(m,[["render",E],["__file","Animator.html.vue"]]),G=JSON.parse('{"path":"/UnityComponent/Animator.html","title":"动画机(Animator)","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Animator组件","slug":"animator组件","link":"#animator组件","children":[]},{"level":2,"title":"Animator面板","slug":"animator面板","link":"#animator面板","children":[{"level":3,"title":"AnimationEvent","slug":"animationevent","link":"#animationevent","children":[]},{"level":3,"title":"动画过渡","slug":"动画过渡","link":"#动画过渡","children":[]}]},{"level":2,"title":"humanoid & dynamic","slug":"humanoid-dynamic","link":"#humanoid-dynamic","children":[]},{"level":2,"title":"动态导入Avatar","slug":"动态导入avatar","link":"#动态导入avatar","children":[{"level":3,"title":"从默认Avatar获取HumanDescription","slug":"从默认avatar获取humandescription","link":"#从默认avatar获取humandescription","children":[]},{"level":3,"title":"判断Animator状态","slug":"判断animator状态","link":"#判断animator状态","children":[]},{"level":3,"title":"Animator转换触发事件","slug":"animator转换触发事件","link":"#animator转换触发事件","children":[]}]},{"level":2,"title":"其他选项","slug":"其他选项","link":"#其他选项","children":[{"level":3,"title":"根运动（Root Motion）和脚的反向动力学（foot IK）","slug":"根运动-root-motion-和脚的反向动力学-foot-ik","link":"#根运动-root-motion-和脚的反向动力学-foot-ik","children":[]},{"level":3,"title":"导入动画时","slug":"导入动画时","link":"#导入动画时","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1707892589000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":2}]},"readingTime":{"minutes":3.76,"words":1128},"filePathRelative":"UnityComponent/Animator.md","localizedDate":"February 13, 2024"}');export{W as comp,G as data};

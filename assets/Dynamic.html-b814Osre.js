import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c as t,a as n,b as l,d as p,e as c}from"./app-BX3Xhc_b.js";const i={},d=c(`<h1 id="动态性" tabindex="-1"><a class="header-anchor" href="#动态性"><span>动态性</span></a></h1><blockquote><p>一起感受 <code>DoFile()</code> 的魅力</p></blockquote><p>lua作为一种拥有<strong>动态类型</strong>的<strong>解释型</strong>编程语言，本文将简单提及这些特性。</p><ol><li><p>动态类型</p><ul><li>数据代码文件：不必像其他语言一样传序列化文本，我们可以直接传表示数据的lua代码</li><li>序列化方面仍然需要自己处理，而且由于动态类型的问题，处理时需要更加小心谨慎。</li><li>降低了代码可阅读性</li></ul></li><li><p>动态载入代码</p><ul><li>编译的概念和<code>load()</code>: lua会先将lua代码预编译为中间代码，<code>load()</code>函数可以运行时做这件事</li><li><code>loadfile(filename)</code>和<code>load(io.lines(filename, &quot;*L&quot;))</code>是等价的调用</li><li>预编译指令<code>luac</code>（是运行在命令行的指令），<code>.lc</code>文件（预编译版本的代码），和<code>string.dump(loadfile(filename))</code></li><li><code>loadfile()</code>和<code>load()</code>都可以接受预编译文件</li></ul></li><li><p>包管理:<code>package</code>和<code>require</code></p><ul><li>包管理也有部分是留给用户去定义的，用户可以定义搜索的位置，找到之后通过<code>loadfile()</code>载入</li><li>并允许运行时卸载包，如<code>package.loaded.math = nil</code></li><li>定义和查看都在<code>package</code>包内，通过<code>require</code>检索定义的位置</li></ul><blockquote><p>如XLua就自定义了<code>loader</code>使其查找目录增加了<code>Resource\\</code></p></blockquote><ul><li>还引申出了<code>子模块</code>和<code>包</code>的概念，如<code>mod.sub</code></li></ul></li></ol><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><h3 id="实现dostring" tabindex="-1"><a class="header-anchor" href="#实现dostring"><span>实现DoString</span></a></h3><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code>str <span class="token operator">=</span> <span class="token string">&#39;i=i+1&#39;</span>
<span class="token function">load</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">--匿名可变长参数函数(可以忽略t，t只是为了后面能够执行这个函数)</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现简单的模块" tabindex="-1"><a class="header-anchor" href="#实现简单的模块"><span>实现简单的模块</span></a></h3><p>一个拥有<code>add</code>方法的二维点类</p><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token comment">-- point.lua</span>
<span class="token keyword">local</span> point <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">-- package.loaded[...] = point --可以不用最后return，使用这种导出方式</span>
<span class="token keyword">local</span> new <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>x<span class="token operator">=</span>x<span class="token punctuation">,</span> y<span class="token operator">=</span>y<span class="token punctuation">}</span>
<span class="token keyword">end</span>

point<span class="token punctuation">.</span>new <span class="token operator">=</span> new

point<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">+</span> p2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>y <span class="token operator">+</span> p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token keyword">return</span> point
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-ext="lua" data-title="lua"><pre class="language-lua"><code><span class="token comment">-- test.lua</span>
require <span class="token string">&quot;point&quot;</span>

p1 <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
p2 <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
p3 <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,14),u={href:"https://www.lua.org/pil/",target:"_blank",rel:"noopener noreferrer"},r=n("ul",null,[n("li",null,"第15章-数据文件和序列化"),n("li",null,"第16章-编译、执行和错误"),n("li",null,"第17章-模块和包")],-1);function k(m,v){const a=e("ExternalLinkIcon");return o(),t("div",null,[d,n("ul",null,[n("li",null,[n("a",u,[l("Lua程序设计 第四版 - Roberto"),p(a)]),r])])])}const g=s(i,[["render",k],["__file","Dynamic.html.vue"]]),f=JSON.parse('{"path":"/Lua/Dynamic.html","title":"动态性","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[{"level":3,"title":"实现DoString","slug":"实现dostring","link":"#实现dostring","children":[]},{"level":3,"title":"实现简单的模块","slug":"实现简单的模块","link":"#实现简单的模块","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1708177842000,"updatedTime":1708177842000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":1}]},"readingTime":{"minutes":1.69,"words":506},"filePathRelative":"Lua/Dynamic.md","localizedDate":"February 17, 2024"}');export{g as comp,f as data};

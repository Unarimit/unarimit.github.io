import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as r,a as e,b as n,d as s,e as o}from"./app-BX3Xhc_b.js";const l="/assets/UseBehaviorDesigner-0-EfPAQJSD.png",p="/assets/UseBehaviorDesigner-1-kyD9XHLB.png",d="/assets/UseBehaviorDesigner-2-D4pM0b8D.png",u="/assets/UseBehaviorDesigner-3-DfnBHQNy.png",h="/assets/UseBehaviorDesigner-4-BpsqVrfu.png",k={},g=e("h1",{id:"记初次使用行为树插件-behavior-designer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#记初次使用行为树插件-behavior-designer"},[e("span",null,"记初次使用行为树插件-Behavior Designer")])],-1),v=e("img",{src:l},null,-1),m=e("p",null,"最近在尝试AI模块的开发，小记一下",-1),_={href:"https://www.cnblogs.com/OwlCat/p/17871494.html",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,"目标是实现：",-1),f=e("ul",null,[e("li",null,[e("code",null,"Behavior Designer"),n("的基础用法")]),e("li",null,[n("使用代码控制"),e("code",null,"Behavior Designer"),n("的状态")])],-1),T={href:"https://assetstore.unity.com/packages/tools/visual-scripting/behavior-designer-behavior-trees-for-everyone-15277",target:"_blank",rel:"noopener noreferrer"},B=e("h2",{id:"从一个拓展库的demo出发",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#从一个拓展库的demo出发"},[e("span",null,"从一个拓展库的Demo出发")])],-1),D=e("code",null,"Behavior Designer",-1),A={href:"https://opsive.com/assets/behavior-designer-tactical-pack/",target:"_blank",rel:"noopener noreferrer"},y=e("a",{href:"../Projects/TopShooting"},"MyTDS",-1),w=o('<p>&quot;Behavior Designer Tactical Pack&quot;示例场景的<code>Hierarchy</code>如下：</p><img src="'+p+'"><p>标红的部分中存储了agent和插件中的行为树组件<code>BehaviorTree</code>，标绿的名为<code>Main Camera</code>的gameobject（以下简称go）中挂载了对行为树的配置脚本<code>BehaviorSelection</code>（怪阴间的，怕别人能找到是吧）</p><p>对于<code>BehaviorTree</code>：</p>',4),x=o("<li>这些行为树（有很多不同的Tactical），都只有两个节点（树根和叶子节点），居然把整个策略用一个节点表示... <ul><li>好在我们可以查看叶子节点的脚本，看看他的策略是怎么写的</li></ul></li><li>他依赖go中挂载的<code>NavMeshAgent</code>组件和实现了<code>IAttackAgent</code>的组件</li><li>在叶子节点中，配置了攻击目标为带<code>Player TAG</code>go，若场景不存在带<code>Player TAG</code>的go，还会报错...（可能是需要在到达这个节点前先判断敌人是否存在）、</li>",3),S={href:"https://opsive.com/support/documentation/behavior-designer/behavior-tree-component/",target:"_blank",rel:"noopener noreferrer"},q=o(`<p>对于<code>BehaviorSelection</code>:</p><ul><li>字如其名的负责选择<code>Tactical Pack</code>中的策略（负责响应UI，选择对应的策略），即切换Agent go中<code>BehaviorTree</code>的激活状态</li></ul><p>这样一来我们便了解了<code>Tactical Pack</code>中策略的工作原理，策略节点封装了完整的策略流程（移动+攻击），部分实现依赖于角色go上挂载的相关组件。若要配置策略节点的参数，例如攻击目标、队长等属性，可以在<code>Behavior Designer</code>的编辑器中修改，也可以通过代码的方式，找到指定<code>Task</code>，调用他的相关属性。</p><p>通过代码的方式设定树中的某个<code>Task</code>属性：例如需要改<code>Tactical Pack</code>中<code>Attack</code>的攻击目标，可以通过:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BehaviorTree<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FindTask</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Attack<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>targetGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>new List&lt;GameObject&gt;()</code>可以替换为实际的目标数组</p><h2 id="到项目中来" tabindex="-1"><a class="header-anchor" href="#到项目中来"><span>到项目中来</span></a></h2><p>那么，我们如何把行为树应用到项目中呢？具体有以下步骤：</p><ul><li>为物体创建<code>BehaviorTree</code>组件，和具体的Task</li><li>确保物体上挂载了需要的组件和实现了某接口的组件，如<code>NavMeshAgent</code>,<code>IAttackAgent</code>,<code>IDamageable</code>等 <blockquote><p>这一点做的不好也没关系，它会报错给你的</p></blockquote></li><li>*运行时为物体配置<code>Task</code>的参数</li></ul><p>这里我基于<a href="../Projects/TopShooting">MyTDS</a>做一个简单的实现，目标为实现战斗场景中敌人的移动和攻击</p><h3 id="为物体创建behaviortree组件" tabindex="-1"><a class="header-anchor" href="#为物体创建behaviortree组件"><span>为物体创建<code>BehaviorTree</code>组件</span></a></h3><p>用<code>Tactical Pack</code>中的<code>Attack</code>Task创建了一个简单的，如下图所示</p><img src="`+d+'"><blockquote><p><code>Attack</code>会控制角色移动到可以攻击目标的位置，然后攻击</p></blockquote><h3 id="实现必要接口" tabindex="-1"><a class="header-anchor" href="#实现必要接口"><span>实现必要接口</span></a></h3><p><code>Tactical Pack</code>的<code>Attack</code>需要挂载物体有实现<code>IAttackAgent</code>接口的组件，同时<code>Attack</code>的目标要有实现<code>IDamageable</code>接口的组件。</p><p>由于我的目标和挂载物体都是同一类物体，所以专门整一个组件实现这两个接口</p>',17),P={href:"https://github.com/Unarimit/my-topdown-shooting-game/commit/0c8211d835bb9da73bcb7c623858bcb1105fdd91",target:"_blank",rel:"noopener noreferrer"},U=o(`<h3 id="运行时为物体配置task的参数" tabindex="-1"><a class="header-anchor" href="#运行时为物体配置task的参数"><span>*运行时为物体配置<code>Task</code>的参数</span></a></h3><p>有两种方式，一种是直接找到<code>Task</code>的参数，修改它；另一种是为<code>BehaviorTree</code>添加<code>Variable</code>，让<code>Task</code>引用它。显然是后者更好一些，在有多个<code>Task</code>都需要这个数据的时候，就不用反复传入了。</p><p>方法一：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BehaviorTree<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FindTask</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Attack<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>targetGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方法二：</p><p><img src="`+u+'"> <img src="'+h+`"></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token generic-method"><span class="token function">GetComponent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BehaviorTree<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetVariable</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>SharedGameObjectList<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>GameObject<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2>`,8),G=e("code",null,"BehaviorTree",-1),I={href:"https://opsive.com/assets/behavior-designer",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"BehaviorTree",-1),L={href:"https://opsive.com/support/documentation/behavior-designer/behavior-tree-component/",target:"_blank",rel:"noopener noreferrer"},j=e("code",null,"Asynchronous Load",-1),N=e("code",null,"shared variables",-1),O=o('<blockquote><p>如果不特意在非主线程中调用，其功能应该是在主线程中运行。</p></blockquote><p>除此之外，<code>BehaviorTree</code>提供丰富的<code>Task</code>支持<code>UnityEvent</code>和如<code>Aniamtor</code>之类的关键组件，使用这些应该能使开发更迅速，但应该不是一种好的方式。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',3),E={href:"https://assetstore.unity.com/packages/tools/visual-scripting/behavior-designer-behavior-trees-for-everyone-15277",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.cnblogs.com/OwlCat/p/17871494.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://opsive.com/assets/behavior-designer-tactical-pack/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://opsive.com/support/documentation/behavior-designer/overview/",target:"_blank",rel:"noopener noreferrer"};function H(R,J){const a=c("ExternalLinkIcon");return i(),r("div",null,[g,v,m,e("blockquote",null,[e("p",null,[n("可以先提前学习一下行为树的理论知识，推荐这篇文章："),e("a",_,[n("游戏AI行为决策——行为树 - cnblog"),s(a)])])]),b,f,e("p",null,[n("插件商店页面："),e("a",T,[n("Behavior Designer - Behavior Trees for Everyone - Asset Store"),s(a)])]),B,e("p",null,[n("接触"),D,n("，是因为我对他的"),e("a",A,[n("Tactical Pack"),s(a)]),n("很感兴趣，如果能接入到我的项目中（"),y,n("）就能大大提高我的开发效率。不多说了，我们直接开始。")]),w,e("ul",null,[x,e("li",null,[e("a",S,[n("BehaviorTree的文档描述"),s(a)])])]),q,e("p",null,[n("放代码在这里太占字数了，有需要可以参考"),e("a",P,[n("MyTDS实现这个功能的commit"),s(a)])]),U,e("p",null,[n("以上介绍了"),G,n("的使用方法，但如果要实现一个不错的角色行为树，还需要了解行为树组件之间的链接模式和常用功能的实现方式， "),e("a",I,[n("Behavior Designer官网"),s(a)]),n("应该会有一些不错的示例。")]),e("p",null,[C,n("还设想了多线程去处理行为树的情况，如果要用到这些可以参考"),e("a",L,[n("文档中"),s(a)]),n("对"),j,n("和"),N,n("的说明。")]),O,e("ul",null,[e("li",null,[n("商店页面："),e("a",E,[n("Behavior Designer - Behavior Trees for Everyone - Asset Store"),s(a)])]),e("li",null,[e("a",M,[n("游戏AI行为决策——行为树 - cnblog"),s(a)])]),e("li",null,[e("a",V,[n("Behavior Designer Tactical Pack - official"),s(a)])]),e("li",null,[e("a",F,[n("Behavior Designer插件文档 - official"),s(a)])])])])}const X=t(k,[["render",H],["__file","UseBehaviorDesigner.html.vue"]]),K=JSON.parse('{"path":"/CodingRamble/UseBehaviorDesigner.html","title":"记初次使用行为树插件-Behavior Designer","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"从一个拓展库的Demo出发","slug":"从一个拓展库的demo出发","link":"#从一个拓展库的demo出发","children":[]},{"level":2,"title":"到项目中来","slug":"到项目中来","link":"#到项目中来","children":[{"level":3,"title":"为物体创建BehaviorTree组件","slug":"为物体创建behaviortree组件","link":"#为物体创建behaviortree组件","children":[]},{"level":3,"title":"实现必要接口","slug":"实现必要接口","link":"#实现必要接口","children":[]},{"level":3,"title":"*运行时为物体配置Task的参数","slug":"运行时为物体配置task的参数","link":"#运行时为物体配置task的参数","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1708011239000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":2}]},"readingTime":{"minutes":4.26,"words":1279},"filePathRelative":"CodingRamble/UseBehaviorDesigner.md","localizedDate":"February 13, 2024"}');export{X as comp,K as data};

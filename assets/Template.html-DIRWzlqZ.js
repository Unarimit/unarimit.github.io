import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-BX3Xhc_b.js";const i={},u=p(`<h1 id="模板-c" tabindex="-1"><a class="header-anchor" href="#模板-c"><span>模板（C++）</span></a></h1><p>模板是一种用于运行时多态的技术，最容易接触到的就是一些容器类，如vector，又或是手写的模板print函数。可以看完下列内容之后去看看vector和function两个STL模板类的实现。</p><p>本章只涉及常见的模板知识（如stl中出现的），不涉及一些比较费解的概念（如模板元编程、类型萃取）</p><h2 id="为什么叫模板" tabindex="-1"><a class="header-anchor" href="#为什么叫模板"><span>为什么叫模板？</span></a></h2><blockquote><p>template: a shaped piece of rigid material used as a pattern for processes such as cutting out, shaping, or drilling.</p></blockquote><p>附上一段template的英文释义，C++的模板更像是在一个模具中“填充”或“替换”，可惜无论cutting、shaping还是drilling好像都没有这层意思。</p><h3 id="我的理解" tabindex="-1"><a class="header-anchor" href="#我的理解"><span>我的理解</span></a></h3><blockquote><p>《Effective C++》中将其称为一种 “隐式接口” （相对于类的“显示接口”），我觉得也是一种合适的解释。</p></blockquote><p>当有下面一个模板函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">try_push</span><span class="token punctuation">(</span>T arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能会说：啊~是打印数组。（所有T都在编译时被替换为相应的类型）</p><p>当有下面一个模板函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">try_push</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>
    t<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能会说：嗯？这有什么意义？T只能是一个类似<code>vector&lt;int&gt;</code>的东西（要求有一个 <code>push_back(int)</code> 成员函数）</p><p>是的，这就是我对C++模板的理解，他很自由，<s>自由到可以随便定义这种没有意义的东西</s>，他是被隐式约束的，非常考察开发者的记忆力和注释水平。</p><h2 id="作用对象" tabindex="-1"><a class="header-anchor" href="#作用对象"><span>作用对象</span></a></h2>`,16),r=n("li",null,"函数模板：作用于函数，例如最简单的打印数组（泛型版）",-1),k=n("li",null,"类模板：作用于类，例如stl的容器类",-1),d=n("li",null,[s("成员函数模板：作用于类的成员函数，例如 "),n("code",null,"priority_queue<>"),s(" 的构造方法。 "),n("ul",null,[n("li",null,[n("code",null,"priority_queue<>"),s(" 的构造方法会根据泛型是函数对象还是函数指针生成接受不同参数的构造函数。")])])],-1),m=n("code",null,"constexpr",-1),v={href:"https://github.com/Cpp-Club/Cxx_HOPL4_zh/blob/main/05.md",target:"_blank",rel:"noopener noreferrer"},b=p(`<h2 id="成员函数生成控制-enable-if-和-sfinae-c-11" tabindex="-1"><a class="header-anchor" href="#成员函数生成控制-enable-if-和-sfinae-c-11"><span>成员函数生成控制：<code>enable_if</code> 和 SFINAE（C++ 11）</span></a></h2><p>以 <code>priority_queue&lt;&gt;</code> 为例，有以下代码</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">comps</span><span class="token punctuation">{</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">auto</span> comp1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">auto</span> pq1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">priority_queue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>comp1<span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>comp1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确的构造</span>
    <span class="token comment">//auto pq1_1 = priority_queue&lt;int, vector&lt;int&gt;, decltype(comp1)&gt;(); // 不能通过编译</span>
    <span class="token keyword">auto</span> pq2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">priority_queue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确的构造（C++14）</span>
    <span class="token keyword">auto</span> pq3 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">priority_queue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> function<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 虽然能过编译，但在对象上操作就会报错</span>
    <span class="token keyword">auto</span> pq4 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">priority_queue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> comps<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确的构造</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>pq1</code> 和 <code>pq2</code> 在构造函数上的差距就是本小节的主题。即模板第三个为函数指针 <code>decltype(comp1)</code> 时，不生成无参构造方法，模板第三个为函数对象 <code>less&lt;&gt;</code> 时，生成无参构造方法。</p><p>模板如何根据参数不同生成不同的成员函数呢？即是C++模板特性之一“SFINAE（Substitution Failure Is Not An Error，替换失败不是错误）”，它是随一种类型特征（type trait）<code>enable_if</code> 产生的概念。</p><p><code>priority_queue&lt;&gt;</code>的构造函数定义如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Tp</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Sequence</span> <span class="token operator">=</span> vector<span class="token operator">&lt;</span>_Tp<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">typename</span> <span class="token class-name">_Compare</span>  <span class="token operator">=</span> less<span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Sequence</span><span class="token double-colon punctuation">::</span>value_type<span class="token operator">&gt;</span> <span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">priority_queue</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_Seq</span> <span class="token operator">=</span> _Sequence<span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Requires</span> <span class="token operator">=</span> <span class="token keyword">typename</span>
	       <span class="token class-name">enable_if</span><span class="token operator">&lt;</span>__and_<span class="token operator">&lt;</span>is_default_constructible<span class="token operator">&lt;</span>_Compare<span class="token operator">&gt;</span><span class="token punctuation">,</span>
				is_default_constructible<span class="token operator">&lt;</span>_Seq<span class="token operator">&gt;&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type<span class="token operator">&gt;</span>
	<span class="token function">priority_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">:</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本文语境下，通过 <code>is_default_constructible</code> 判断模板第三个（即 <code>_Compare</code>）需要拥有默认构造函数，若拥有，则允许生成该无参构造函数，若没有，则发生了“替换失败”，该无参构造函数不再生成。</p>`,8),y={href:"https://learn.microsoft.com/zh-cn/cpp/standard-library/is-default-constructible-class?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"本例中，除了SFINAE规则外，还利用了类型萃取，这是一个涉及到模板编程的概念，就不再深入了（我不懂了）。",-1),_={href:"https://www.zhihu.com/question/542280815",target:"_blank",rel:"noopener noreferrer"},f=p(`<p>上述代码 <code>pq3</code> 这种能通过编译的定义方式，也说明了该方案还有不够完美的地方（不过也很好排查就是了，运行时会抛出<code>function&lt;&gt;</code> 中定义的空异常）。</p><h2 id="传参-forward-和-c-11" tabindex="-1"><a class="header-anchor" href="#传参-forward-和-c-11"><span>传参：<code>forward</code> 和 <code>&amp;&amp;</code>（C++ 11）</span></a></h2><p><code>forward</code> 一般配合模板引用 <code>T&amp;&amp;</code> 实现保留语义（如常量左值、右值）的参数转发。下方代码进行举例说明：</p><p><code>entrance</code> 将右值语义和左值语义参数分配转发到了 <code>func(TestClass&amp;&amp;)</code> 和 <code>func(const TestClass&amp;)</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>TestClass<span class="token operator">&amp;&amp;</span> rvalue<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;rvalue func call&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">const</span> TestClass<span class="token operator">&amp;</span> lvalue<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;lvalue func call&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">entrance</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">func</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">forward</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    TestClass<span class="token operator">&amp;&amp;</span> t1 <span class="token operator">=</span> <span class="token function">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">entrance</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lvalue func call</span>
    <span class="token function">entrance</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rvalue func call</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个类中封装了一个 <code>vector&lt;T&gt;</code> 则可以利用此规则通过传参不同调用 <code>vector&lt;T&gt;</code> 中不同版本的 <code>push_back</code>。另外可以利用包转发实现原地构造（即类似 <code>vector&lt;T&gt;</code> 中的 <code>emplace_back</code> 的功能）</p><h2 id="试写-vector-t" tabindex="-1"><a class="header-anchor" href="#试写-vector-t"><span>试写 <code>vector&lt;T&gt;</code></span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">my_vector</span><span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">my_vector</span><span class="token punctuation">(</span><span class="token keyword">const</span> initializer_list<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">&amp;</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 列表初始化</span>
    <span class="token function">my_vector</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常初始化</span>
    <span class="token function">my_vector</span><span class="token punctuation">(</span><span class="token keyword">const</span> my_vector<span class="token operator">&amp;</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝构造</span>
    my_vector <span class="token keyword">operator</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> my_vector<span class="token operator">&amp;</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝赋值</span>
    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">const</span> size_t index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下标访问符</span>
    <span class="token keyword">const</span> T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">const</span> size_t index<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// const下的下标访问符</span>
    <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入</span>
    <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右值插入</span>
    <span class="token keyword">void</span> <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除</span>
    <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> Args<span class="token operator">&gt;</span>
    <span class="token keyword">void</span> <span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> Args<span class="token operator">&amp;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> clist<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内存原地构造，placement new，参数包转发</span>
    size_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取数组大小</span>
    <span class="token operator">~</span><span class="token function">my_vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 析构</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    T<span class="token operator">*</span> arr<span class="token punctuation">;</span> <span class="token comment">// 存储</span>
    size_t capacity<span class="token punctuation">,</span> used_size<span class="token punctuation">;</span> <span class="token comment">// 容量和已使用大小</span>
    <span class="token keyword">void</span> <span class="token function">insure_size</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保证内存空间（在这里扩容）</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="试写-function" tabindex="-1"><a class="header-anchor" href="#试写-function"><span>试写 <code>function&lt;&gt;</code></span></a></h2><p>没看懂里面怎么写的，WIP。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,11),g={href:"https://github.com/Cpp-Club/Cxx_HOPL4_zh/tree/main",target:"_blank",rel:"noopener noreferrer"},w=n("ul",null,[n("li",null,"C++11")],-1),T={href:"https://www.bilibili.com/video/BV1oD4y1h7S3",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.youtube.com/@TheCherno",target:"_blank",rel:"noopener noreferrer"},C=n("li",null,"p92 自己写Vector（用到了模板编程的各种知识）",-1);function x(z,S){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[r,k,d,n("li",null,[s("变量模板（C++ 14）：呃呃，结合“概念”和 "),m,s(" 产生了很多我看不懂的东西，可以参考"),n("a",v,[s("C++14：完成 C++11 - HOPL4 C++，github"),t(a)])])]),b,n("blockquote",null,[n("p",null,[s("参考"),n("a",y,[s("is_default_constructible 类 - learn.microsoft"),t(a)])])]),h,n("blockquote",null,[n("p",null,[s("可以看看"),n("a",_,[s("问题：C++ 关于 concept 与 type traits 的优劣是什么？ - 知乎"),t(a)]),s("下的回答。")])]),f,n("ul",null,[n("li",null,[n("a",g,[s("《HOPL4 C++》，Bjarne Stroustrup"),t(a)]),w]),n("li",null,[n("a",T,[s("C++视频教程 - The Cherno & Bilibili搬运"),t(a)]),n("ul",null,[n("li",null,[n("a",q,[s("The Cherno - Youtube主页"),t(a)])]),C])])])])}const L=e(i,[["render",x],["__file","Template.html.vue"]]),A=JSON.parse('{"path":"/Language/Template.html","title":"模板（C++）","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"为什么叫模板？","slug":"为什么叫模板","link":"#为什么叫模板","children":[{"level":3,"title":"我的理解","slug":"我的理解","link":"#我的理解","children":[]}]},{"level":2,"title":"作用对象","slug":"作用对象","link":"#作用对象","children":[]},{"level":2,"title":"成员函数生成控制：enable_if 和 SFINAE（C++ 11）","slug":"成员函数生成控制-enable-if-和-sfinae-c-11","link":"#成员函数生成控制-enable-if-和-sfinae-c-11","children":[]},{"level":2,"title":"传参：forward 和 &&（C++ 11）","slug":"传参-forward-和-c-11","link":"#传参-forward-和-c-11","children":[]},{"level":2,"title":"试写 vector<T>","slug":"试写-vector-t","link":"#试写-vector-t","children":[]},{"level":2,"title":"试写 function<>","slug":"试写-function","link":"#试写-function","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1712934413000,"updatedTime":1714294586000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":7}]},"readingTime":{"minutes":4.89,"words":1467},"filePathRelative":"Language/Template.md","localizedDate":"April 12, 2024"}');export{L as comp,A as data};

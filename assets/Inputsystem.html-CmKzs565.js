import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c,a as n,b as a,d as t,e as i}from"./app-BX3Xhc_b.js";const l="/assets/inputsystem-pic2-BPypjzYv.png",u="/assets/inputsystem-pic3-BrXDYz38.png",r="/assets/inputsystem-pic1-BOIGSuSn.png",k={},d=i('<h1 id="输入系统-inputsystem" tabindex="-1"><a class="header-anchor" href="#输入系统-inputsystem"><span>输入系统(InputSystem)</span></a></h1><p>Input System在Unity 2019.1及更高版本中成为了新的默认输入系统。</p><p>用来处理玩家在键盘、手柄等介质的输入。</p><p>我们先来看一个最佳实践的例子吧：</p><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><p>根据unity自带的<strong>第三人称模板</strong>和一个教程视频(见参考)，利用inputsystem的最佳实践如下所示：</p><img src="'+l+'"><p><code>Player Input</code>用于锁定接收指令的GameObject</p><blockquote><p>需要注意的是，默认情况下一个输入设备只能绑定到一个<code>Player Input</code>上。如果存在两个以上的<code>Player Input</code>，他不会接收同一台输入设备的输入，除非对<code>Player Input</code>强制配置，或利用<code>Player Input Manager</code>。</p></blockquote><img src="'+u+`"><p>其中<code>Input Action Script</code>需要和<code>Player Input</code>挂载在同一个GameObject上，其中的代码为：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 节选部分</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarterAssetsInputs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Vector2</span> move<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> jump<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnMove</span><span class="token punctuation">(</span><span class="token class-name">InputValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">MoveInput</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Vector2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnJump</span><span class="token punctuation">(</span><span class="token class-name">InputValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">JumpInput</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">.</span>isPressed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MoveInput</span><span class="token punctuation">(</span><span class="token class-name">Vector2</span> newMoveDirection<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        move <span class="token operator">=</span> newMoveDirection<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">JumpInput</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">bool</span></span> newJumpState<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        jump <span class="token operator">=</span> newJumpState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="讨论" tabindex="-1"><a class="header-anchor" href="#讨论"><span>讨论</span></a></h2><p>和旧的输入系统比起来，开发者需要做的事情变多了，本来一句<code>Input.GetKeyDown( )</code>就搞定的问题，现在要涉及多个文件，合理吗？</p><p>可能相比更容易的玩家自定义按键和多输入设备映射带来的好处，这些复杂的工作是可以接受的吧。</p><h2 id="其他例子" tabindex="-1"><a class="header-anchor" href="#其他例子"><span>其他例子</span></a></h2><h3 id="利用inputactions文件生成按键指南" tabindex="-1"><a class="header-anchor" href="#利用inputactions文件生成按键指南"><span>利用inputActions文件生成按键指南</span></a></h3><p>先上效果：</p><img src="`+r+`"><p>然后是代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyTipsController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">MonoBehaviour</span></span>
<span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">TextMeshProUGUI</span> keyPromptText<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">InputActionAsset</span> inputActionAsset<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">GenerateKeyPrompts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GenerateKeyPrompts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> inputActions <span class="token operator">=</span> inputActionAsset<span class="token punctuation">.</span>actionMaps<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> actionMap <span class="token keyword">in</span> inputActions<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> action <span class="token keyword">in</span> actionMap<span class="token punctuation">.</span>actions<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 忽略不是按键类型的操作</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>action<span class="token punctuation">.</span>bindings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isPartOfComposite<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>bindings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>effectivePath<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">action<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string">: &quot;</span></span> <span class="token operator">+</span>
                        <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">action<span class="token punctuation">.</span>bindings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>effectivePath<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string"> \\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> sb<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">action<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">action<span class="token punctuation">.</span>bindings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>effectivePath</span><span class="token punctuation">}</span></span><span class="token string"> \\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        keyPromptText<span class="token punctuation">.</span>text <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,22),m={href:"https://www.youtube.com/watch?v=BAXZ6bxdTYI",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.unity3d.com/Packages/com.unity.inputsystem@1.6/manual/PlayerInput.html",target:"_blank",rel:"noopener noreferrer"};function b(y,h){const s=e("ExternalLinkIcon");return o(),c("div",null,[d,n("ul",null,[n("li",null,[n("a",m,[a("InputSystem Best Practices Part1 - Youtube"),t(s)])]),n("li",null,[n("a",v,[a("The PlayerInput component - Unity doc"),t(s)])])])])}const f=p(k,[["render",b],["__file","Inputsystem.html.vue"]]),I=JSON.parse('{"path":"/UnityComponent/Inputsystem.html","title":"输入系统(InputSystem)","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]},{"level":2,"title":"讨论","slug":"讨论","link":"#讨论","children":[]},{"level":2,"title":"其他例子","slug":"其他例子","link":"#其他例子","children":[{"level":3,"title":"利用inputActions文件生成按键指南","slug":"利用inputactions文件生成按键指南","link":"#利用inputactions文件生成按键指南","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1707819000000,"updatedTime":1707819000000,"contributors":[{"name":"Unarimit","email":"1798907875@qq.com","commits":1}]},"readingTime":{"minutes":1.55,"words":465},"filePathRelative":"UnityComponent/Inputsystem.md","localizedDate":"February 13, 2024"}');export{f as comp,I as data};
